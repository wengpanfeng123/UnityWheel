
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg.ui
{
public sealed partial class UIPanel : Luban.BeanBase
{
    public UIPanel(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { if(!_buf["layer"].IsNumber) { throw new SerializationException(); }  Layer = _buf["layer"]; }
        { if(!_buf["mutexRule"].IsNumber) { throw new SerializationException(); }  MutexRule = _buf["mutexRule"]; }
        { if(!_buf["ignoreMutex"].IsBoolean) { throw new SerializationException(); }  IgnoreMutex = _buf["ignoreMutex"]; }
        { if(!_buf["name"].IsString) { throw new SerializationException(); }  Name = _buf["name"]; }
        { if(!_buf["desc"].IsString) { throw new SerializationException(); }  Desc = _buf["desc"]; }
        { if(!_buf["isFull"].IsBoolean) { throw new SerializationException(); }  IsFull = _buf["isFull"]; }
        { if(!_buf["path"].IsString) { throw new SerializationException(); }  Path = _buf["path"]; }
        { if(!_buf["isMultiInstance"].IsBoolean) { throw new SerializationException(); }  IsMultiInstance = _buf["isMultiInstance"]; }
        { if(!_buf["isResident"].IsBoolean) { throw new SerializationException(); }  IsResident = _buf["isResident"]; }
    }

    public static UIPanel DeserializeUIPanel(JSONNode _buf)
    {
        return new ui.UIPanel(_buf);
    }

    /// <summary>
    /// id
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 归属层级
    /// </summary>
    public readonly int Layer;
    /// <summary>
    /// 互斥规则(0-同层互斥,1-共存显示)
    /// </summary>
    public readonly int MutexRule;
    /// <summary>
    /// 忽略同层互斥关系
    /// </summary>
    public readonly bool IgnoreMutex;
    /// <summary>
    /// 名称
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 描述
    /// </summary>
    public readonly string Desc;
    /// <summary>
    /// 是否全屏
    /// </summary>
    public readonly bool IsFull;
    /// <summary>
    /// 路径
    /// </summary>
    public readonly string Path;
    /// <summary>
    /// 是否为多实例
    /// </summary>
    public readonly bool IsMultiInstance;
    /// <summary>
    /// 是否为常驻UI
    /// </summary>
    public readonly bool IsResident;
   
    public const int __ID__ = 833672822;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "layer:" + Layer + ","
        + "mutexRule:" + MutexRule + ","
        + "ignoreMutex:" + IgnoreMutex + ","
        + "name:" + Name + ","
        + "desc:" + Desc + ","
        + "isFull:" + IsFull + ","
        + "path:" + Path + ","
        + "isMultiInstance:" + IsMultiInstance + ","
        + "isResident:" + IsResident + ","
        + "}";
    }
}

}

