
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import (
    "demo/luban"
)

import "errors"

type TestMultiRowRecord struct {
    Id int32
    Name string
    OneRows []*TestMultiRowType1
    MultiRows1 []*TestMultiRowType1
    MultiRows2 []*TestMultiRowType1
    MultiRows4 map[int32]*TestMultiRowType2
    MultiRows5 []*TestMultiRowType3
    MultiRows6 map[int32]*TestMultiRowType2
    MultiRows7 map[int32]int32
}

const TypeId_TestMultiRowRecord = -501249394

func (*TestMultiRowRecord) GetTypeId() int32 {
    return -501249394
}

func NewTestMultiRowRecord(_buf *luban.ByteBuf) (_v *TestMultiRowRecord, err error) {
    _v = &TestMultiRowRecord{}
    { if _v.Id, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }
    { if _v.Name, err = _buf.ReadString(); err != nil { err = errors.New("error"); return } }
    {_v.OneRows = make([]*TestMultiRowType1, 0); var _n0_ int; if _n0_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i0 := 0 ; i0 < _n0_ ; i0++ { var _e0_ *TestMultiRowType1; { if _e0_, err = NewTestMultiRowType1(_buf); err != nil { err = errors.New("error"); return } }; _v.OneRows = append(_v.OneRows, _e0_) } }
    {_v.MultiRows1 = make([]*TestMultiRowType1, 0); var _n0_ int; if _n0_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i0 := 0 ; i0 < _n0_ ; i0++ { var _e0_ *TestMultiRowType1; { if _e0_, err = NewTestMultiRowType1(_buf); err != nil { err = errors.New("error"); return } }; _v.MultiRows1 = append(_v.MultiRows1, _e0_) } }
    {_v.MultiRows2 = make([]*TestMultiRowType1, 0); var _n0_ int; if _n0_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i0 := 0 ; i0 < _n0_ ; i0++ { var _e0_ *TestMultiRowType1; { if _e0_, err = NewTestMultiRowType1(_buf); err != nil { err = errors.New("error"); return } }; _v.MultiRows2 = append(_v.MultiRows2, _e0_) } }
    { _v.MultiRows4 = make(map[int32]*TestMultiRowType2); var _n0_ int; if _n0_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i0 := 0 ; i0 < _n0_ ; i0++ { var _key0_ int32; { if _key0_, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }; var _value0_ *TestMultiRowType2; { if _value0_, err = NewTestMultiRowType2(_buf); err != nil { err = errors.New("error"); return } }; _v.MultiRows4[_key0_] = _value0_} }
    {_v.MultiRows5 = make([]*TestMultiRowType3, 0); var _n0_ int; if _n0_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i0 := 0 ; i0 < _n0_ ; i0++ { var _e0_ *TestMultiRowType3; { if _e0_, err = NewTestMultiRowType3(_buf); err != nil { err = errors.New("error"); return } }; _v.MultiRows5 = append(_v.MultiRows5, _e0_) } }
    { _v.MultiRows6 = make(map[int32]*TestMultiRowType2); var _n0_ int; if _n0_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i0 := 0 ; i0 < _n0_ ; i0++ { var _key0_ int32; { if _key0_, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }; var _value0_ *TestMultiRowType2; { if _value0_, err = NewTestMultiRowType2(_buf); err != nil { err = errors.New("error"); return } }; _v.MultiRows6[_key0_] = _value0_} }
    { _v.MultiRows7 = make(map[int32]int32); var _n0_ int; if _n0_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i0 := 0 ; i0 < _n0_ ; i0++ { var _key0_ int32; { if _key0_, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }; var _value0_ int32; { if _value0_, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }; _v.MultiRows7[_key0_] = _value0_} }
    return
}

