
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import (
    "demo/luban"
)

import "errors"

type CommonGlobalConfig struct {
    X1 int32
    X2 int32
    X3 int32
    X4 int32
    X5 int32
    X6 int32
    X7 []int32
}

const TypeId_CommonGlobalConfig = -848234488

func (*CommonGlobalConfig) GetTypeId() int32 {
    return -848234488
}

func NewCommonGlobalConfig(_buf *luban.ByteBuf) (_v *CommonGlobalConfig, err error) {
    _v = &CommonGlobalConfig{}
    { if _v.X1, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }
    { if _v.X2, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }
    { if _v.X3, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }
    { if _v.X4, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }
    { if _v.X5, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }
    { if _v.X6, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }
    {_v.X7 = make([]int32, 0); var _n0_ int; if _n0_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i0 := 0 ; i0 < _n0_ ; i0++ { var _e0_ int32; { if _e0_, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }; _v.X7 = append(_v.X7, _e0_) } }
    return
}

