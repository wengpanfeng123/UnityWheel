
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import (
    "demo/luban"
)

import "errors"

type TestExcelFromJson struct {
    X4 int32
    X1 bool
    X5 int64
    X6 float32
    S1 string
    S2 string
    T1 int64
    X12 *TestDemoType1
    X13 int32
    X14 interface{}
    K1 []int32
    K8 map[int32]int32
    K9 []*TestDemoE2
    K15 []interface{}
}

const TypeId_TestExcelFromJson = -1485706483

func (*TestExcelFromJson) GetTypeId() int32 {
    return -1485706483
}

func NewTestExcelFromJson(_buf *luban.ByteBuf) (_v *TestExcelFromJson, err error) {
    _v = &TestExcelFromJson{}
    { if _v.X4, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }
    { if _v.X1, err = _buf.ReadBool(); err != nil { err = errors.New("error"); err = errors.New("error"); return } }
    { if _v.X5, err = _buf.ReadLong(); err != nil { err = errors.New("error"); return } }
    { if _v.X6, err = _buf.ReadFloat(); err != nil { err = errors.New("error"); return } }
    { if _v.S1, err = _buf.ReadString(); err != nil { err = errors.New("error"); return } }
    { if _v.S2, err = _buf.ReadString(); err != nil { err = errors.New("error"); return } }
    { if _v.T1, err = _buf.ReadLong(); err != nil { err = errors.New("error"); return } }
    { if _v.X12, err = NewTestDemoType1(_buf); err != nil { err = errors.New("error"); return } }
    { if _v.X13, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }
    { if _v.X14, err = NewTestDemoDynamic(_buf); err != nil { err = errors.New("error"); return } }
    {_v.K1 = make([]int32, 0); var _n0_ int; if _n0_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i0 := 0 ; i0 < _n0_ ; i0++ { var _e0_ int32; { if _e0_, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }; _v.K1 = append(_v.K1, _e0_) } }
    { _v.K8 = make(map[int32]int32); var _n0_ int; if _n0_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i0 := 0 ; i0 < _n0_ ; i0++ { var _key0_ int32; { if _key0_, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }; var _value0_ int32; { if _value0_, err = _buf.ReadInt(); err != nil { err = errors.New("error"); return } }; _v.K8[_key0_] = _value0_} }
    {_v.K9 = make([]*TestDemoE2, 0); var _n0_ int; if _n0_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i0 := 0 ; i0 < _n0_ ; i0++ { var _e0_ *TestDemoE2; { if _e0_, err = NewTestDemoE2(_buf); err != nil { err = errors.New("error"); return } }; _v.K9 = append(_v.K9, _e0_) } }
    {_v.K15 = make([]interface{}, 0); var _n0_ int; if _n0_, err = _buf.ReadSize(); err != nil { err = errors.New("error"); return}; for i0 := 0 ; i0 < _n0_ ; i0++ { var _e0_ interface{}; { if _e0_, err = NewTestDemoDynamic(_buf); err != nil { err = errors.New("error"); return } }; _v.K15 = append(_v.K15, _e0_) } }
    return
}

