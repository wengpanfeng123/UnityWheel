
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type TestDemoPrimitiveTypesTable struct {
    X1 bool
    X2 byte
    X3 int16
    X4 int32
    X5 int64
    X6 float32
    X7 float64
    S1 string
    S2 string
    V2 *vec2
    V3 *vec3
    V4 *vec4
    T1 int64
}

const TypeId_TestDemoPrimitiveTypesTable = -370934083

func (*TestDemoPrimitiveTypesTable) GetTypeId() int32 {
    return -370934083
}

func NewTestDemoPrimitiveTypesTable(_buf map[string]interface{}) (_v *TestDemoPrimitiveTypesTable, err error) {
    _v = &TestDemoPrimitiveTypesTable{}
    { var _ok_ bool; var __json_x1__ interface{}; if __json_x1__, _ok_ = _buf["x1"]; !_ok_ || __json_x1__ == nil { err = errors.New("x1 error"); return } else { var __x__ bool;  { var _ok_ bool; if __x__, _ok_ = __json_x1__.(bool); !_ok_ { err = errors.New("__x__ error"); return } }; _v.X1 = __x__ }}
    { var _ok_ bool; var __json_x2__ interface{}; if __json_x2__, _ok_ = _buf["x2"]; !_ok_ || __json_x2__ == nil { err = errors.New("x2 error"); return } else { var __x__ byte;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_x2__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = byte(_x_) }; _v.X2 = __x__ }}
    { var _ok_ bool; var __json_x3__ interface{}; if __json_x3__, _ok_ = _buf["x3"]; !_ok_ || __json_x3__ == nil { err = errors.New("x3 error"); return } else { var __x__ int16;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_x3__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int16(_x_) }; _v.X3 = __x__ }}
    { var _ok_ bool; var __json_x4__ interface{}; if __json_x4__, _ok_ = _buf["x4"]; !_ok_ || __json_x4__ == nil { err = errors.New("x4 error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_x4__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.X4 = __x__ }}
    { var _ok_ bool; var __json_x5__ interface{}; if __json_x5__, _ok_ = _buf["x5"]; !_ok_ || __json_x5__ == nil { err = errors.New("x5 error"); return } else { var __x__ int64;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_x5__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int64(_x_) }; _v.X5 = __x__ }}
    { var _ok_ bool; var __json_x6__ interface{}; if __json_x6__, _ok_ = _buf["x6"]; !_ok_ || __json_x6__ == nil { err = errors.New("x6 error"); return } else { var __x__ float32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_x6__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = float32(_x_) }; _v.X6 = __x__ }}
    { var _ok_ bool; var __json_x7__ interface{}; if __json_x7__, _ok_ = _buf["x7"]; !_ok_ || __json_x7__ == nil { err = errors.New("x7 error"); return } else { var __x__ float64;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_x7__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = float64(_x_) }; _v.X7 = __x__ }}
    { var _ok_ bool; var __json_s1__ interface{}; if __json_s1__, _ok_ = _buf["s1"]; !_ok_ || __json_s1__ == nil { err = errors.New("s1 error"); return } else { var __x__ string;  {  if __x__, _ok_ = __json_s1__.(string); !_ok_ { err = errors.New("__x__ error"); return } }; _v.S1 = __x__ }}
    { var _ok_ bool; var __json_s2__ interface{}; if __json_s2__, _ok_ = _buf["s2"]; !_ok_ || __json_s2__ == nil { err = errors.New("s2 error"); return } else { var __x__ string;  {  if __x__, _ok_ = __json_s2__.(string); !_ok_ { err = errors.New("__x__ error"); return } }; _v.S2 = __x__ }}
    { var _ok_ bool; var __json_v2__ interface{}; if __json_v2__, _ok_ = _buf["v2"]; !_ok_ || __json_v2__ == nil { err = errors.New("v2 error"); return } else { var __x__ *vec2;  { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = __json_v2__.(map[string]interface{}); !_ok_ { err = errors.New("__x__ error"); return }; if __x__, err = Newvec2(_x_); err != nil { return } }; _v.V2 = __x__ }}
    { var _ok_ bool; var __json_v3__ interface{}; if __json_v3__, _ok_ = _buf["v3"]; !_ok_ || __json_v3__ == nil { err = errors.New("v3 error"); return } else { var __x__ *vec3;  { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = __json_v3__.(map[string]interface{}); !_ok_ { err = errors.New("__x__ error"); return }; if __x__, err = Newvec3(_x_); err != nil { return } }; _v.V3 = __x__ }}
    { var _ok_ bool; var __json_v4__ interface{}; if __json_v4__, _ok_ = _buf["v4"]; !_ok_ || __json_v4__ == nil { err = errors.New("v4 error"); return } else { var __x__ *vec4;  { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = __json_v4__.(map[string]interface{}); !_ok_ { err = errors.New("__x__ error"); return }; if __x__, err = Newvec4(_x_); err != nil { return } }; _v.V4 = __x__ }}
    { var _ok_ bool; var __json_t1__ interface{}; if __json_t1__, _ok_ = _buf["t1"]; !_ok_ || __json_t1__ == nil { err = errors.New("t1 error"); return } else { var __x__ int64;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_t1__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int64(_x_) }; _v.T1 = __x__ }}
    return
}

