
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type AiBlackboardKey struct {
    Name string
    Desc string
    IsStatic bool
    KeyType int32
    TypeClassName string
}

const TypeId_AiBlackboardKey = -511559886

func (*AiBlackboardKey) GetTypeId() int32 {
    return -511559886
}

func NewAiBlackboardKey(_buf map[string]interface{}) (_v *AiBlackboardKey, err error) {
    _v = &AiBlackboardKey{}
    { var _ok_ bool; var __json_name__ interface{}; if __json_name__, _ok_ = _buf["name"]; !_ok_ || __json_name__ == nil { err = errors.New("name error"); return } else { var __x__ string;  {  if __x__, _ok_ = __json_name__.(string); !_ok_ { err = errors.New("__x__ error"); return } }; _v.Name = __x__ }}
    { var _ok_ bool; var __json_desc__ interface{}; if __json_desc__, _ok_ = _buf["desc"]; !_ok_ || __json_desc__ == nil { err = errors.New("desc error"); return } else { var __x__ string;  {  if __x__, _ok_ = __json_desc__.(string); !_ok_ { err = errors.New("__x__ error"); return } }; _v.Desc = __x__ }}
    { var _ok_ bool; var __json_is_static__ interface{}; if __json_is_static__, _ok_ = _buf["is_static"]; !_ok_ || __json_is_static__ == nil { err = errors.New("is_static error"); return } else { var __x__ bool;  { var _ok_ bool; if __x__, _ok_ = __json_is_static__.(bool); !_ok_ { err = errors.New("__x__ error"); return } }; _v.IsStatic = __x__ }}
    { var _ok_ bool; var __json_key_type__ interface{}; if __json_key_type__, _ok_ = _buf["key_type"]; !_ok_ || __json_key_type__ == nil { err = errors.New("key_type error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_key_type__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.KeyType = __x__ }}
    { var _ok_ bool; var __json_type_class_name__ interface{}; if __json_type_class_name__, _ok_ = _buf["type_class_name"]; !_ok_ || __json_type_class_name__ == nil { err = errors.New("type_class_name error"); return } else { var __x__ string;  {  if __x__, _ok_ = __json_type_class_name__.(string); !_ok_ { err = errors.New("__x__ error"); return } }; _v.TypeClassName = __x__ }}
    return
}

