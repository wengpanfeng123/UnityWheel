
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type AiFlowNode struct {
    Id int32
    NodeName string
    Decorators []interface{}
    Services []interface{}
}

const TypeId_AiFlowNode = -1109240970

func (*AiFlowNode) GetTypeId() int32 {
    return -1109240970
}

func NewAiFlowNode(_buf map[string]interface{}) (interface{}, error) {
    var id string
    var _ok_ bool
    if id, _ok_ = _buf["$type"].(string) ; !_ok_ {
        return nil, errors.New("type id missing")
    }
    switch id {
        case "Sequence": _v, err := NewAiSequence(_buf); if err != nil { return nil, errors.New("aisequence") } else { return _v, nil }
        case "Selector": _v, err := NewAiSelector(_buf); if err != nil { return nil, errors.New("aiselector") } else { return _v, nil }
        case "SimpleParallel": _v, err := NewAiSimpleParallel(_buf); if err != nil { return nil, errors.New("aisimpleparallel") } else { return _v, nil }
        case "UeWait": _v, err := NewAiUeWait(_buf); if err != nil { return nil, errors.New("aiuewait") } else { return _v, nil }
        case "UeWaitBlackboardTime": _v, err := NewAiUeWaitBlackboardTime(_buf); if err != nil { return nil, errors.New("aiuewaitblackboardtime") } else { return _v, nil }
        case "MoveToTarget": _v, err := NewAiMoveToTarget(_buf); if err != nil { return nil, errors.New("aimovetotarget") } else { return _v, nil }
        case "ChooseSkill": _v, err := NewAiChooseSkill(_buf); if err != nil { return nil, errors.New("aichooseskill") } else { return _v, nil }
        case "MoveToRandomLocation": _v, err := NewAiMoveToRandomLocation(_buf); if err != nil { return nil, errors.New("aimovetorandomlocation") } else { return _v, nil }
        case "MoveToLocation": _v, err := NewAiMoveToLocation(_buf); if err != nil { return nil, errors.New("aimovetolocation") } else { return _v, nil }
        case "DebugPrint": _v, err := NewAiDebugPrint(_buf); if err != nil { return nil, errors.New("aidebugprint") } else { return _v, nil }
        default: return nil, errors.New("unknown type id")
    }
}


