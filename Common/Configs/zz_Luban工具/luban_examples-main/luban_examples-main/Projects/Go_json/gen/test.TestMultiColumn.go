
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type TestTestMultiColumn struct {
    Id int32
    A *TestFoo
    B *TestFoo
    C *TestFoo
}

const TypeId_TestTestMultiColumn = -294473599

func (*TestTestMultiColumn) GetTypeId() int32 {
    return -294473599
}

func NewTestTestMultiColumn(_buf map[string]interface{}) (_v *TestTestMultiColumn, err error) {
    _v = &TestTestMultiColumn{}
    { var _ok_ bool; var __json_id__ interface{}; if __json_id__, _ok_ = _buf["id"]; !_ok_ || __json_id__ == nil { err = errors.New("id error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_id__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Id = __x__ }}
    { var _ok_ bool; var __json_a__ interface{}; if __json_a__, _ok_ = _buf["a"]; !_ok_ || __json_a__ == nil { err = errors.New("a error"); return } else { var __x__ *TestFoo;  { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = __json_a__.(map[string]interface{}); !_ok_ { err = errors.New("__x__ error"); return }; if __x__, err = NewTestFoo(_x_); err != nil { return } }; _v.A = __x__ }}
    { var _ok_ bool; var __json_b__ interface{}; if __json_b__, _ok_ = _buf["b"]; !_ok_ || __json_b__ == nil { err = errors.New("b error"); return } else { var __x__ *TestFoo;  { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = __json_b__.(map[string]interface{}); !_ok_ { err = errors.New("__x__ error"); return }; if __x__, err = NewTestFoo(_x_); err != nil { return } }; _v.B = __x__ }}
    { var _ok_ bool; var __json_c__ interface{}; if __json_c__, _ok_ = _buf["c"]; !_ok_ || __json_c__ == nil { err = errors.New("c error"); return } else { var __x__ *TestFoo;  { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = __json_c__.(map[string]interface{}); !_ok_ { err = errors.New("__x__ error"); return }; if __x__, err = NewTestFoo(_x_); err != nil { return } }; _v.C = __x__ }}
    return
}

