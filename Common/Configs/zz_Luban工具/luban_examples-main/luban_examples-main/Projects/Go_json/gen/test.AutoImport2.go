
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type TestAutoImport2 struct {
    Id int32
    X1 bool
    X5 int64
    X6 float32
    X8 int32
    X10 string
    X13 int32
    X132 int32
    X14 interface{}
    X15 interface{}
    V2 *vec2
    T1 int64
    K1 []int32
    K2 []int32
    K8 map[int32]int32
    K9 []*TestDemoE2
    K10 []*vec3
    K11 []*vec4
    V11 *vec3
}

const TypeId_TestAutoImport2 = 417472770

func (*TestAutoImport2) GetTypeId() int32 {
    return 417472770
}

func NewTestAutoImport2(_buf map[string]interface{}) (_v *TestAutoImport2, err error) {
    _v = &TestAutoImport2{}
    { var _ok_ bool; var __json_id__ interface{}; if __json_id__, _ok_ = _buf["id"]; !_ok_ || __json_id__ == nil { err = errors.New("id error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_id__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Id = __x__ }}
    { var _ok_ bool; var __json_x1__ interface{}; if __json_x1__, _ok_ = _buf["x1"]; !_ok_ || __json_x1__ == nil { err = errors.New("x1 error"); return } else { var __x__ bool;  { var _ok_ bool; if __x__, _ok_ = __json_x1__.(bool); !_ok_ { err = errors.New("__x__ error"); return } }; _v.X1 = __x__ }}
    { var _ok_ bool; var __json_x5__ interface{}; if __json_x5__, _ok_ = _buf["x5"]; !_ok_ || __json_x5__ == nil { err = errors.New("x5 error"); return } else { var __x__ int64;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_x5__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int64(_x_) }; _v.X5 = __x__ }}
    { var _ok_ bool; var __json_x6__ interface{}; if __json_x6__, _ok_ = _buf["x6"]; !_ok_ || __json_x6__ == nil { err = errors.New("x6 error"); return } else { var __x__ float32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_x6__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = float32(_x_) }; _v.X6 = __x__ }}
    { var _ok_ bool; var __json_x8__ interface{}; if __json_x8__, _ok_ = _buf["x8"]; !_ok_ || __json_x8__ == nil { err = errors.New("x8 error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_x8__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.X8 = __x__ }}
    { var _ok_ bool; var __json_x10__ interface{}; if __json_x10__, _ok_ = _buf["x10"]; !_ok_ || __json_x10__ == nil { err = errors.New("x10 error"); return } else { var __x__ string;  {  if __x__, _ok_ = __json_x10__.(string); !_ok_ { err = errors.New("__x__ error"); return } }; _v.X10 = __x__ }}
    { var _ok_ bool; var __json_x13__ interface{}; if __json_x13__, _ok_ = _buf["x13"]; !_ok_ || __json_x13__ == nil { err = errors.New("x13 error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_x13__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.X13 = __x__ }}
    { var _ok_ bool; var __json_x13_2__ interface{}; if __json_x13_2__, _ok_ = _buf["x13_2"]; !_ok_ || __json_x13_2__ == nil { err = errors.New("x13_2 error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_x13_2__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.X132 = __x__ }}
    { var _ok_ bool; var __json_x14__ interface{}; if __json_x14__, _ok_ = _buf["x14"]; !_ok_ || __json_x14__ == nil { err = errors.New("x14 error"); return } else { var __x__ interface{};  { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = __json_x14__.(map[string]interface{}); !_ok_ { err = errors.New("__x__ error"); return }; if __x__, err = NewTestDemoDynamic(_x_); err != nil { return } }; _v.X14 = __x__ }}
    { var _ok_ bool; var __json_x15__ interface{}; if __json_x15__, _ok_ = _buf["x15"]; !_ok_ || __json_x15__ == nil { err = errors.New("x15 error"); return } else { var __x__ interface{};  { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = __json_x15__.(map[string]interface{}); !_ok_ { err = errors.New("__x__ error"); return }; if __x__, err = NewTestShape(_x_); err != nil { return } }; _v.X15 = __x__ }}
    { var _ok_ bool; var __json_v2__ interface{}; if __json_v2__, _ok_ = _buf["v2"]; !_ok_ || __json_v2__ == nil { err = errors.New("v2 error"); return } else { var __x__ *vec2;  { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = __json_v2__.(map[string]interface{}); !_ok_ { err = errors.New("__x__ error"); return }; if __x__, err = Newvec2(_x_); err != nil { return } }; _v.V2 = __x__ }}
    { var _ok_ bool; var __json_t1__ interface{}; if __json_t1__, _ok_ = _buf["t1"]; !_ok_ || __json_t1__ == nil { err = errors.New("t1 error"); return } else { var __x__ int64;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_t1__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int64(_x_) }; _v.T1 = __x__ }}
    { var _ok_ bool; var __json_k1__ interface{}; if __json_k1__, _ok_ = _buf["k1"]; !_ok_ || __json_k1__ == nil { err = errors.New("k1 error"); return } else { var __x__ []int32;  {
                    var _arr0_ []interface{}
                    var _ok0_ bool
                    if _arr0_, _ok0_ = (__json_k1__).([]interface{}); !_ok0_ { err = errors.New("__x__ error"); return }
    
                    __x__ = make([]int32, 0, len(_arr0_))
                    
                    for _, _e0_ := range _arr0_ {
                        var _list_v0_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e0_.(float64); !_ok_ { err = errors.New("_list_v0_ error"); return }; _list_v0_ = int32(_x_) }
                        __x__ = append(__x__, _list_v0_)
                    }
                }
    ; _v.K1 = __x__ }}
    { var _ok_ bool; var __json_k2__ interface{}; if __json_k2__, _ok_ = _buf["k2"]; !_ok_ || __json_k2__ == nil { err = errors.New("k2 error"); return } else { var __x__ []int32;  {
                    var _arr0_ []interface{}
                    var _ok0_ bool
                    if _arr0_, _ok0_ = (__json_k2__).([]interface{}); !_ok0_ { err = errors.New("__x__ error"); return }
    
                    __x__ = make([]int32, 0, len(_arr0_))
                    
                    for _, _e0_ := range _arr0_ {
                        var _list_v0_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e0_.(float64); !_ok_ { err = errors.New("_list_v0_ error"); return }; _list_v0_ = int32(_x_) }
                        __x__ = append(__x__, _list_v0_)
                    }
                }
    ; _v.K2 = __x__ }}
    { var _ok_ bool; var __json_k8__ interface{}; if __json_k8__, _ok_ = _buf["k8"]; !_ok_ || __json_k8__ == nil { err = errors.New("k8 error"); return } else { var __x__ map[int32]int32;  {
                    var _arr0_ []interface{}
                    var _ok0_ bool
                    if _arr0_, _ok_ = (__json_k8__).([]interface{}); !_ok_ { err = errors.New("__x__ error"); return }
    
                    __x__ = make(map[int32]int32)
                    
                    for _, _e0_ := range _arr0_ {
                        var _kv0_ []interface{}
                        if _kv0_, _ok0_ = _e0_.([]interface{}); !_ok0_ || len(_kv0_) != 2 { err = errors.New("__x__ error"); return }
                        var _key0_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _kv0_[0].(float64); !_ok_ { err = errors.New("_key0_ error"); return }; _key0_ = int32(_x_) }
                        var _value0_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _kv0_[1].(float64); !_ok_ { err = errors.New("_value0_ error"); return }; _value0_ = int32(_x_) }
                        __x__[_key0_] = _value0_
                    }
                    }; _v.K8 = __x__ }}
    { var _ok_ bool; var __json_k9__ interface{}; if __json_k9__, _ok_ = _buf["k9"]; !_ok_ || __json_k9__ == nil { err = errors.New("k9 error"); return } else { var __x__ []*TestDemoE2;  {
                    var _arr0_ []interface{}
                    var _ok0_ bool
                    if _arr0_, _ok0_ = (__json_k9__).([]interface{}); !_ok0_ { err = errors.New("__x__ error"); return }
    
                    __x__ = make([]*TestDemoE2, 0, len(_arr0_))
                    
                    for _, _e0_ := range _arr0_ {
                        var _list_v0_ *TestDemoE2
                        { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e0_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v0_ error"); return }; if _list_v0_, err = NewTestDemoE2(_x_); err != nil { return } }
                        __x__ = append(__x__, _list_v0_)
                    }
                }
    ; _v.K9 = __x__ }}
    { var _ok_ bool; var __json_k10__ interface{}; if __json_k10__, _ok_ = _buf["k10"]; !_ok_ || __json_k10__ == nil { err = errors.New("k10 error"); return } else { var __x__ []*vec3;  {
                    var _arr0_ []interface{}
                    var _ok0_ bool
                    if _arr0_, _ok0_ = (__json_k10__).([]interface{}); !_ok0_ { err = errors.New("__x__ error"); return }
    
                    __x__ = make([]*vec3, 0, len(_arr0_))
                    
                    for _, _e0_ := range _arr0_ {
                        var _list_v0_ *vec3
                        { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e0_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v0_ error"); return }; if _list_v0_, err = Newvec3(_x_); err != nil { return } }
                        __x__ = append(__x__, _list_v0_)
                    }
                }
    ; _v.K10 = __x__ }}
    { var _ok_ bool; var __json_k11__ interface{}; if __json_k11__, _ok_ = _buf["k11"]; !_ok_ || __json_k11__ == nil { err = errors.New("k11 error"); return } else { var __x__ []*vec4;  {
                    var _arr0_ []interface{}
                    var _ok0_ bool
                    if _arr0_, _ok0_ = (__json_k11__).([]interface{}); !_ok0_ { err = errors.New("__x__ error"); return }
    
                    __x__ = make([]*vec4, 0, len(_arr0_))
                    
                    for _, _e0_ := range _arr0_ {
                        var _list_v0_ *vec4
                        { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e0_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v0_ error"); return }; if _list_v0_, err = Newvec4(_x_); err != nil { return } }
                        __x__ = append(__x__, _list_v0_)
                    }
                }
    ; _v.K11 = __x__ }}
    { var _ok_ bool; var __json_v11__ interface{}; if __json_v11__, _ok_ = _buf["v11"]; !_ok_ || __json_v11__ == nil { _v.V11 = nil } else { var __x__ *vec3;  { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = __json_v11__.(map[string]interface{}); !_ok_ { err = errors.New("__x__ error"); return }; if __x__, err = Newvec3(_x_); err != nil { return } }; _v.V11 = __x__ }}
    return
}

