
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;

namespace cfg.ai
{

public sealed class UeBlackboard :  ai.Decorator 
{
    public UeBlackboard()
    {
            notifyObserver = ai.ENotifyObserverMode.ON_VALUE_CHANGE;
            blackboardKey = "";
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  id = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["node_name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  nodeName = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["flow_abort_mode"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { flowAbortMode = (ai.EFlowAbortMode)System.Enum.Parse(typeof(ai.EFlowAbortMode), _fieldJson); } else if(_fieldJson.IsNumber) { flowAbortMode = (ai.EFlowAbortMode)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
        { 
            var _fieldJson = _json["notify_observer"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { notifyObserver = (ai.ENotifyObserverMode)System.Enum.Parse(typeof(ai.ENotifyObserverMode), _fieldJson); } else if(_fieldJson.IsNumber) { notifyObserver = (ai.ENotifyObserverMode)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
        { 
            var _fieldJson = _json["blackboard_key"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  blackboardKey = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["key_query"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  keyQuery = ai.KeyQueryOperator.LoadJsonKeyQueryOperator(_fieldJson);
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber(id);
        }
        {

            if (nodeName == null) { throw new System.ArgumentNullException(); }
            _json["node_name"] = new JSONString(nodeName);
        }
        {
            _json["flow_abort_mode"] = new JSONNumber((int)flowAbortMode);
        }
        {
            _json["notify_observer"] = new JSONNumber((int)notifyObserver);
        }
        {

            if (blackboardKey == null) { throw new System.ArgumentNullException(); }
            _json["blackboard_key"] = new JSONString(blackboardKey);
        }
        {

            if (keyQuery == null) { throw new System.ArgumentNullException(); }
            { var __bjson0 = new JSONObject(); _json["key_query"] = __bjson0; ai.KeyQueryOperator.SaveJsonKeyQueryOperator(keyQuery, __bjson0); }
        }
    }

    public static UeBlackboard LoadJsonUeBlackboard(SimpleJSON.JSONNode _json)
    {
        UeBlackboard obj = new ai.UeBlackboard();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonUeBlackboard(UeBlackboard _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public ai.ENotifyObserverMode notifyObserver;

    public string blackboardKey;

    public ai.KeyQueryOperator keyQuery;

}

}

