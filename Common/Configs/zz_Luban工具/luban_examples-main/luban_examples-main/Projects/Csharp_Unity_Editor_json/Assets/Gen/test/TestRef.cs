
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;

namespace cfg.test
{

public sealed class TestRef :  Luban.EditorBeanBase 
{
    public TestRef()
    {
            a1 = System.Array.Empty<int>();
            a2 = System.Array.Empty<int>();
            b1 = new System.Collections.Generic.List<int>();
            b2 = new System.Collections.Generic.List<int>();
            c1 = new System.Collections.Generic.HashSet<int>();
            c2 = new System.Collections.Generic.HashSet<int>();
            d1 = new System.Collections.Generic.Dictionary<int,int>();
            d2 = new System.Collections.Generic.Dictionary<int,int>();
            e3 = "";
            f3 = "";
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  id = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["x1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  x1 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["x1_2"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  x12 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["x2"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  x2 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["x3"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  x3 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["x4"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  x4 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["a1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int _n0 = _fieldJson.Count; a1 = new int[_n0]; int _index0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { int __v0;  if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0;  a1[_index0++] = __v0; }  
            }
        }
        
        { 
            var _fieldJson = _json["a2"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int _n0 = _fieldJson.Count; a2 = new int[_n0]; int _index0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { int __v0;  if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0;  a2[_index0++] = __v0; }  
            }
        }
        
        { 
            var _fieldJson = _json["b1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } b1 = new System.Collections.Generic.List<int>(); foreach(JSONNode __e0 in _fieldJson.Children) { int __v0;  if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0;  b1.Add(__v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["b2"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } b2 = new System.Collections.Generic.List<int>(); foreach(JSONNode __e0 in _fieldJson.Children) { int __v0;  if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0;  b2.Add(__v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["c1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } c1 = new System.Collections.Generic.HashSet<int>(); foreach(JSONNode __e0 in _fieldJson.Children) { int __v0;  if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0;  c1.Add(__v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["c2"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } c2 = new System.Collections.Generic.HashSet<int>(); foreach(JSONNode __e0 in _fieldJson.Children) { int __v0;  if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0;  c2.Add(__v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["d1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } d1 = new System.Collections.Generic.Dictionary<int, int>(); foreach(JSONNode __e0 in _fieldJson.Children) { int __k0;  if(!__e0[0].IsNumber) { throw new SerializationException(); }  __k0 = __e0[0]; int __v0;  if(!__e0[1].IsNumber) { throw new SerializationException(); }  __v0 = __e0[1];  d1.Add(__k0, __v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["d2"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } d2 = new System.Collections.Generic.Dictionary<int, int>(); foreach(JSONNode __e0 in _fieldJson.Children) { int __k0;  if(!__e0[0].IsNumber) { throw new SerializationException(); }  __k0 = __e0[0]; int __v0;  if(!__e0[1].IsNumber) { throw new SerializationException(); }  __v0 = __e0[1];  d2.Add(__k0, __v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["e1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  e1 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["e2"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  e2 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["e3"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  e3 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["f1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  f1 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["f2"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  f2 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["f3"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  f3 = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["s1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  s1 = test.RefDynamicBase.LoadJsonRefDynamicBase(_fieldJson);
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber(id);
        }
        {
            _json["x1"] = new JSONNumber(x1);
        }
        {
            _json["x1_2"] = new JSONNumber(x12);
        }
        {
            _json["x2"] = new JSONNumber(x2);
        }
        {
            _json["x3"] = new JSONNumber(x3);
        }
        {
            _json["x4"] = new JSONNumber(x4);
        }
        {

            if (a1 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["a1"] = __cjson0; foreach(var _e0 in a1) { JSONNode __v0; __v0 = new JSONNumber(_e0); __cjson0.Add(__v0); } }
        }
        {

            if (a2 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["a2"] = __cjson0; foreach(var _e0 in a2) { JSONNode __v0; __v0 = new JSONNumber(_e0); __cjson0.Add(__v0); } }
        }
        {

            if (b1 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["b1"] = __cjson0; foreach(var _e0 in b1) { JSONNode __v0; __v0 = new JSONNumber(_e0); __cjson0.Add(__v0); } }
        }
        {

            if (b2 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["b2"] = __cjson0; foreach(var _e0 in b2) { JSONNode __v0; __v0 = new JSONNumber(_e0); __cjson0.Add(__v0); } }
        }
        {

            if (c1 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["c1"] = __cjson0; foreach(var _e0 in c1) { JSONNode __v0; __v0 = new JSONNumber(_e0); __cjson0.Add(__v0); } }
        }
        {

            if (c2 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["c2"] = __cjson0; foreach(var _e0 in c2) { JSONNode __v0; __v0 = new JSONNumber(_e0); __cjson0.Add(__v0); } }
        }
        {

            if (d1 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["d1"] = __cjson0; foreach(var _e0 in d1) { var __entry0 = new JSONArray(); __cjson0.Add(__entry0); JSONNode __k0; __k0 = new JSONNumber(_e0.Key); __entry0.Add(__k0); JSONNode __v0; __v0 = new JSONNumber(_e0.Value); __entry0.Add(__v0); }  }
        }
        {

            if (d2 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["d2"] = __cjson0; foreach(var _e0 in d2) { var __entry0 = new JSONArray(); __cjson0.Add(__entry0); JSONNode __k0; __k0 = new JSONNumber(_e0.Key); __entry0.Add(__k0); JSONNode __v0; __v0 = new JSONNumber(_e0.Value); __entry0.Add(__v0); }  }
        }
        {
            _json["e1"] = new JSONNumber(e1);
        }
        {
            _json["e2"] = new JSONNumber(e2);
        }
        {

            if (e3 == null) { throw new System.ArgumentNullException(); }
            _json["e3"] = new JSONString(e3);
        }
        {
            _json["f1"] = new JSONNumber(f1);
        }
        {
            _json["f2"] = new JSONNumber(f2);
        }
        {

            if (f3 == null) { throw new System.ArgumentNullException(); }
            _json["f3"] = new JSONString(f3);
        }
        {

            if (s1 == null) { throw new System.ArgumentNullException(); }
            { var __bjson0 = new JSONObject(); _json["s1"] = __bjson0; test.RefDynamicBase.SaveJsonRefDynamicBase(s1, __bjson0); }
        }
    }

    public static TestRef LoadJsonTestRef(SimpleJSON.JSONNode _json)
    {
        TestRef obj = new test.TestRef();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonTestRef(TestRef _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int id;

    public int x1;

    public int x12;

    public int x2;

    public int x3;

    public int x4;

    public int[] a1;

    public int[] a2;

    public System.Collections.Generic.List<int> b1;

    public System.Collections.Generic.List<int> b2;

    public System.Collections.Generic.HashSet<int> c1;

    public System.Collections.Generic.HashSet<int> c2;

    public System.Collections.Generic.Dictionary<int, int> d1;

    public System.Collections.Generic.Dictionary<int, int> d2;

    public int e1;

    public long e2;

    public string e3;

    public int f1;

    public long f2;

    public string f3;

    public test.RefDynamicBase s1;

}

}

