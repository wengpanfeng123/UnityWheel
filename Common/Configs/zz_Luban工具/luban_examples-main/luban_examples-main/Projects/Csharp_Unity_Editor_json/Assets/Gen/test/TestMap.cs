
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;

namespace cfg.test
{

public sealed class TestMap :  Luban.EditorBeanBase 
{
    public TestMap()
    {
            x1 = new System.Collections.Generic.Dictionary<int,int>();
            x2 = new System.Collections.Generic.Dictionary<long,int>();
            x3 = new System.Collections.Generic.Dictionary<string,int>();
            x4 = new System.Collections.Generic.Dictionary<test.DemoEnum,int>();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  id = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["x1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } x1 = new System.Collections.Generic.Dictionary<int, int>(); foreach(JSONNode __e0 in _fieldJson.Children) { int __k0;  if(!__e0[0].IsNumber) { throw new SerializationException(); }  __k0 = __e0[0]; int __v0;  if(!__e0[1].IsNumber) { throw new SerializationException(); }  __v0 = __e0[1];  x1.Add(__k0, __v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["x2"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } x2 = new System.Collections.Generic.Dictionary<long, int>(); foreach(JSONNode __e0 in _fieldJson.Children) { long __k0;  if(!__e0[0].IsNumber) { throw new SerializationException(); }  __k0 = __e0[0]; int __v0;  if(!__e0[1].IsNumber) { throw new SerializationException(); }  __v0 = __e0[1];  x2.Add(__k0, __v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["x3"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } x3 = new System.Collections.Generic.Dictionary<string, int>(); foreach(JSONNode __e0 in _fieldJson.Children) { string __k0;  if(!__e0[0].IsString) { throw new SerializationException(); }  __k0 = __e0[0]; int __v0;  if(!__e0[1].IsNumber) { throw new SerializationException(); }  __v0 = __e0[1];  x3.Add(__k0, __v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["x4"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } x4 = new System.Collections.Generic.Dictionary<test.DemoEnum, int>(); foreach(JSONNode __e0 in _fieldJson.Children) { test.DemoEnum __k0;  if(__e0[0].IsString) { __k0 = (test.DemoEnum)System.Enum.Parse(typeof(test.DemoEnum), __e0[0]); } else if(__e0[0].IsNumber) { __k0 = (test.DemoEnum)(int)__e0[0]; } else { throw new SerializationException(); }   int __v0;  if(!__e0[1].IsNumber) { throw new SerializationException(); }  __v0 = __e0[1];  x4.Add(__k0, __v0); }  
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber(id);
        }
        {

            if (x1 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["x1"] = __cjson0; foreach(var _e0 in x1) { var __entry0 = new JSONArray(); __cjson0.Add(__entry0); JSONNode __k0; __k0 = new JSONNumber(_e0.Key); __entry0.Add(__k0); JSONNode __v0; __v0 = new JSONNumber(_e0.Value); __entry0.Add(__v0); }  }
        }
        {

            if (x2 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["x2"] = __cjson0; foreach(var _e0 in x2) { var __entry0 = new JSONArray(); __cjson0.Add(__entry0); JSONNode __k0; __k0 = new JSONNumber(_e0.Key); __entry0.Add(__k0); JSONNode __v0; __v0 = new JSONNumber(_e0.Value); __entry0.Add(__v0); }  }
        }
        {

            if (x3 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["x3"] = __cjson0; foreach(var _e0 in x3) { var __entry0 = new JSONArray(); __cjson0.Add(__entry0); JSONNode __k0; __k0 = new JSONString(_e0.Key); __entry0.Add(__k0); JSONNode __v0; __v0 = new JSONNumber(_e0.Value); __entry0.Add(__v0); }  }
        }
        {

            if (x4 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["x4"] = __cjson0; foreach(var _e0 in x4) { var __entry0 = new JSONArray(); __cjson0.Add(__entry0); JSONNode __k0; __k0 = new JSONNumber((int)_e0.Key); __entry0.Add(__k0); JSONNode __v0; __v0 = new JSONNumber(_e0.Value); __entry0.Add(__v0); }  }
        }
    }

    public static TestMap LoadJsonTestMap(SimpleJSON.JSONNode _json)
    {
        TestMap obj = new test.TestMap();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonTestMap(TestMap _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int id;

    public System.Collections.Generic.Dictionary<int, int> x1;

    public System.Collections.Generic.Dictionary<long, int> x2;

    public System.Collections.Generic.Dictionary<string, int> x3;

    public System.Collections.Generic.Dictionary<test.DemoEnum, int> x4;

}

}

