
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;

namespace cfg.test
{

public sealed class MultiRowTitle :  Luban.EditorBeanBase 
{
    public MultiRowTitle()
    {
            name = "";
            x1 = new test.H1();
            x2 = new System.Collections.Generic.List<test.H2>();
            x3 = System.Array.Empty<test.H2>();
            x4 = System.Array.Empty<test.H2>();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  id = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  name = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["x1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  x1 = test.H1.LoadJsonH1(_fieldJson);
            }
        }
        
        { 
            var _fieldJson = _json["x2_0"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  x20 = test.H2.LoadJsonH2(_fieldJson);
            }
        }
        
        { 
            var _fieldJson = _json["x2"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } x2 = new System.Collections.Generic.List<test.H2>(); foreach(JSONNode __e0 in _fieldJson.Children) { test.H2 __v0;  if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = test.H2.LoadJsonH2(__e0);  x2.Add(__v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["x3"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int _n0 = _fieldJson.Count; x3 = new test.H2[_n0]; int _index0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { test.H2 __v0;  if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = test.H2.LoadJsonH2(__e0);  x3[_index0++] = __v0; }  
            }
        }
        
        { 
            var _fieldJson = _json["x4"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int _n0 = _fieldJson.Count; x4 = new test.H2[_n0]; int _index0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { test.H2 __v0;  if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = test.H2.LoadJsonH2(__e0);  x4[_index0++] = __v0; }  
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber(id);
        }
        {

            if (name == null) { throw new System.ArgumentNullException(); }
            _json["name"] = new JSONString(name);
        }
        {

            if (x1 == null) { throw new System.ArgumentNullException(); }
            { var __bjson0 = new JSONObject(); _json["x1"] = __bjson0; test.H1.SaveJsonH1(x1, __bjson0); }
        }

        if (x20 != null)
        {
            { var __bjson0 = new JSONObject(); _json["x2_0"] = __bjson0; test.H2.SaveJsonH2(x20, __bjson0); }
        }
        {

            if (x2 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["x2"] = __cjson0; foreach(var _e0 in x2) { JSONNode __v0; { var __bjson1 = new JSONObject();  __v0 = __bjson1; test.H2.SaveJsonH2(_e0, __bjson1); } __cjson0.Add(__v0); } }
        }
        {

            if (x3 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["x3"] = __cjson0; foreach(var _e0 in x3) { JSONNode __v0; { var __bjson1 = new JSONObject();  __v0 = __bjson1; test.H2.SaveJsonH2(_e0, __bjson1); } __cjson0.Add(__v0); } }
        }
        {

            if (x4 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["x4"] = __cjson0; foreach(var _e0 in x4) { JSONNode __v0; { var __bjson1 = new JSONObject();  __v0 = __bjson1; test.H2.SaveJsonH2(_e0, __bjson1); } __cjson0.Add(__v0); } }
        }
    }

    public static MultiRowTitle LoadJsonMultiRowTitle(SimpleJSON.JSONNode _json)
    {
        MultiRowTitle obj = new test.MultiRowTitle();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonMultiRowTitle(MultiRowTitle _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int id;

    public string name;

    public test.H1 x1;

    public test.H2 x20;

    public System.Collections.Generic.List<test.H2> x2;

    public test.H2[] x3;

    public test.H2[] x4;

}

}

