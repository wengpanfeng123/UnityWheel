
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;

namespace cfg.item
{

/// <summary>
/// 道具
/// </summary>
public sealed class Item :  Luban.EditorBeanBase 
{
    public Item()
    {
            name = "";
            majorType = item.EMajorType.CURRENCY;
            minorType = item.EMinorType.DIAMOND;
            quality = item.EItemQuality.WHITE;
            icon = "";
            iconBackgroud = "";
            iconMask = "";
            desc = "";
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  id = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  name = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["major_type"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { majorType = (item.EMajorType)System.Enum.Parse(typeof(item.EMajorType), _fieldJson); } else if(_fieldJson.IsNumber) { majorType = (item.EMajorType)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
        { 
            var _fieldJson = _json["minor_type"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { minorType = (item.EMinorType)System.Enum.Parse(typeof(item.EMinorType), _fieldJson); } else if(_fieldJson.IsNumber) { minorType = (item.EMinorType)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
        { 
            var _fieldJson = _json["max_pile_num"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  maxPileNum = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["quality"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { quality = (item.EItemQuality)System.Enum.Parse(typeof(item.EItemQuality), _fieldJson); } else if(_fieldJson.IsNumber) { quality = (item.EItemQuality)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
        { 
            var _fieldJson = _json["icon"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  icon = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["icon_backgroud"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  iconBackgroud = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["icon_mask"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  iconMask = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["desc"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  desc = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["show_order"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  showOrder = _fieldJson;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber(id);
        }
        {

            if (name == null) { throw new System.ArgumentNullException(); }
            _json["name"] = new JSONString(name);
        }
        {
            _json["major_type"] = new JSONNumber((int)majorType);
        }
        {
            _json["minor_type"] = new JSONNumber((int)minorType);
        }
        {
            _json["max_pile_num"] = new JSONNumber(maxPileNum);
        }
        {
            _json["quality"] = new JSONNumber((int)quality);
        }
        {

            if (icon == null) { throw new System.ArgumentNullException(); }
            _json["icon"] = new JSONString(icon);
        }
        {

            if (iconBackgroud == null) { throw new System.ArgumentNullException(); }
            _json["icon_backgroud"] = new JSONString(iconBackgroud);
        }
        {

            if (iconMask == null) { throw new System.ArgumentNullException(); }
            _json["icon_mask"] = new JSONString(iconMask);
        }
        {

            if (desc == null) { throw new System.ArgumentNullException(); }
            _json["desc"] = new JSONString(desc);
        }
        {
            _json["show_order"] = new JSONNumber(showOrder);
        }
    }

    public static Item LoadJsonItem(SimpleJSON.JSONNode _json)
    {
        Item obj = new item.Item();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonItem(Item _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// 道具id
    /// </summary>
    public int id;

    public string name;

    public item.EMajorType majorType;

    public item.EMinorType minorType;

    public int maxPileNum;

    public item.EItemQuality quality;

    public string icon;

    public string iconBackgroud;

    public string iconMask;

    public string desc;

    public int showOrder;

}

}

