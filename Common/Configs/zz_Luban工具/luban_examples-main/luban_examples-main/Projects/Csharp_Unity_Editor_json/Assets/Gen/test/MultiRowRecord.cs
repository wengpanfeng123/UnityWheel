
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;

namespace cfg.test
{

public sealed class MultiRowRecord :  Luban.EditorBeanBase 
{
    public MultiRowRecord()
    {
            name = "";
            oneRows = new System.Collections.Generic.List<test.MultiRowType1>();
            multiRows1 = new System.Collections.Generic.List<test.MultiRowType1>();
            multiRows2 = System.Array.Empty<test.MultiRowType1>();
            multiRows4 = new System.Collections.Generic.Dictionary<int,test.MultiRowType2>();
            multiRows5 = new System.Collections.Generic.List<test.MultiRowType3>();
            multiRows6 = new System.Collections.Generic.Dictionary<int,test.MultiRowType2>();
            multiRows7 = new System.Collections.Generic.Dictionary<int,int>();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  id = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  name = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["one_rows"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } oneRows = new System.Collections.Generic.List<test.MultiRowType1>(); foreach(JSONNode __e0 in _fieldJson.Children) { test.MultiRowType1 __v0;  if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = test.MultiRowType1.LoadJsonMultiRowType1(__e0);  oneRows.Add(__v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["multi_rows1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } multiRows1 = new System.Collections.Generic.List<test.MultiRowType1>(); foreach(JSONNode __e0 in _fieldJson.Children) { test.MultiRowType1 __v0;  if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = test.MultiRowType1.LoadJsonMultiRowType1(__e0);  multiRows1.Add(__v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["multi_rows2"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int _n0 = _fieldJson.Count; multiRows2 = new test.MultiRowType1[_n0]; int _index0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { test.MultiRowType1 __v0;  if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = test.MultiRowType1.LoadJsonMultiRowType1(__e0);  multiRows2[_index0++] = __v0; }  
            }
        }
        
        { 
            var _fieldJson = _json["multi_rows4"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } multiRows4 = new System.Collections.Generic.Dictionary<int, test.MultiRowType2>(); foreach(JSONNode __e0 in _fieldJson.Children) { int __k0;  if(!__e0[0].IsNumber) { throw new SerializationException(); }  __k0 = __e0[0]; test.MultiRowType2 __v0;  if(!__e0[1].IsObject) { throw new SerializationException(); }  __v0 = test.MultiRowType2.LoadJsonMultiRowType2(__e0[1]);  multiRows4.Add(__k0, __v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["multi_rows5"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } multiRows5 = new System.Collections.Generic.List<test.MultiRowType3>(); foreach(JSONNode __e0 in _fieldJson.Children) { test.MultiRowType3 __v0;  if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = test.MultiRowType3.LoadJsonMultiRowType3(__e0);  multiRows5.Add(__v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["multi_rows6"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } multiRows6 = new System.Collections.Generic.Dictionary<int, test.MultiRowType2>(); foreach(JSONNode __e0 in _fieldJson.Children) { int __k0;  if(!__e0[0].IsNumber) { throw new SerializationException(); }  __k0 = __e0[0]; test.MultiRowType2 __v0;  if(!__e0[1].IsObject) { throw new SerializationException(); }  __v0 = test.MultiRowType2.LoadJsonMultiRowType2(__e0[1]);  multiRows6.Add(__k0, __v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["multi_rows7"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } multiRows7 = new System.Collections.Generic.Dictionary<int, int>(); foreach(JSONNode __e0 in _fieldJson.Children) { int __k0;  if(!__e0[0].IsNumber) { throw new SerializationException(); }  __k0 = __e0[0]; int __v0;  if(!__e0[1].IsNumber) { throw new SerializationException(); }  __v0 = __e0[1];  multiRows7.Add(__k0, __v0); }  
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber(id);
        }
        {

            if (name == null) { throw new System.ArgumentNullException(); }
            _json["name"] = new JSONString(name);
        }
        {

            if (oneRows == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["one_rows"] = __cjson0; foreach(var _e0 in oneRows) { JSONNode __v0; { var __bjson1 = new JSONObject();  __v0 = __bjson1; test.MultiRowType1.SaveJsonMultiRowType1(_e0, __bjson1); } __cjson0.Add(__v0); } }
        }
        {

            if (multiRows1 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["multi_rows1"] = __cjson0; foreach(var _e0 in multiRows1) { JSONNode __v0; { var __bjson1 = new JSONObject();  __v0 = __bjson1; test.MultiRowType1.SaveJsonMultiRowType1(_e0, __bjson1); } __cjson0.Add(__v0); } }
        }
        {

            if (multiRows2 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["multi_rows2"] = __cjson0; foreach(var _e0 in multiRows2) { JSONNode __v0; { var __bjson1 = new JSONObject();  __v0 = __bjson1; test.MultiRowType1.SaveJsonMultiRowType1(_e0, __bjson1); } __cjson0.Add(__v0); } }
        }
        {

            if (multiRows4 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["multi_rows4"] = __cjson0; foreach(var _e0 in multiRows4) { var __entry0 = new JSONArray(); __cjson0.Add(__entry0); JSONNode __k0; __k0 = new JSONNumber(_e0.Key); __entry0.Add(__k0); JSONNode __v0; { var __bjson1 = new JSONObject();  __v0 = __bjson1; test.MultiRowType2.SaveJsonMultiRowType2(_e0.Value, __bjson1); } __entry0.Add(__v0); }  }
        }
        {

            if (multiRows5 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["multi_rows5"] = __cjson0; foreach(var _e0 in multiRows5) { JSONNode __v0; { var __bjson1 = new JSONObject();  __v0 = __bjson1; test.MultiRowType3.SaveJsonMultiRowType3(_e0, __bjson1); } __cjson0.Add(__v0); } }
        }
        {

            if (multiRows6 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["multi_rows6"] = __cjson0; foreach(var _e0 in multiRows6) { var __entry0 = new JSONArray(); __cjson0.Add(__entry0); JSONNode __k0; __k0 = new JSONNumber(_e0.Key); __entry0.Add(__k0); JSONNode __v0; { var __bjson1 = new JSONObject();  __v0 = __bjson1; test.MultiRowType2.SaveJsonMultiRowType2(_e0.Value, __bjson1); } __entry0.Add(__v0); }  }
        }
        {

            if (multiRows7 == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); _json["multi_rows7"] = __cjson0; foreach(var _e0 in multiRows7) { var __entry0 = new JSONArray(); __cjson0.Add(__entry0); JSONNode __k0; __k0 = new JSONNumber(_e0.Key); __entry0.Add(__k0); JSONNode __v0; __v0 = new JSONNumber(_e0.Value); __entry0.Add(__v0); }  }
        }
    }

    public static MultiRowRecord LoadJsonMultiRowRecord(SimpleJSON.JSONNode _json)
    {
        MultiRowRecord obj = new test.MultiRowRecord();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonMultiRowRecord(MultiRowRecord _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int id;

    public string name;

    public System.Collections.Generic.List<test.MultiRowType1> oneRows;

    public System.Collections.Generic.List<test.MultiRowType1> multiRows1;

    public test.MultiRowType1[] multiRows2;

    public System.Collections.Generic.Dictionary<int, test.MultiRowType2> multiRows4;

    public System.Collections.Generic.List<test.MultiRowType3> multiRows5;

    public System.Collections.Generic.Dictionary<int, test.MultiRowType2> multiRows6;

    public System.Collections.Generic.Dictionary<int, int> multiRows7;

}

}

