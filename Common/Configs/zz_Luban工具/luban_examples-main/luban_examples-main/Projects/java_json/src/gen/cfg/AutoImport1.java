
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;

import luban.*;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;


public final class AutoImport1 extends AbstractBean {
    public AutoImport1(JsonObject _buf) { 
        id = _buf.get("id").getAsInt();
        x1 = _buf.get("x1").getAsBoolean();
        x5 = _buf.get("x5").getAsLong();
        x6 = _buf.get("x6").getAsFloat();
        x8 = _buf.get("x8").getAsInt();
        x10 = _buf.get("x10").getAsString();
        x13 = _buf.get("x13").getAsInt();
        x132 = _buf.get("x13_2").getAsInt();
        x14 = cfg.test.DemoDynamic.deserialize(_buf.get("x14").getAsJsonObject());
        x15 = cfg.test.Shape.deserialize(_buf.get("x15").getAsJsonObject());
        v2 = cfg.vec2.deserialize(_buf.get("v2").getAsJsonObject());
        t1 = _buf.get("t1").getAsLong();
        { com.google.gson.JsonArray _json0_ = _buf.get("k1").getAsJsonArray(); int __n0 = _json0_.size(); k1 = new int[__n0]; int __index0=0; for(JsonElement __e0 : _json0_) { int __v0;  __v0 = __e0.getAsInt();  k1[__index0++] = __v0; }   }
        { com.google.gson.JsonArray _json0_ = _buf.get("k2").getAsJsonArray(); int __n0 = _json0_.size(); k2 = new int[__n0]; int __index0=0; for(JsonElement __e0 : _json0_) { int __v0;  __v0 = __e0.getAsInt();  k2[__index0++] = __v0; }   }
        { com.google.gson.JsonArray _json0_ = _buf.get("k8").getAsJsonArray(); k8 = new java.util.HashMap<Integer, Integer>(_json0_.size()); for(JsonElement _e0 : _json0_) { int _k0;  _k0 = _e0.getAsJsonArray().get(0).getAsInt(); int _v0;  _v0 = _e0.getAsJsonArray().get(1).getAsInt();  k8.put(_k0, _v0); }   }
        { com.google.gson.JsonArray _json0_ = _buf.get("k9").getAsJsonArray(); k9 = new java.util.ArrayList<cfg.test.DemoE2>(_json0_.size()); for(JsonElement _e0 : _json0_) { cfg.test.DemoE2 _v0;  _v0 = cfg.test.DemoE2.deserialize(_e0.getAsJsonObject());  k9.add(_v0); }   }
        { com.google.gson.JsonArray _json0_ = _buf.get("k10").getAsJsonArray(); k10 = new java.util.ArrayList<cfg.vec3>(_json0_.size()); for(JsonElement _e0 : _json0_) { cfg.vec3 _v0;  _v0 = cfg.vec3.deserialize(_e0.getAsJsonObject());  k10.add(_v0); }   }
        { com.google.gson.JsonArray _json0_ = _buf.get("k11").getAsJsonArray(); k11 = new java.util.ArrayList<cfg.vec4>(_json0_.size()); for(JsonElement _e0 : _json0_) { cfg.vec4 _v0;  _v0 = cfg.vec4.deserialize(_e0.getAsJsonObject());  k11.add(_v0); }   }
        { if (_buf.has("v11") && !_buf.get("v11").isJsonNull()) { v11 = cfg.vec3.deserialize(_buf.get("v11").getAsJsonObject()); } else { v11 = null; } }
    }

    public static AutoImport1 deserialize(JsonObject _buf) {
            return new cfg.AutoImport1(_buf);
    }

    /**
     * 这是id
     */
    public final int id;
    /**
     * 字段x1
     */
    public final boolean x1;
    public final long x5;
    public final float x6;
    public final int x8;
    public final String x10;
    public final int x13;
    public final int x132;
    public final cfg.test.DemoDynamic x14;
    public final cfg.test.Shape x15;
    public final cfg.vec2 v2;
    public final long t1;
    public final int[] k1;
    public final int[] k2;
    public final java.util.HashMap<Integer, Integer> k8;
    public final java.util.ArrayList<cfg.test.DemoE2> k9;
    public final java.util.ArrayList<cfg.vec3> k10;
    public final java.util.ArrayList<cfg.vec4> k11;
    public final cfg.vec3 v11;

    public static final int __ID__ = -2092142499;
    
    @Override
    public int getTypeId() { return __ID__; }

    @Override
    public String toString() {
        return "{ "
        + "id:" + id + ","
        + "x1:" + x1 + ","
        + "x5:" + x5 + ","
        + "x6:" + x6 + ","
        + "x8:" + x8 + ","
        + "x10:" + x10 + ","
        + "x13:" + x13 + ","
        + "x132:" + x132 + ","
        + "x14:" + x14 + ","
        + "x15:" + x15 + ","
        + "v2:" + v2 + ","
        + "t1:" + t1 + ","
        + "k1:" + k1 + ","
        + "k2:" + k2 + ","
        + "k8:" + k8 + ","
        + "k9:" + k9 + ","
        + "k10:" + k10 + ","
        + "k11:" + k11 + ","
        + "v11:" + v11 + ","
        + "}";
    }
}

