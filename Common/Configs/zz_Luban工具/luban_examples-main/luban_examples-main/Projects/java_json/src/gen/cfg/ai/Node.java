
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg.ai;

import luban.*;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;


public abstract class Node extends AbstractBean {
    public Node(JsonObject _buf) { 
        id = _buf.get("id").getAsInt();
        nodeName = _buf.get("node_name").getAsString();
    }

    public static Node deserialize(JsonObject _buf) {
        switch (_buf.get("$type").getAsString()) {
            case "UeSetDefaultFocus": return new cfg.ai.UeSetDefaultFocus(_buf);
            case "ExecuteTimeStatistic": return new cfg.ai.ExecuteTimeStatistic(_buf);
            case "ChooseTarget": return new cfg.ai.ChooseTarget(_buf);
            case "KeepFaceTarget": return new cfg.ai.KeepFaceTarget(_buf);
            case "GetOwnerPlayer": return new cfg.ai.GetOwnerPlayer(_buf);
            case "UpdateDailyBehaviorProps": return new cfg.ai.UpdateDailyBehaviorProps(_buf);
            case "UeLoop": return new cfg.ai.UeLoop(_buf);
            case "UeCooldown": return new cfg.ai.UeCooldown(_buf);
            case "UeTimeLimit": return new cfg.ai.UeTimeLimit(_buf);
            case "UeBlackboard": return new cfg.ai.UeBlackboard(_buf);
            case "UeForceSuccess": return new cfg.ai.UeForceSuccess(_buf);
            case "IsAtLocation": return new cfg.ai.IsAtLocation(_buf);
            case "DistanceLessThan": return new cfg.ai.DistanceLessThan(_buf);
            case "Sequence": return new cfg.ai.Sequence(_buf);
            case "Selector": return new cfg.ai.Selector(_buf);
            case "SimpleParallel": return new cfg.ai.SimpleParallel(_buf);
            case "UeWait": return new cfg.ai.UeWait(_buf);
            case "UeWaitBlackboardTime": return new cfg.ai.UeWaitBlackboardTime(_buf);
            case "MoveToTarget": return new cfg.ai.MoveToTarget(_buf);
            case "ChooseSkill": return new cfg.ai.ChooseSkill(_buf);
            case "MoveToRandomLocation": return new cfg.ai.MoveToRandomLocation(_buf);
            case "MoveToLocation": return new cfg.ai.MoveToLocation(_buf);
            case "DebugPrint": return new cfg.ai.DebugPrint(_buf);
            default: throw new SerializationException();
        }
    }

    public final int id;
    public final String nodeName;


    @Override
    public String toString() {
        return "{ "
        + "id:" + id + ","
        + "nodeName:" + nodeName + ","
        + "}";
    }
}

