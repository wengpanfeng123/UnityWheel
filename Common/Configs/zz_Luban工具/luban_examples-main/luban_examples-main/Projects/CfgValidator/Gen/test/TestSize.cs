
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using System.Text.Json;


namespace cfg.test
{
public sealed partial class TestSize : Luban.BeanBase
{
    public TestSize(JsonElement _buf) 
    {
        Id = _buf.GetProperty("id").GetInt32();
        { var __json0 = _buf.GetProperty("x1"); int _n0 = __json0.GetArrayLength(); X1 = new int[_n0]; int __index0=0; foreach(JsonElement __e0 in __json0.EnumerateArray()) { int __v0;  __v0 = __e0.GetInt32();  X1[__index0++] = __v0; }   }
        { var __json0 = _buf.GetProperty("x2"); X2 = new System.Collections.Generic.List<int>(__json0.GetArrayLength()); foreach(JsonElement __e0 in __json0.EnumerateArray()) { int __v0;  __v0 = __e0.GetInt32();  X2.Add(__v0); }   }
        { var __json0 = _buf.GetProperty("x3"); X3 = new System.Collections.Generic.HashSet<int>(__json0.GetArrayLength()); foreach(JsonElement __e0 in __json0.EnumerateArray()) { int __v0;  __v0 = __e0.GetInt32();  X3.Add(__v0); }   }
        { var __json0 = _buf.GetProperty("x4"); X4 = new System.Collections.Generic.Dictionary<int, int>(__json0.GetArrayLength()); foreach(JsonElement __e0 in __json0.EnumerateArray()) { int _k0;  _k0 = __e0[0].GetInt32(); int _v0;  _v0 = __e0[1].GetInt32();  X4.Add(_k0, _v0); }   }
    }

    public static TestSize DeserializeTestSize(JsonElement _buf)
    {
        return new test.TestSize(_buf);
    }

    public readonly int Id;
    public readonly int[] X1;
    public readonly System.Collections.Generic.List<int> X2;
    public readonly System.Collections.Generic.HashSet<int> X3;
    public readonly System.Collections.Generic.Dictionary<int, int> X4;
   
    public const int __ID__ = 340006319;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "x1:" + Luban.StringUtil.CollectionToString(X1) + ","
        + "x2:" + Luban.StringUtil.CollectionToString(X2) + ","
        + "x3:" + Luban.StringUtil.CollectionToString(X3) + ","
        + "x4:" + Luban.StringUtil.CollectionToString(X4) + ","
        + "}";
    }
}

}

