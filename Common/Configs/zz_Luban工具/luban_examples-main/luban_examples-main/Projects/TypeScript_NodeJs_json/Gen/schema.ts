
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


export namespace ai { 
export enum EExecutor {
    CLIENT = 0,
    SERVER = 1,
}

} 
export namespace ai { 
export enum EFinishMode {
    IMMEDIATE = 0,
    DELAYED = 1,
}

} 
export namespace ai { 
export enum EFlowAbortMode {
    NONE = 0,
    LOWER_PRIORITY = 1,
    SELF = 2,
    BOTH = 3,
}

} 
export namespace ai { 
export enum EKeyType {
    BOOL = 1,
    INT = 2,
    FLOAT = 3,
    STRING = 4,
    VECTOR = 5,
    ROTATOR = 6,
    NAME = 7,
    CLASS1 = 8,
    ENUM1 = 9,
    OBJECT = 10,
}

} 
export namespace ai { 
export enum ENotifyObserverMode {
    ON_VALUE_CHANGE = 0,
    ON_RESULT_CHANGE = 1,
}

} 
export namespace ai { 
export enum EOperator {
    IS_EQUAL_TO = 0,
    IS_NOT_EQUAL_TO = 1,
    IS_LESS_THAN = 2,
    IS_LESS_THAN_OR_EQUAL_TO = 3,
    IS_GREAT_THAN = 4,
    IS_GREAT_THAN_OR_EQUAL_TO = 5,
    CONTAINS = 6,
    NOT_CONTAINS = 7,
}

} 
 
export enum AudioType {
    UNKNOWN = 0,
    ACC = 1,
    AIFF = 2,
}

 
export namespace common { 
export enum EBoolOperator {
    AND = 0,
    OR = 1,
}

} 
export namespace item { 
export enum EClothersStarQualityType {
    /**
     * 一星
     */
    ONE = 1,
    /**
     * 二星
     */
    TWO = 2,
    /**
     * 三星
     */
    THREE = 3,
    /**
     * 四星
     */
    FOUR = 4,
    /**
     * 五星
     */
    FIVE = 5,
    /**
     * 六星
     */
    SIX = 6,
    /**
     * 七星
     */
    SEVEN = 7,
    /**
     * 八星
     */
    EIGHT = 8,
    /**
     * 九星
     */
    NINE = 9,
    /**
     * 十星
     */
    TEN = 10,
}

} 
export namespace item { 
export enum EClothersTag {
    /**
     * 防晒
     */
    FANG_SHAI = 1,
    /**
     * 舞者
     */
    WU_ZHE = 2,
}

} 
export namespace item { 
export enum EClothesHidePartType {
    /**
     * 胸部
     */
    CHEST = 0,
    /**
     * 手
     */
    HEAD = 1,
    /**
     * 脊柱上
     */
    SPINE_UPPER = 2,
    /**
     * 脊柱下
     */
    SPINE_LOWER = 3,
    /**
     * 臀部
     */
    HIP = 4,
    /**
     * 腿上
     */
    LEG_UPPER = 5,
    /**
     * 腿中
     */
    LEG_MIDDLE = 6,
    /**
     * 腿下
     */
    LEG_LOWER = 7,
}

} 
export namespace item { 
export enum EClothesPropertyType {
    /**
     * 简约
     */
    JIAN_YUE = 1,
    /**
     * 华丽
     */
    HUA_LI = 2,
    /**
     * 可爱
     */
    KE_AI = 3,
    /**
     * 成熟
     */
    CHENG_SHU = 4,
    /**
     * 活泼
     */
    HUO_PO = 5,
    /**
     * 优雅
     */
    YOU_YA = 6,
    /**
     * 清纯
     */
    QING_CHUN = 7,
    /**
     * 性感
     */
    XING_GAN = 8,
    /**
     * 清凉
     */
    QING_LIANG = 9,
    /**
     * 保暖
     */
    BAO_NUAN = 10,
}

} 
export namespace item { 
export enum ECurrencyType {
    /**
     * 钻石
     */
    DIAMOND = 1,
    /**
     * 金币
     */
    GOLD = 2,
    /**
     * 银币
     */
    SILVER = 3,
    /**
     * 经验
     */
    EXP = 4,
    /**
     * 能量点
     */
    POWER_POINT = 5,
}

} 
export namespace item { 
/**
 * 道具品质
 */
export enum EItemQuality {
    /**
     * 白
     */
    WHITE = 0,
    /**
     * 绿
     */
    GREEN = 1,
    /**
     * 蓝
     */
    BLUE = 2,
    /**
     * 紫
     */
    PURPLE = 3,
    /**
     * 金
     */
    GOLDEN = 4,
}

} 
export namespace item { 
export enum EMajorType {
    /**
     * 货币
     */
    CURRENCY = 1,
    /**
     * 服装
     */
    CLOTH = 2,
    /**
     * 任务
     */
    QUEST = 3,
    /**
     * 消耗品
     */
    CONSUMABLES = 4,
    /**
     * 宝箱
     */
    TREASURE_BOX = 5,
    /**
     * 成就和称谓
     */
    ACHIEVEMENT_AND_TITLE = 6,
    /**
     * 头像框
     */
    HEAD_FRAME = 7,
    /**
     * 语音
     */
    VOICE = 8,
    /**
     * 动作
     */
    ACTION = 9,
    /**
     * 扩容道具
     */
    EXPANSION = 10,
    /**
     * 制作材料
     */
    MATERIAL = 11,
}

} 
export namespace item { 
export enum EMinorType {
    /**
     * 钻石
     */
    DIAMOND = 101,
    /**
     * 金币
     */
    GOLD = 102,
    /**
     * 银币
     */
    SILVER = 103,
    /**
     * 经验
     */
    EXP = 104,
    /**
     * 能量点
     */
    POWER_POINT = 105,
    /**
     * 发型
     */
    HAIR_STYLE = 210,
    /**
     * 外套
     */
    COAT = 220,
    /**
     * 上衣
     */
    UPPER_JACKET = 230,
    /**
     * 裤子
     */
    TROUSERS = 241,
    /**
     * 裙子
     */
    SKIRT = 242,
    /**
     * 袜子
     */
    SOCKS = 250,
    /**
     * 鞋子
     */
    SHOES = 260,
    /**
     * 发饰
     */
    HAIR_ACCESSORY = 271,
    /**
     * 帽子
     */
    HAT = 272,
    /**
     * 耳饰
     */
    EARRING = 273,
    /**
     * 颈饰
     */
    NECKLACE = 274,
    /**
     * 腕饰
     */
    BRACELET = 275,
    /**
     * 发箍
     */
    HAIR_CLASP = 276,
    /**
     * 手套
     */
    GLOVE = 277,
    /**
     * 手持物
     */
    HANDHELD_OBJECT = 278,
    /**
     * 特殊
     */
    SPECIAL = 279,
    /**
     * 底妆
     */
    BASE_COSMETIC = 281,
    /**
     * 眉妆
     */
    EYEBROW_COSMETIC = 282,
    /**
     * 睫毛
     */
    EYELASH = 283,
    /**
     * 美瞳
     */
    COSMETIC_CONTACT_LENSES = 284,
    /**
     * 唇妆
     */
    LIP_COSMETIC = 285,
    /**
     * 肤色
     */
    SKIN_COLOR = 286,
    /**
     * 连衣裙
     */
    ONE_PIECE_DRESS = 290,
    /**
     * 换装场景
     */
    SWITCH_CLOTHES_SCENE = 291,
    /**
     * 任务道具
     */
    QUEST = 301,
    /**
     * 投掷物
     */
    CAST = 401,
    /**
     * 刀剑
     */
    SWORD = 421,
    /**
     * 弓箭
     */
    BOW_ARROW = 422,
    /**
     * 法杖
     */
    WANDS = 423,
    /**
     * 特殊工具
     */
    SPECIAL_TOOL = 424,
    /**
     * 食物
     */
    FOOD = 403,
    /**
     * 宝箱
     */
    TREASURE_BOX = 501,
    /**
     * 钥匙
     */
    KEY = 502,
    /**
     * 多选一宝箱
     */
    MULTI_CHOOSE_TREASURE_BOX = 503,
    /**
     * 成就相关
     */
    ACHIEVEMENT = 601,
    /**
     * 称谓相关
     */
    TITLE = 602,
    /**
     * 头像框
     */
    AVATAR_FRAME = 701,
    /**
     * 语音
     */
    VOICE = 801,
    /**
     * 特殊待机动作
     */
    IDLE_POSE = 901,
    /**
     * 拍照动作
     */
    PHOTO_POSE = 902,
    /**
     * 背包
     */
    BAG = 1001,
    /**
     * 好友数量
     */
    FRIEND_CAPACITY = 1002,
    /**
     * 制作材料
     */
    CONSTRUCTION_MATERIAL = 1101,
    /**
     * 设计图纸
     */
    DESIGN_DRAWING = 1102,
}

} 
export namespace item { 
export enum EUseType {
    /**
     * 手动
     */
    MANUAL = 0,
    /**
     * 自动
     */
    AUTO = 1,
}

} 
export namespace test { 
export enum AccessFlag {
    WRITE = 1,
    READ = 2,
    TRUNCATE = 4,
    NEW = 8,
    READ_WRITE = WRITE|READ,
}

} 
export namespace test { 
export enum AudioType2 {
    UNKNOWN = 0,
    ACC = 1,
    AIFF = 2,
}

} 
export namespace test { 
export enum DemoEnum {
    NONE = 0,
    /**
     * aa
     */
    A = 1,
    /**
     * bb
     */
    B = 2,
    /**
     * cc
     */
    C = 4,
    /**
     * dd
     */
    D = 5,
    Any = 6,
}

} 
export namespace test { 
export enum DemoFlag {
    A = 1,
    B = 2,
    C = 4,
    D = 8,
}

} 
export namespace test { 
export enum ETestEmptyEnum {
}

} 
export namespace test { 
export enum ETestEmptyEnum2 {
    SMALL_THAN_256 = 255,
    X_256 = 256,
    X_257 = 257,
}

} 
export namespace test { 
export enum ETestQuality {
    /**
     * 最高品质
     */
    A = 1,
    /**
     * 黑色的
     */
    B = 2,
    /**
     * 蓝色的
     */
    C = 3,
    /**
     * 最差品质
     */
    D = 4,
}

} 
export namespace test { 
export enum ETestUeType {
    /**
     * 白
     */
    WHITE = 0,
    BLACK = 1,
}

} 




export namespace ai {
export class BehaviorTree {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.blackboard_id === undefined) { throw new Error() }
        this.blackboardId = _json_.blackboard_id
        if (_json_.root === undefined) { throw new Error() }
        this.root = ai.ComposeNode.constructorFrom(_json_.root)
    }

    readonly id: number
    readonly name: string
    readonly desc: string
    readonly blackboardId: string
    blackboardId_ref: ai.Blackboard | undefined
    readonly root: ai.ComposeNode

    resolve(tables:Tables) {
        
        
        
        this.blackboardId_ref = tables.TbBlackboard.get(this.blackboardId)
        this.root?.resolve(tables);
    }
}

}


export namespace ai {
export class Blackboard {

    constructor(_json_: any) {
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.parent_name === undefined) { throw new Error() }
        this.parentName = _json_.parent_name
        if (_json_.keys === undefined) { throw new Error() }
        { this.keys = []; for(let _ele0 of _json_.keys) { let _e0; _e0 = new ai.BlackboardKey(_ele0); this.keys.push(_e0);}}
    }

    readonly name: string
    readonly desc: string
    readonly parentName: string
    parentName_ref: ai.Blackboard | undefined
    readonly keys: ai.BlackboardKey[]

    resolve(tables:Tables) {
        
        
        this.parentName_ref = tables.TbBlackboard.get(this.parentName)
        for (let _e of this.keys) { _e?.resolve(tables); }
    }
}

}


export namespace ai {
export class BlackboardKey {

    constructor(_json_: any) {
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.is_static === undefined) { throw new Error() }
        this.isStatic = _json_.is_static
        if (_json_.key_type === undefined) { throw new Error() }
        this.keyType = _json_.key_type
        if (_json_.type_class_name === undefined) { throw new Error() }
        this.typeClassName = _json_.type_class_name
    }

    readonly name: string
    readonly desc: string
    readonly isStatic: boolean
    readonly keyType: ai.EKeyType
    readonly typeClassName: string

    resolve(tables:Tables) {
        
        
        
        
        
    }
}

}


export namespace ai {
export abstract class KeyData {
    static constructorFrom(_json_: any): KeyData{
        switch (_json_["$type"]) {
            case 'FloatKeyData': return new ai.FloatKeyData(_json_)
            case 'IntKeyData': return new ai.IntKeyData(_json_)
            case 'StringKeyData': return new ai.StringKeyData(_json_)
            case 'BlackboardKeyData': return new ai.BlackboardKeyData(_json_)
            default: throw new Error()
        }
    }

    constructor(_json_: any) {
    }


    resolve(tables:Tables) {
    }
}

}


export namespace ai {
export class BlackboardKeyData extends ai.KeyData {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.value === undefined) { throw new Error() }
        this.value = _json_.value
    }

    readonly value: string

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace ai {
export class FloatKeyData extends ai.KeyData {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.value === undefined) { throw new Error() }
        this.value = _json_.value
    }

    readonly value: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace ai {
export class IntKeyData extends ai.KeyData {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.value === undefined) { throw new Error() }
        this.value = _json_.value
    }

    readonly value: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace ai {
export class StringKeyData extends ai.KeyData {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.value === undefined) { throw new Error() }
        this.value = _json_.value
    }

    readonly value: string

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace ai {
export abstract class KeyQueryOperator {
    static constructorFrom(_json_: any): KeyQueryOperator{
        switch (_json_["$type"]) {
            case 'IsSet2': return new ai.IsSet2(_json_)
            case 'IsNotSet': return new ai.IsNotSet(_json_)
            case 'BinaryOperator': return new ai.BinaryOperator(_json_)
            default: throw new Error()
        }
    }

    constructor(_json_: any) {
    }


    resolve(tables:Tables) {
    }
}

}


export namespace ai {
export class BinaryOperator extends ai.KeyQueryOperator {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.oper === undefined) { throw new Error() }
        this.oper = _json_.oper
        if (_json_.data === undefined) { throw new Error() }
        this.data = ai.KeyData.constructorFrom(_json_.data)
    }

    readonly oper: ai.EOperator
    readonly data: ai.KeyData

    resolve(tables:Tables) {
        super.resolve(tables)
        
        this.data?.resolve(tables);
    }
}

}


export namespace ai {
export class IsNotSet extends ai.KeyQueryOperator {

    constructor(_json_: any) {
        super(_json_)
    }


    resolve(tables:Tables) {
        super.resolve(tables)
    }
}

}


export namespace ai {
export class IsSet2 extends ai.KeyQueryOperator {

    constructor(_json_: any) {
        super(_json_)
    }


    resolve(tables:Tables) {
        super.resolve(tables)
    }
}

}


export namespace ai {
export abstract class Node {
    static constructorFrom(_json_: any): Node{
        switch (_json_["$type"]) {
            case 'UeSetDefaultFocus': return new ai.UeSetDefaultFocus(_json_)
            case 'ExecuteTimeStatistic': return new ai.ExecuteTimeStatistic(_json_)
            case 'ChooseTarget': return new ai.ChooseTarget(_json_)
            case 'KeepFaceTarget': return new ai.KeepFaceTarget(_json_)
            case 'GetOwnerPlayer': return new ai.GetOwnerPlayer(_json_)
            case 'UpdateDailyBehaviorProps': return new ai.UpdateDailyBehaviorProps(_json_)
            case 'UeLoop': return new ai.UeLoop(_json_)
            case 'UeCooldown': return new ai.UeCooldown(_json_)
            case 'UeTimeLimit': return new ai.UeTimeLimit(_json_)
            case 'UeBlackboard': return new ai.UeBlackboard(_json_)
            case 'UeForceSuccess': return new ai.UeForceSuccess(_json_)
            case 'IsAtLocation': return new ai.IsAtLocation(_json_)
            case 'DistanceLessThan': return new ai.DistanceLessThan(_json_)
            case 'Sequence': return new ai.Sequence(_json_)
            case 'Selector': return new ai.Selector(_json_)
            case 'SimpleParallel': return new ai.SimpleParallel(_json_)
            case 'UeWait': return new ai.UeWait(_json_)
            case 'UeWaitBlackboardTime': return new ai.UeWaitBlackboardTime(_json_)
            case 'MoveToTarget': return new ai.MoveToTarget(_json_)
            case 'ChooseSkill': return new ai.ChooseSkill(_json_)
            case 'MoveToRandomLocation': return new ai.MoveToRandomLocation(_json_)
            case 'MoveToLocation': return new ai.MoveToLocation(_json_)
            case 'DebugPrint': return new ai.DebugPrint(_json_)
            default: throw new Error()
        }
    }

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.node_name === undefined) { throw new Error() }
        this.nodeName = _json_.node_name
    }

    readonly id: number
    readonly nodeName: string

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace ai {
export abstract class Decorator extends ai.Node {
    static constructorFrom(_json_: any): Decorator{
        switch (_json_["$type"]) {
            case 'UeLoop': return new ai.UeLoop(_json_)
            case 'UeCooldown': return new ai.UeCooldown(_json_)
            case 'UeTimeLimit': return new ai.UeTimeLimit(_json_)
            case 'UeBlackboard': return new ai.UeBlackboard(_json_)
            case 'UeForceSuccess': return new ai.UeForceSuccess(_json_)
            case 'IsAtLocation': return new ai.IsAtLocation(_json_)
            case 'DistanceLessThan': return new ai.DistanceLessThan(_json_)
            default: throw new Error()
        }
    }

    constructor(_json_: any) {
        super(_json_)
        if (_json_.flow_abort_mode === undefined) { throw new Error() }
        this.flowAbortMode = _json_.flow_abort_mode
    }

    readonly flowAbortMode: ai.EFlowAbortMode

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace ai {
export class DistanceLessThan extends ai.Decorator {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.actor1_key === undefined) { throw new Error() }
        this.actor1Key = _json_.actor1_key
        if (_json_.actor2_key === undefined) { throw new Error() }
        this.actor2Key = _json_.actor2_key
        if (_json_.distance === undefined) { throw new Error() }
        this.distance = _json_.distance
        if (_json_.reverse_result === undefined) { throw new Error() }
        this.reverseResult = _json_.reverse_result
    }

    readonly actor1Key: string
    readonly actor2Key: string
    readonly distance: number
    readonly reverseResult: boolean

    resolve(tables:Tables) {
        super.resolve(tables)
        
        
        
        
    }
}

}


export namespace ai {
export class IsAtLocation extends ai.Decorator {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.acceptable_radius === undefined) { throw new Error() }
        this.acceptableRadius = _json_.acceptable_radius
        if (_json_.keyboard_key === undefined) { throw new Error() }
        this.keyboardKey = _json_.keyboard_key
        if (_json_.inverse_condition === undefined) { throw new Error() }
        this.inverseCondition = _json_.inverse_condition
    }

    readonly acceptableRadius: number
    readonly keyboardKey: string
    readonly inverseCondition: boolean

    resolve(tables:Tables) {
        super.resolve(tables)
        
        
        
    }
}

}


export namespace ai {
export class UeBlackboard extends ai.Decorator {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.notify_observer === undefined) { throw new Error() }
        this.notifyObserver = _json_.notify_observer
        if (_json_.blackboard_key === undefined) { throw new Error() }
        this.blackboardKey = _json_.blackboard_key
        if (_json_.key_query === undefined) { throw new Error() }
        this.keyQuery = ai.KeyQueryOperator.constructorFrom(_json_.key_query)
    }

    readonly notifyObserver: ai.ENotifyObserverMode
    readonly blackboardKey: string
    readonly keyQuery: ai.KeyQueryOperator

    resolve(tables:Tables) {
        super.resolve(tables)
        
        
        this.keyQuery?.resolve(tables);
    }
}

}


export namespace ai {
export class UeCooldown extends ai.Decorator {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.cooldown_time === undefined) { throw new Error() }
        this.cooldownTime = _json_.cooldown_time
    }

    readonly cooldownTime: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace ai {
export class UeForceSuccess extends ai.Decorator {

    constructor(_json_: any) {
        super(_json_)
    }


    resolve(tables:Tables) {
        super.resolve(tables)
    }
}

}


export namespace ai {
export class UeLoop extends ai.Decorator {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.num_loops === undefined) { throw new Error() }
        this.numLoops = _json_.num_loops
        if (_json_.infinite_loop === undefined) { throw new Error() }
        this.infiniteLoop = _json_.infinite_loop
        if (_json_.infinite_loop_timeout_time === undefined) { throw new Error() }
        this.infiniteLoopTimeoutTime = _json_.infinite_loop_timeout_time
    }

    readonly numLoops: number
    readonly infiniteLoop: boolean
    readonly infiniteLoopTimeoutTime: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
        
        
    }
}

}


export namespace ai {
export class UeTimeLimit extends ai.Decorator {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.limit_time === undefined) { throw new Error() }
        this.limitTime = _json_.limit_time
    }

    readonly limitTime: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace ai {
export abstract class FlowNode extends ai.Node {
    static constructorFrom(_json_: any): FlowNode{
        switch (_json_["$type"]) {
            case 'Sequence': return new ai.Sequence(_json_)
            case 'Selector': return new ai.Selector(_json_)
            case 'SimpleParallel': return new ai.SimpleParallel(_json_)
            case 'UeWait': return new ai.UeWait(_json_)
            case 'UeWaitBlackboardTime': return new ai.UeWaitBlackboardTime(_json_)
            case 'MoveToTarget': return new ai.MoveToTarget(_json_)
            case 'ChooseSkill': return new ai.ChooseSkill(_json_)
            case 'MoveToRandomLocation': return new ai.MoveToRandomLocation(_json_)
            case 'MoveToLocation': return new ai.MoveToLocation(_json_)
            case 'DebugPrint': return new ai.DebugPrint(_json_)
            default: throw new Error()
        }
    }

    constructor(_json_: any) {
        super(_json_)
        if (_json_.decorators === undefined) { throw new Error() }
        { this.decorators = []; for(let _ele0 of _json_.decorators) { let _e0; _e0 = ai.Decorator.constructorFrom(_ele0); this.decorators.push(_e0);}}
        if (_json_.services === undefined) { throw new Error() }
        { this.services = []; for(let _ele0 of _json_.services) { let _e0; _e0 = ai.Service.constructorFrom(_ele0); this.services.push(_e0);}}
    }

    readonly decorators: ai.Decorator[]
    readonly services: ai.Service[]

    resolve(tables:Tables) {
        super.resolve(tables)
        for (let _e of this.decorators) { _e?.resolve(tables); }
        for (let _e of this.services) { _e?.resolve(tables); }
    }
}

}


export namespace ai {
export abstract class ComposeNode extends ai.FlowNode {
    static constructorFrom(_json_: any): ComposeNode{
        switch (_json_["$type"]) {
            case 'Sequence': return new ai.Sequence(_json_)
            case 'Selector': return new ai.Selector(_json_)
            case 'SimpleParallel': return new ai.SimpleParallel(_json_)
            default: throw new Error()
        }
    }

    constructor(_json_: any) {
        super(_json_)
    }


    resolve(tables:Tables) {
        super.resolve(tables)
    }
}

}


export namespace ai {
export class Selector extends ai.ComposeNode {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.children === undefined) { throw new Error() }
        { this.children = []; for(let _ele0 of _json_.children) { let _e0; _e0 = ai.FlowNode.constructorFrom(_ele0); this.children.push(_e0);}}
    }

    readonly children: ai.FlowNode[]

    resolve(tables:Tables) {
        super.resolve(tables)
        for (let _e of this.children) { _e?.resolve(tables); }
    }
}

}


export namespace ai {
export class Sequence extends ai.ComposeNode {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.children === undefined) { throw new Error() }
        { this.children = []; for(let _ele0 of _json_.children) { let _e0; _e0 = ai.FlowNode.constructorFrom(_ele0); this.children.push(_e0);}}
    }

    readonly children: ai.FlowNode[]

    resolve(tables:Tables) {
        super.resolve(tables)
        for (let _e of this.children) { _e?.resolve(tables); }
    }
}

}


export namespace ai {
export class SimpleParallel extends ai.ComposeNode {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.finish_mode === undefined) { throw new Error() }
        this.finishMode = _json_.finish_mode
        if (_json_.main_task === undefined) { throw new Error() }
        this.mainTask = ai.Task.constructorFrom(_json_.main_task)
        if (_json_.background_node === undefined) { throw new Error() }
        this.backgroundNode = ai.FlowNode.constructorFrom(_json_.background_node)
    }

    readonly finishMode: ai.EFinishMode
    readonly mainTask: ai.Task
    readonly backgroundNode: ai.FlowNode

    resolve(tables:Tables) {
        super.resolve(tables)
        
        this.mainTask?.resolve(tables);
        this.backgroundNode?.resolve(tables);
    }
}

}


export namespace ai {
export abstract class Task extends ai.FlowNode {
    static constructorFrom(_json_: any): Task{
        switch (_json_["$type"]) {
            case 'UeWait': return new ai.UeWait(_json_)
            case 'UeWaitBlackboardTime': return new ai.UeWaitBlackboardTime(_json_)
            case 'MoveToTarget': return new ai.MoveToTarget(_json_)
            case 'ChooseSkill': return new ai.ChooseSkill(_json_)
            case 'MoveToRandomLocation': return new ai.MoveToRandomLocation(_json_)
            case 'MoveToLocation': return new ai.MoveToLocation(_json_)
            case 'DebugPrint': return new ai.DebugPrint(_json_)
            default: throw new Error()
        }
    }

    constructor(_json_: any) {
        super(_json_)
        if (_json_.ignore_restart_self === undefined) { throw new Error() }
        this.ignoreRestartSelf = _json_.ignore_restart_self
    }

    readonly ignoreRestartSelf: boolean

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace ai {
export class ChooseSkill extends ai.Task {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.target_actor_key === undefined) { throw new Error() }
        this.targetActorKey = _json_.target_actor_key
        if (_json_.result_skill_id_key === undefined) { throw new Error() }
        this.resultSkillIdKey = _json_.result_skill_id_key
    }

    readonly targetActorKey: string
    readonly resultSkillIdKey: string

    resolve(tables:Tables) {
        super.resolve(tables)
        
        
    }
}

}


export namespace ai {
export class DebugPrint extends ai.Task {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.text === undefined) { throw new Error() }
        this.text = _json_.text
    }

    readonly text: string

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace ai {
export class MoveToLocation extends ai.Task {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.acceptable_radius === undefined) { throw new Error() }
        this.acceptableRadius = _json_.acceptable_radius
    }

    readonly acceptableRadius: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace ai {
export class MoveToRandomLocation extends ai.Task {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.origin_position_key === undefined) { throw new Error() }
        this.originPositionKey = _json_.origin_position_key
        if (_json_.radius === undefined) { throw new Error() }
        this.radius = _json_.radius
    }

    readonly originPositionKey: string
    readonly radius: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
        
    }
}

}


export namespace ai {
export class MoveToTarget extends ai.Task {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.target_actor_key === undefined) { throw new Error() }
        this.targetActorKey = _json_.target_actor_key
        if (_json_.acceptable_radius === undefined) { throw new Error() }
        this.acceptableRadius = _json_.acceptable_radius
    }

    readonly targetActorKey: string
    readonly acceptableRadius: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
        
    }
}

}


export namespace ai {
export class UeWait extends ai.Task {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.wait_time === undefined) { throw new Error() }
        this.waitTime = _json_.wait_time
        if (_json_.random_deviation === undefined) { throw new Error() }
        this.randomDeviation = _json_.random_deviation
    }

    readonly waitTime: number
    readonly randomDeviation: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
        
    }
}

}


export namespace ai {
export class UeWaitBlackboardTime extends ai.Task {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.blackboard_key === undefined) { throw new Error() }
        this.blackboardKey = _json_.blackboard_key
    }

    readonly blackboardKey: string

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace ai {
export abstract class Service extends ai.Node {
    static constructorFrom(_json_: any): Service{
        switch (_json_["$type"]) {
            case 'UeSetDefaultFocus': return new ai.UeSetDefaultFocus(_json_)
            case 'ExecuteTimeStatistic': return new ai.ExecuteTimeStatistic(_json_)
            case 'ChooseTarget': return new ai.ChooseTarget(_json_)
            case 'KeepFaceTarget': return new ai.KeepFaceTarget(_json_)
            case 'GetOwnerPlayer': return new ai.GetOwnerPlayer(_json_)
            case 'UpdateDailyBehaviorProps': return new ai.UpdateDailyBehaviorProps(_json_)
            default: throw new Error()
        }
    }

    constructor(_json_: any) {
        super(_json_)
    }


    resolve(tables:Tables) {
        super.resolve(tables)
    }
}

}


export namespace ai {
export class ChooseTarget extends ai.Service {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.result_target_key === undefined) { throw new Error() }
        this.resultTargetKey = _json_.result_target_key
    }

    readonly resultTargetKey: string

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace ai {
export class ExecuteTimeStatistic extends ai.Service {

    constructor(_json_: any) {
        super(_json_)
    }


    resolve(tables:Tables) {
        super.resolve(tables)
    }
}

}


export namespace ai {
export class GetOwnerPlayer extends ai.Service {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.player_actor_key === undefined) { throw new Error() }
        this.playerActorKey = _json_.player_actor_key
    }

    readonly playerActorKey: string

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace ai {
export class KeepFaceTarget extends ai.Service {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.target_actor_key === undefined) { throw new Error() }
        this.targetActorKey = _json_.target_actor_key
    }

    readonly targetActorKey: string

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace ai {
export class UeSetDefaultFocus extends ai.Service {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.keyboard_key === undefined) { throw new Error() }
        this.keyboardKey = _json_.keyboard_key
    }

    readonly keyboardKey: string

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace ai {
export class UpdateDailyBehaviorProps extends ai.Service {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.satiety_key === undefined) { throw new Error() }
        this.satietyKey = _json_.satiety_key
        if (_json_.energy_key === undefined) { throw new Error() }
        this.energyKey = _json_.energy_key
        if (_json_.mood_key === undefined) { throw new Error() }
        this.moodKey = _json_.mood_key
        if (_json_.satiety_lower_threshold_key === undefined) { throw new Error() }
        this.satietyLowerThresholdKey = _json_.satiety_lower_threshold_key
        if (_json_.satiety_upper_threshold_key === undefined) { throw new Error() }
        this.satietyUpperThresholdKey = _json_.satiety_upper_threshold_key
        if (_json_.energy_lower_threshold_key === undefined) { throw new Error() }
        this.energyLowerThresholdKey = _json_.energy_lower_threshold_key
        if (_json_.energy_upper_threshold_key === undefined) { throw new Error() }
        this.energyUpperThresholdKey = _json_.energy_upper_threshold_key
        if (_json_.mood_lower_threshold_key === undefined) { throw new Error() }
        this.moodLowerThresholdKey = _json_.mood_lower_threshold_key
        if (_json_.mood_upper_threshold_key === undefined) { throw new Error() }
        this.moodUpperThresholdKey = _json_.mood_upper_threshold_key
    }

    readonly satietyKey: string
    readonly energyKey: string
    readonly moodKey: string
    readonly satietyLowerThresholdKey: string
    readonly satietyUpperThresholdKey: string
    readonly energyLowerThresholdKey: string
    readonly energyUpperThresholdKey: string
    readonly moodLowerThresholdKey: string
    readonly moodUpperThresholdKey: string

    resolve(tables:Tables) {
        super.resolve(tables)
        
        
        
        
        
        
        
        
        
    }
}

}



export class AutoImport1 {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = _json_.x1
        if (_json_.x5 === undefined) { throw new Error() }
        this.x5 = _json_.x5
        if (_json_.x6 === undefined) { throw new Error() }
        this.x6 = _json_.x6
        if (_json_.x8 === undefined) { throw new Error() }
        this.x8 = _json_.x8
        if (_json_.x10 === undefined) { throw new Error() }
        this.x10 = _json_.x10
        if (_json_.x13 === undefined) { throw new Error() }
        this.x13 = _json_.x13
        if (_json_.x13_2 === undefined) { throw new Error() }
        this.x132 = _json_.x13_2
        if (_json_.x14 === undefined) { throw new Error() }
        this.x14 = test.DemoDynamic.constructorFrom(_json_.x14)
        if (_json_.x15 === undefined) { throw new Error() }
        this.x15 = test.Shape.constructorFrom(_json_.x15)
        if (_json_.v2 === undefined) { throw new Error() }
        this.v2 = new vec2(_json_.v2)
        if (_json_.t1 === undefined) { throw new Error() }
        this.t1 = _json_.t1
        if (_json_.k1 === undefined) { throw new Error() }
        { this.k1 = []; for(let _ele0 of _json_.k1) { let _e0; _e0 = _ele0; this.k1.push(_e0);}}
        if (_json_.k2 === undefined) { throw new Error() }
        { this.k2 = []; for(let _ele0 of _json_.k2) { let _e0; _e0 = _ele0; this.k2.push(_e0);}}
        if (_json_.k8 === undefined) { throw new Error() }
        this.k8 = new Map<number, number>(); for(var _entry0_ of _json_.k8) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.k8.set(_k0, _v0);  }
        if (_json_.k9 === undefined) { throw new Error() }
        { this.k9 = []; for(let _ele0 of _json_.k9) { let _e0; _e0 = new test.DemoE2(_ele0); this.k9.push(_e0);}}
        if (_json_.k10 === undefined) { throw new Error() }
        { this.k10 = []; for(let _ele0 of _json_.k10) { let _e0; _e0 = new vec3(_ele0); this.k10.push(_e0);}}
        if (_json_.k11 === undefined) { throw new Error() }
        { this.k11 = []; for(let _ele0 of _json_.k11) { let _e0; _e0 = new vec4(_ele0); this.k11.push(_e0);}}
        if(_json_.v11 != undefined) { this.v11 = new vec3(_json_.v11) } else { this.v11 = undefined }
    }

    /**
     * 这是id
     */
    readonly id: number
    /**
     * 字段x1
     */
    readonly x1: boolean
    readonly x5: number
    readonly x6: number
    readonly x8: number
    readonly x10: string
    readonly x13: test.DemoEnum
    readonly x132: test.DemoFlag
    readonly x14: test.DemoDynamic
    readonly x15: test.Shape
    readonly v2: vec2
    readonly t1: number
    readonly k1: number[]
    readonly k2: number[]
    readonly k8: Map<number, number>
    readonly k9: test.DemoE2[]
    readonly k10: vec3[]
    readonly k11: vec4[]
    readonly v11: vec3|undefined

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        this.x14?.resolve(tables);
        this.x15?.resolve(tables);
        
        
        
        
        
        
        
        
        
    }
}




export namespace common {
export class DateTimeRange {

    constructor(_json_: any) {
        if(_json_.start_time != undefined) { this.startTime = _json_.start_time } else { this.startTime = undefined }
        if(_json_.end_time != undefined) { this.endTime = _json_.end_time } else { this.endTime = undefined }
    }

    readonly startTime: number|undefined
    readonly endTime: number|undefined

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace common {
export class FloatRange {

    constructor(_json_: any) {
        if (_json_.min === undefined) { throw new Error() }
        this.min = _json_.min
        if (_json_.max === undefined) { throw new Error() }
        this.max = _json_.max
    }

    readonly min: number
    readonly max: number

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace common {
export class GlobalConfig {

    constructor(_json_: any) {
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = _json_.x1
        if (_json_.x2 === undefined) { throw new Error() }
        this.x2 = _json_.x2
        if (_json_.x3 === undefined) { throw new Error() }
        this.x3 = _json_.x3
        if (_json_.x4 === undefined) { throw new Error() }
        this.x4 = _json_.x4
        if (_json_.x5 === undefined) { throw new Error() }
        this.x5 = _json_.x5
        if (_json_.x6 === undefined) { throw new Error() }
        this.x6 = _json_.x6
        if (_json_.x7 === undefined) { throw new Error() }
        { this.x7 = []; for(let _ele0 of _json_.x7) { let _e0; _e0 = _ele0; this.x7.push(_e0);}}
    }

    /**
     * 背包容量
     */
    readonly x1: number
    readonly x2: number
    readonly x3: number
    readonly x4: number
    readonly x5: number
    readonly x6: number
    readonly x7: number[]

    resolve(tables:Tables) {
        
        
        
        
        
        
        
    }
}

}


export namespace common {
export class IntRange {

    constructor(_json_: any) {
        if (_json_.min === undefined) { throw new Error() }
        this.min = _json_.min
        if (_json_.max === undefined) { throw new Error() }
        this.max = _json_.max
    }

    readonly min: number
    readonly max: number

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace common {
export class OneDayTimeRange {

    constructor(_json_: any) {
        if (_json_.start_time === undefined) { throw new Error() }
        this.startTime = new common.TimeOfDay(_json_.start_time)
        if (_json_.end_time === undefined) { throw new Error() }
        this.endTime = new common.TimeOfDay(_json_.end_time)
    }

    readonly startTime: common.TimeOfDay
    readonly endTime: common.TimeOfDay

    resolve(tables:Tables) {
        this.startTime?.resolve(tables);
        this.endTime?.resolve(tables);
    }
}

}


export namespace common {
export class TimeOfDay {

    constructor(_json_: any) {
        if (_json_.hour === undefined) { throw new Error() }
        this.hour = _json_.hour
        if (_json_.minute === undefined) { throw new Error() }
        this.minute = _json_.minute
        if (_json_.second === undefined) { throw new Error() }
        this.second = _json_.second
    }

    readonly hour: number
    readonly minute: number
    readonly second: number

    resolve(tables:Tables) {
        
        
        
    }
}

}


export namespace item {
/**
 * 道具
 */
export class Item {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.major_type === undefined) { throw new Error() }
        this.majorType = _json_.major_type
        if (_json_.minor_type === undefined) { throw new Error() }
        this.minorType = _json_.minor_type
        if (_json_.max_pile_num === undefined) { throw new Error() }
        this.maxPileNum = _json_.max_pile_num
        if (_json_.quality === undefined) { throw new Error() }
        this.quality = _json_.quality
        if (_json_.icon === undefined) { throw new Error() }
        this.icon = _json_.icon
        if (_json_.icon_backgroud === undefined) { throw new Error() }
        this.iconBackgroud = _json_.icon_backgroud
        if (_json_.icon_mask === undefined) { throw new Error() }
        this.iconMask = _json_.icon_mask
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.show_order === undefined) { throw new Error() }
        this.showOrder = _json_.show_order
    }

    /**
     * 道具id
     */
    readonly id: number
    readonly name: string
    readonly majorType: item.EMajorType
    readonly minorType: item.EMinorType
    readonly maxPileNum: number
    readonly quality: item.EItemQuality
    readonly icon: string
    readonly iconBackgroud: string
    readonly iconMask: string
    readonly desc: string
    readonly showOrder: number

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
    }
}

}


export namespace l10n {
export class L10NDemo {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.text === undefined) { throw new Error() }
        this.text = _json_.text
    }

    readonly id: number
    readonly text: string

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace l10n {
export class PatchDemo {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.value === undefined) { throw new Error() }
        this.value = _json_.value
    }

    readonly id: number
    readonly value: number

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace tag {
export class TestTag {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.value === undefined) { throw new Error() }
        this.value = _json_.value
    }

    readonly id: number
    readonly value: string

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace test {
export class AutoImport2 {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = _json_.x1
        if (_json_.x5 === undefined) { throw new Error() }
        this.x5 = _json_.x5
        if (_json_.x6 === undefined) { throw new Error() }
        this.x6 = _json_.x6
        if (_json_.x8 === undefined) { throw new Error() }
        this.x8 = _json_.x8
        if (_json_.x10 === undefined) { throw new Error() }
        this.x10 = _json_.x10
        if (_json_.x13 === undefined) { throw new Error() }
        this.x13 = _json_.x13
        if (_json_.x13_2 === undefined) { throw new Error() }
        this.x132 = _json_.x13_2
        if (_json_.x14 === undefined) { throw new Error() }
        this.x14 = test.DemoDynamic.constructorFrom(_json_.x14)
        if (_json_.x15 === undefined) { throw new Error() }
        this.x15 = test.Shape.constructorFrom(_json_.x15)
        if (_json_.v2 === undefined) { throw new Error() }
        this.v2 = new vec2(_json_.v2)
        if (_json_.t1 === undefined) { throw new Error() }
        this.t1 = _json_.t1
        if (_json_.k1 === undefined) { throw new Error() }
        { this.k1 = []; for(let _ele0 of _json_.k1) { let _e0; _e0 = _ele0; this.k1.push(_e0);}}
        if (_json_.k2 === undefined) { throw new Error() }
        { this.k2 = []; for(let _ele0 of _json_.k2) { let _e0; _e0 = _ele0; this.k2.push(_e0);}}
        if (_json_.k8 === undefined) { throw new Error() }
        this.k8 = new Map<number, number>(); for(var _entry0_ of _json_.k8) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.k8.set(_k0, _v0);  }
        if (_json_.k9 === undefined) { throw new Error() }
        { this.k9 = []; for(let _ele0 of _json_.k9) { let _e0; _e0 = new test.DemoE2(_ele0); this.k9.push(_e0);}}
        if (_json_.k10 === undefined) { throw new Error() }
        { this.k10 = []; for(let _ele0 of _json_.k10) { let _e0; _e0 = new vec3(_ele0); this.k10.push(_e0);}}
        if (_json_.k11 === undefined) { throw new Error() }
        { this.k11 = []; for(let _ele0 of _json_.k11) { let _e0; _e0 = new vec4(_ele0); this.k11.push(_e0);}}
        if(_json_.v11 != undefined) { this.v11 = new vec3(_json_.v11) } else { this.v11 = undefined }
    }

    /**
     * 这是id
     */
    readonly id: number
    /**
     * 字段x1
     */
    readonly x1: boolean
    readonly x5: number
    readonly x6: number
    readonly x8: number
    readonly x10: string
    readonly x13: test.DemoEnum
    readonly x132: test.DemoFlag
    readonly x14: test.DemoDynamic
    readonly x15: test.Shape
    readonly v2: vec2
    readonly t1: number
    readonly k1: number[]
    readonly k2: number[]
    readonly k8: Map<number, number>
    readonly k9: test.DemoE2[]
    readonly k10: vec3[]
    readonly k11: vec4[]
    readonly v11: vec3|undefined

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        this.x14?.resolve(tables);
        this.x15?.resolve(tables);
        
        
        
        
        
        
        
        
        
    }
}

}


export namespace test {
export class CompactString {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.s2 === undefined) { throw new Error() }
        this.s2 = _json_.s2
        if (_json_.s3 === undefined) { throw new Error() }
        this.s3 = _json_.s3
    }

    readonly id: number
    readonly s2: string
    readonly s3: string

    resolve(tables:Tables) {
        
        
        
    }
}

}


export namespace test {
export class CompositeJsonTable1 {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
    }

    readonly id: number
    readonly x: string

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace test {
export class CompositeJsonTable2 {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
    }

    readonly id: number
    readonly y: number

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace test {
export class CompositeJsonTable3 {

    constructor(_json_: any) {
        if (_json_.a === undefined) { throw new Error() }
        this.a = _json_.a
        if (_json_.b === undefined) { throw new Error() }
        this.b = _json_.b
    }

    readonly a: number
    readonly b: number

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace test {
export class DateTimeRange {

    constructor(_json_: any) {
        if (_json_.start_time === undefined) { throw new Error() }
        this.startTime = _json_.start_time
        if (_json_.end_time === undefined) { throw new Error() }
        this.endTime = _json_.end_time
    }

    readonly startTime: number
    readonly endTime: number

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace test {
export class DefineFromExcel2 {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = _json_.x1
        if (_json_.x5 === undefined) { throw new Error() }
        this.x5 = _json_.x5
        if (_json_.x6 === undefined) { throw new Error() }
        this.x6 = _json_.x6
        if (_json_.x8 === undefined) { throw new Error() }
        this.x8 = _json_.x8
        if (_json_.x10 === undefined) { throw new Error() }
        this.x10 = _json_.x10
        if (_json_.x13 === undefined) { throw new Error() }
        this.x13 = _json_.x13
        if (_json_.x13_2 === undefined) { throw new Error() }
        this.x132 = _json_.x13_2
        if (_json_.x14 === undefined) { throw new Error() }
        this.x14 = test.DemoDynamic.constructorFrom(_json_.x14)
        if (_json_.x15 === undefined) { throw new Error() }
        this.x15 = test.Shape.constructorFrom(_json_.x15)
        if (_json_.v2 === undefined) { throw new Error() }
        this.v2 = new vec2(_json_.v2)
        if (_json_.t1 === undefined) { throw new Error() }
        this.t1 = _json_.t1
        if (_json_.k1 === undefined) { throw new Error() }
        { this.k1 = []; for(let _ele0 of _json_.k1) { let _e0; _e0 = _ele0; this.k1.push(_e0);}}
        if (_json_.k2 === undefined) { throw new Error() }
        { this.k2 = []; for(let _ele0 of _json_.k2) { let _e0; _e0 = _ele0; this.k2.push(_e0);}}
        if (_json_.k8 === undefined) { throw new Error() }
        this.k8 = new Map<number, number>(); for(var _entry0_ of _json_.k8) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.k8.set(_k0, _v0);  }
        if (_json_.k9 === undefined) { throw new Error() }
        { this.k9 = []; for(let _ele0 of _json_.k9) { let _e0; _e0 = new test.DemoE2(_ele0); this.k9.push(_e0);}}
        if (_json_.k10 === undefined) { throw new Error() }
        { this.k10 = []; for(let _ele0 of _json_.k10) { let _e0; _e0 = new vec3(_ele0); this.k10.push(_e0);}}
        if (_json_.k11 === undefined) { throw new Error() }
        { this.k11 = []; for(let _ele0 of _json_.k11) { let _e0; _e0 = new vec4(_ele0); this.k11.push(_e0);}}
        if(_json_.v11 != undefined) { this.v11 = new vec3(_json_.v11) } else { this.v11 = undefined }
    }

    /**
     * 这是id
     */
    readonly id: number
    /**
     * 字段x1
     */
    readonly x1: boolean
    readonly x5: number
    readonly x6: number
    readonly x8: number
    readonly x10: string
    readonly x13: test.DemoEnum
    readonly x132: test.DemoFlag
    readonly x14: test.DemoDynamic
    readonly x15: test.Shape
    readonly v2: vec2
    readonly t1: number
    readonly k1: number[]
    readonly k2: number[]
    readonly k8: Map<number, number>
    readonly k9: test.DemoE2[]
    readonly k10: vec3[]
    readonly k11: vec4[]
    readonly v11: vec3|undefined

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        this.x14?.resolve(tables);
        this.x15?.resolve(tables);
        
        
        
        
        
        
        
        
        
    }
}

}


export namespace test {
export abstract class DemoDynamic {
    static constructorFrom(_json_: any): DemoDynamic{
        switch (_json_["$type"]) {
            case 'DemoD2': return new test.DemoD2(_json_)
            case 'DemoE1': return new test.DemoE1(_json_)
            case 'test.login.RoleInfo': return new test.login.RoleInfo(_json_)
            case 'DemoD5': return new test.DemoD5(_json_)
            default: throw new Error()
        }
    }

    constructor(_json_: any) {
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = _json_.x1
    }

    readonly x1: number

    resolve(tables:Tables) {
        
    }
}

}


export namespace test {
export class DemoD2 extends test.DemoDynamic {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.x2 === undefined) { throw new Error() }
        this.x2 = _json_.x2
    }

    readonly x2: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace test {
export abstract class DemoD3 extends test.DemoDynamic {
    static constructorFrom(_json_: any): DemoD3{
        switch (_json_["$type"]) {
            case 'DemoE1': return new test.DemoE1(_json_)
            case 'test.login.RoleInfo': return new test.login.RoleInfo(_json_)
            default: throw new Error()
        }
    }

    constructor(_json_: any) {
        super(_json_)
        if (_json_.x3 === undefined) { throw new Error() }
        this.x3 = _json_.x3
    }

    readonly x3: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace test {
export class DemoE1 extends test.DemoD3 {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.x4 === undefined) { throw new Error() }
        this.x4 = _json_.x4
    }

    readonly x4: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace test {export namespace login {
export class RoleInfo extends test.DemoD3 {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.role_id === undefined) { throw new Error() }
        this.roleId = _json_.role_id
    }

    readonly roleId: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}}


export namespace test {
export class DemoD5 extends test.DemoDynamic {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.time === undefined) { throw new Error() }
        this.time = new test.DateTimeRange(_json_.time)
    }

    readonly time: test.DateTimeRange

    resolve(tables:Tables) {
        super.resolve(tables)
        this.time?.resolve(tables);
    }
}

}


export namespace test {
export class DemoE2 {

    constructor(_json_: any) {
        if(_json_.y1 != undefined) { this.y1 = _json_.y1 } else { this.y1 = undefined }
        if (_json_.y2 === undefined) { throw new Error() }
        this.y2 = _json_.y2
    }

    readonly y1: number|undefined
    readonly y2: boolean

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace test {
export class DemoExplicitType {

    constructor(_json_: any) {
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = _json_.x1
        if (_json_.x2 === undefined) { throw new Error() }
        this.x2 = _json_.x2
        if (_json_.x3 === undefined) { throw new Error() }
        this.x3 = _json_.x3
        if (_json_.x4 === undefined) { throw new Error() }
        this.x4 = _json_.x4
        if (_json_.x5 === undefined) { throw new Error() }
        this.x5 = _json_.x5
        if (_json_.x6 === undefined) { throw new Error() }
        this.x6 = _json_.x6
        if (_json_.x7 === undefined) { throw new Error() }
        this.x7 = _json_.x7
    }

    readonly x1: number
    readonly x2: number
    readonly x3: number
    readonly x4: number
    readonly x5: number
    readonly x6: number
    readonly x7: bigint

    resolve(tables:Tables) {
        
        
        
        
        
        
        
    }
}

}


export namespace test {
export class DemoGroup {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = _json_.x1
        if (_json_.x2 === undefined) { throw new Error() }
        this.x2 = _json_.x2
        if (_json_.x3 === undefined) { throw new Error() }
        this.x3 = _json_.x3
        if (_json_.x4 === undefined) { throw new Error() }
        this.x4 = _json_.x4
        if (_json_.x5 === undefined) { throw new Error() }
        this.x5 = new test.InnerGroup(_json_.x5)
    }

    readonly id: number
    readonly x1: number
    x1_ref: test.DemoGroup | undefined
    readonly x2: number
    x2_ref: test.DemoGroup | undefined
    readonly x3: number
    x3_ref: test.DemoGroup | undefined
    readonly x4: number
    readonly x5: test.InnerGroup

    resolve(tables:Tables) {
        
        this.x1_ref = tables.TbDemoGroup_C.get(this.x1)
        this.x2_ref = tables.TbDemoGroup_S.get(this.x2)
        this.x3_ref = tables.TbDemoGroup_E.get(this.x3)
        
        this.x5?.resolve(tables);
    }
}

}


export namespace test {
export class DemoPrimitiveTypesTable {

    constructor(_json_: any) {
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = _json_.x1
        if (_json_.x2 === undefined) { throw new Error() }
        this.x2 = _json_.x2
        if (_json_.x3 === undefined) { throw new Error() }
        this.x3 = _json_.x3
        if (_json_.x4 === undefined) { throw new Error() }
        this.x4 = _json_.x4
        if (_json_.x5 === undefined) { throw new Error() }
        this.x5 = _json_.x5
        if (_json_.x6 === undefined) { throw new Error() }
        this.x6 = _json_.x6
        if (_json_.x7 === undefined) { throw new Error() }
        this.x7 = _json_.x7
        if (_json_.s1 === undefined) { throw new Error() }
        this.s1 = _json_.s1
        if (_json_.s2 === undefined) { throw new Error() }
        this.s2 = _json_.s2
        if (_json_.v2 === undefined) { throw new Error() }
        this.v2 = new vec2(_json_.v2)
        if (_json_.v3 === undefined) { throw new Error() }
        this.v3 = new vec3(_json_.v3)
        if (_json_.v4 === undefined) { throw new Error() }
        this.v4 = new vec4(_json_.v4)
        if (_json_.t1 === undefined) { throw new Error() }
        this.t1 = _json_.t1
    }

    readonly x1: boolean
    readonly x2: number
    readonly x3: number
    readonly x4: number
    readonly x5: number
    readonly x6: number
    readonly x7: number
    readonly s1: string
    readonly s2: string
    readonly v2: vec2
    readonly v3: vec3
    readonly v4: vec4
    readonly t1: number

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}

}


export namespace test {
export class DemoSingletonType {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.date === undefined) { throw new Error() }
        this.date = test.DemoDynamic.constructorFrom(_json_.date)
    }

    readonly id: number
    readonly name: string
    readonly date: test.DemoDynamic

    resolve(tables:Tables) {
        
        
        this.date?.resolve(tables);
    }
}

}


export namespace test {
export class DemoType1 {

    constructor(_json_: any) {
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = _json_.x1
    }

    readonly x1: number

    resolve(tables:Tables) {
        
    }
}

}


export namespace test {
export class DemoType2 {

    constructor(_json_: any) {
        if (_json_.x4 === undefined) { throw new Error() }
        this.x4 = _json_.x4
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = _json_.x1
        if (_json_.x2 === undefined) { throw new Error() }
        this.x2 = _json_.x2
        if (_json_.x3 === undefined) { throw new Error() }
        this.x3 = _json_.x3
        if (_json_.x5 === undefined) { throw new Error() }
        this.x5 = _json_.x5
        if (_json_.x6 === undefined) { throw new Error() }
        this.x6 = _json_.x6
        if (_json_.x7 === undefined) { throw new Error() }
        this.x7 = _json_.x7
        if (_json_.x8_0 === undefined) { throw new Error() }
        this.x80 = _json_.x8_0
        if (_json_.x8 === undefined) { throw new Error() }
        this.x8 = _json_.x8
        if (_json_.x9 === undefined) { throw new Error() }
        this.x9 = _json_.x9
        if (_json_.x10 === undefined) { throw new Error() }
        this.x10 = _json_.x10
        if (_json_.x12 === undefined) { throw new Error() }
        this.x12 = new test.DemoType1(_json_.x12)
        if (_json_.x13 === undefined) { throw new Error() }
        this.x13 = _json_.x13
        if (_json_.x14 === undefined) { throw new Error() }
        this.x14 = test.DemoDynamic.constructorFrom(_json_.x14)
        if (_json_.s1 === undefined) { throw new Error() }
        this.s1 = _json_.s1
        if (_json_.t1 === undefined) { throw new Error() }
        this.t1 = _json_.t1
        if (_json_.k1 === undefined) { throw new Error() }
        { this.k1 = []; for(let _ele0 of _json_.k1) { let _e0; _e0 = _ele0; this.k1.push(_e0);}}
        if (_json_.k2 === undefined) { throw new Error() }
        { this.k2 = []; for(let _ele0 of _json_.k2) { let _e0; _e0 = _ele0; this.k2.push(_e0);}}
        if (_json_.k5 === undefined) { throw new Error() }
        this.k5 = _json_.k5
        if (_json_.k8 === undefined) { throw new Error() }
        this.k8 = new Map<number, number>(); for(var _entry0_ of _json_.k8) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.k8.set(_k0, _v0);  }
        if (_json_.k9 === undefined) { throw new Error() }
        { this.k9 = []; for(let _ele0 of _json_.k9) { let _e0; _e0 = new test.DemoE2(_ele0); this.k9.push(_e0);}}
        if (_json_.k15 === undefined) { throw new Error() }
        { this.k15 = []; for(let _ele0 of _json_.k15) { let _e0; _e0 = test.DemoDynamic.constructorFrom(_ele0); this.k15.push(_e0);}}
    }

    readonly x4: number
    readonly x1: boolean
    readonly x2: number
    readonly x3: number
    readonly x5: number
    readonly x6: number
    readonly x7: number
    readonly x80: number
    readonly x8: number
    readonly x9: number
    readonly x10: string
    readonly x12: test.DemoType1
    readonly x13: test.DemoEnum
    readonly x14: test.DemoDynamic
    readonly s1: string
    readonly t1: number
    readonly k1: number[]
    readonly k2: number[]
    readonly k5: Set<number>
    readonly k8: Map<number, number>
    readonly k9: test.DemoE2[]
    readonly k15: test.DemoDynamic[]

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
        this.x12?.resolve(tables);
        
        this.x14?.resolve(tables);
        
        
        
        
        
        
        
        for (let _e of this.k15) { _e?.resolve(tables); }
    }
}

}


export namespace test {
export class DetectEncoding {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
    }

    readonly id: number
    readonly name: string

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace test {
export class ExcelFromJson {

    constructor(_json_: any) {
        if (_json_.x4 === undefined) { throw new Error() }
        this.x4 = _json_.x4
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = _json_.x1
        if (_json_.x5 === undefined) { throw new Error() }
        this.x5 = _json_.x5
        if (_json_.x6 === undefined) { throw new Error() }
        this.x6 = _json_.x6
        if (_json_.s1 === undefined) { throw new Error() }
        this.s1 = _json_.s1
        if (_json_.s2 === undefined) { throw new Error() }
        this.s2 = _json_.s2
        if (_json_.t1 === undefined) { throw new Error() }
        this.t1 = _json_.t1
        if (_json_.x12 === undefined) { throw new Error() }
        this.x12 = new test.DemoType1(_json_.x12)
        if (_json_.x13 === undefined) { throw new Error() }
        this.x13 = _json_.x13
        if (_json_.x14 === undefined) { throw new Error() }
        this.x14 = test.DemoDynamic.constructorFrom(_json_.x14)
        if (_json_.k1 === undefined) { throw new Error() }
        { this.k1 = []; for(let _ele0 of _json_.k1) { let _e0; _e0 = _ele0; this.k1.push(_e0);}}
        if (_json_.k8 === undefined) { throw new Error() }
        this.k8 = new Map<number, number>(); for(var _entry0_ of _json_.k8) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.k8.set(_k0, _v0);  }
        if (_json_.k9 === undefined) { throw new Error() }
        { this.k9 = []; for(let _ele0 of _json_.k9) { let _e0; _e0 = new test.DemoE2(_ele0); this.k9.push(_e0);}}
        if (_json_.k15 === undefined) { throw new Error() }
        { this.k15 = []; for(let _ele0 of _json_.k15) { let _e0; _e0 = test.DemoDynamic.constructorFrom(_ele0); this.k15.push(_e0);}}
    }

    readonly x4: number
    readonly x1: boolean
    readonly x5: number
    readonly x6: number
    readonly s1: string
    readonly s2: string
    readonly t1: number
    readonly x12: test.DemoType1
    readonly x13: test.DemoEnum
    readonly x14: test.DemoDynamic
    readonly k1: number[]
    readonly k8: Map<number, number>
    readonly k9: test.DemoE2[]
    readonly k15: test.DemoDynamic[]

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        this.x12?.resolve(tables);
        
        this.x14?.resolve(tables);
        
        
        
        for (let _e of this.k15) { _e?.resolve(tables); }
    }
}

}


export namespace test {
export class ExcelFromJsonMultiRow {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.items === undefined) { throw new Error() }
        { this.items = []; for(let _ele0 of _json_.items) { let _e0; _e0 = new test.TestRow(_ele0); this.items.push(_e0);}}
    }

    readonly id: number
    readonly x: number
    readonly items: test.TestRow[]

    resolve(tables:Tables) {
        
        
        for (let _e of this.items) { _e?.resolve(tables); }
    }
}

}


export namespace test {
export class Foo {

    constructor(_json_: any) {
        if (_json_.y1 === undefined) { throw new Error() }
        this.y1 = _json_.y1
        if (_json_.y2 === undefined) { throw new Error() }
        this.y2 = _json_.y2
        if (_json_.y3 === undefined) { throw new Error() }
        this.y3 = _json_.y3
    }

    readonly y1: number
    readonly y2: number
    readonly y3: number

    resolve(tables:Tables) {
        
        
        
    }
}

}


export namespace test {
export class H1 {

    constructor(_json_: any) {
        if (_json_.y2 === undefined) { throw new Error() }
        this.y2 = new test.H2(_json_.y2)
        if (_json_.y3 === undefined) { throw new Error() }
        this.y3 = _json_.y3
    }

    readonly y2: test.H2
    readonly y3: number

    resolve(tables:Tables) {
        this.y2?.resolve(tables);
        
    }
}

}


export namespace test {
export class H2 {

    constructor(_json_: any) {
        if (_json_.z2 === undefined) { throw new Error() }
        this.z2 = _json_.z2
        if (_json_.z3 === undefined) { throw new Error() }
        this.z3 = _json_.z3
    }

    readonly z2: number
    readonly z3: number

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace test {
export class InnerGroup {

    constructor(_json_: any) {
        if (_json_.y1 === undefined) { throw new Error() }
        this.y1 = _json_.y1
        if (_json_.y2 === undefined) { throw new Error() }
        this.y2 = _json_.y2
        if (_json_.y3 === undefined) { throw new Error() }
        this.y3 = _json_.y3
        if (_json_.y4 === undefined) { throw new Error() }
        this.y4 = _json_.y4
    }

    readonly y1: number
    readonly y2: number
    readonly y3: number
    readonly y4: number

    resolve(tables:Tables) {
        
        
        
        
    }
}

}


export namespace test {
export abstract class ItemBase {
    static constructorFrom(_json_: any): ItemBase{
        switch (_json_["$type"]) {
            case 'Item': return new test.Item(_json_)
            case 'Equipment': return new test.Equipment(_json_)
            case 'Decorator': return new test.Decorator(_json_)
            default: throw new Error()
        }
    }

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
    }

    readonly id: number
    readonly name: string
    readonly desc: string

    resolve(tables:Tables) {
        
        
        
    }
}

}


export namespace test {
export class Decorator extends test.ItemBase {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.duration === undefined) { throw new Error() }
        this.duration = _json_.duration
    }

    readonly duration: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace test {
export class Equipment extends test.ItemBase {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.attr === undefined) { throw new Error() }
        this.attr = _json_.attr
        if (_json_.value === undefined) { throw new Error() }
        this.value = _json_.value
    }

    readonly attr: test.DemoEnum
    readonly value: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
        
    }
}

}


export namespace test {
export class Item extends test.ItemBase {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.num === undefined) { throw new Error() }
        this.num = _json_.num
        if (_json_.price === undefined) { throw new Error() }
        this.price = _json_.price
    }

    readonly num: number
    readonly price: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
        
    }
}

}


export namespace test {
export class MultiIndexList {

    constructor(_json_: any) {
        if (_json_.id1 === undefined) { throw new Error() }
        this.id1 = _json_.id1
        if (_json_.id2 === undefined) { throw new Error() }
        this.id2 = _json_.id2
        if (_json_.id3 === undefined) { throw new Error() }
        this.id3 = _json_.id3
        if (_json_.num === undefined) { throw new Error() }
        this.num = _json_.num
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
    }

    readonly id1: number
    readonly id2: number
    readonly id3: string
    readonly num: number
    readonly desc: string

    resolve(tables:Tables) {
        
        
        
        
        
    }
}

}


export namespace test {
export class MultiRowRecord {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.one_rows === undefined) { throw new Error() }
        { this.oneRows = []; for(let _ele0 of _json_.one_rows) { let _e0; _e0 = new test.MultiRowType1(_ele0); this.oneRows.push(_e0);}}
        if (_json_.multi_rows1 === undefined) { throw new Error() }
        { this.multiRows1 = []; for(let _ele0 of _json_.multi_rows1) { let _e0; _e0 = new test.MultiRowType1(_ele0); this.multiRows1.push(_e0);}}
        if (_json_.multi_rows2 === undefined) { throw new Error() }
        { this.multiRows2 = []; for(let _ele0 of _json_.multi_rows2) { let _e0; _e0 = new test.MultiRowType1(_ele0); this.multiRows2.push(_e0);}}
        if (_json_.multi_rows4 === undefined) { throw new Error() }
        this.multiRows4 = new Map<number, test.MultiRowType2>(); for(var _entry0_ of _json_.multi_rows4) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = new test.MultiRowType2(_entry0_[1]); this.multiRows4.set(_k0, _v0);  }
        if (_json_.multi_rows5 === undefined) { throw new Error() }
        { this.multiRows5 = []; for(let _ele0 of _json_.multi_rows5) { let _e0; _e0 = new test.MultiRowType3(_ele0); this.multiRows5.push(_e0);}}
        if (_json_.multi_rows6 === undefined) { throw new Error() }
        this.multiRows6 = new Map<number, test.MultiRowType2>(); for(var _entry0_ of _json_.multi_rows6) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = new test.MultiRowType2(_entry0_[1]); this.multiRows6.set(_k0, _v0);  }
        if (_json_.multi_rows7 === undefined) { throw new Error() }
        this.multiRows7 = new Map<number, number>(); for(var _entry0_ of _json_.multi_rows7) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.multiRows7.set(_k0, _v0);  }
    }

    readonly id: number
    readonly name: string
    readonly oneRows: test.MultiRowType1[]
    readonly multiRows1: test.MultiRowType1[]
    readonly multiRows2: test.MultiRowType1[]
    readonly multiRows4: Map<number, test.MultiRowType2>
    readonly multiRows5: test.MultiRowType3[]
    readonly multiRows6: Map<number, test.MultiRowType2>
    readonly multiRows7: Map<number, number>

    resolve(tables:Tables) {
        
        
        for (let _e of this.oneRows) { _e?.resolve(tables); }
        for (let _e of this.multiRows1) { _e?.resolve(tables); }
        for (let _e of this.multiRows2) { _e?.resolve(tables); }
        for (let [_, _e] of this.multiRows4) { _e?.resolve(tables); }
        for (let _e of this.multiRows5) { _e?.resolve(tables); }
        for (let [_, _e] of this.multiRows6) { _e?.resolve(tables); }
        
    }
}

}


export namespace test {
export class MultiRowTitle {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = new test.H1(_json_.x1)
        if(_json_.x2_0 != undefined) { this.x20 = new test.H2(_json_.x2_0) } else { this.x20 = undefined }
        if (_json_.x2 === undefined) { throw new Error() }
        { this.x2 = []; for(let _ele0 of _json_.x2) { let _e0; _e0 = new test.H2(_ele0); this.x2.push(_e0);}}
        if (_json_.x3 === undefined) { throw new Error() }
        { this.x3 = []; for(let _ele0 of _json_.x3) { let _e0; _e0 = new test.H2(_ele0); this.x3.push(_e0);}}
        if (_json_.x4 === undefined) { throw new Error() }
        { this.x4 = []; for(let _ele0 of _json_.x4) { let _e0; _e0 = new test.H2(_ele0); this.x4.push(_e0);}}
    }

    readonly id: number
    readonly name: string
    readonly x1: test.H1
    readonly x20: test.H2|undefined
    readonly x2: test.H2[]
    readonly x3: test.H2[]
    readonly x4: test.H2[]

    resolve(tables:Tables) {
        
        
        this.x1?.resolve(tables);
        this.x20?.resolve(tables);
        for (let _e of this.x2) { _e?.resolve(tables); }
        for (let _e of this.x3) { _e?.resolve(tables); }
        for (let _e of this.x4) { _e?.resolve(tables); }
    }
}

}


export namespace test {
export class MultiRowType1 {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
    }

    readonly id: number
    readonly x: number

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace test {
export class MultiRowType2 {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
    }

    readonly id: number
    readonly x: number
    readonly y: number

    resolve(tables:Tables) {
        
        
        
    }
}

}


export namespace test {
export class MultiRowType3 {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.items === undefined) { throw new Error() }
        { this.items = []; for(let _ele0 of _json_.items) { let _e0; _e0 = new test.MultiRowType1(_ele0); this.items.push(_e0);}}
    }

    readonly id: number
    readonly items: test.MultiRowType1[]

    resolve(tables:Tables) {
        
        for (let _e of this.items) { _e?.resolve(tables); }
    }
}

}


export namespace test {
export class MultiUnionIndexList {

    constructor(_json_: any) {
        if (_json_.id1 === undefined) { throw new Error() }
        this.id1 = _json_.id1
        if (_json_.id2 === undefined) { throw new Error() }
        this.id2 = _json_.id2
        if (_json_.id3 === undefined) { throw new Error() }
        this.id3 = _json_.id3
        if (_json_.num === undefined) { throw new Error() }
        this.num = _json_.num
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
    }

    readonly id1: number
    readonly id2: number
    readonly id3: string
    readonly num: number
    readonly desc: string

    resolve(tables:Tables) {
        
        
        
        
        
    }
}

}


export namespace test {
export class NotIndexList {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
    }

    readonly x: number
    readonly y: number

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace test {
export class Path {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.res === undefined) { throw new Error() }
        this.res = _json_.res
    }

    readonly id: number
    readonly res: string

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace test {
export abstract class RefDynamicBase {
    static constructorFrom(_json_: any): RefDynamicBase{
        switch (_json_["$type"]) {
            case 'RefBean': return new test.RefBean(_json_)
            default: throw new Error()
        }
    }

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
    }

    readonly x: number
    x_ref: test.TestBeRef | undefined

    resolve(tables:Tables) {
        this.x_ref = tables.TbTestBeRef.get(this.x)
    }
}

}


export namespace test {
export class RefBean extends test.RefDynamicBase {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.arr === undefined) { throw new Error() }
        { this.arr = []; for(let _ele0 of _json_.arr) { let _e0; _e0 = _ele0; this.arr.push(_e0);}}
    }

    readonly arr: number[]

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace test {
export class SepBean1 {

    constructor(_json_: any) {
        if (_json_.a === undefined) { throw new Error() }
        this.a = _json_.a
        if (_json_.b === undefined) { throw new Error() }
        this.b = _json_.b
        if (_json_.c === undefined) { throw new Error() }
        this.c = _json_.c
    }

    readonly a: number
    readonly b: number
    readonly c: string

    resolve(tables:Tables) {
        
        
        
    }
}

}


export namespace test {
export class SepVector {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
        if (_json_.z === undefined) { throw new Error() }
        this.z = _json_.z
    }

    readonly x: number
    readonly y: number
    readonly z: number

    resolve(tables:Tables) {
        
        
        
    }
}

}


export namespace test {
export abstract class Shape {
    static constructorFrom(_json_: any): Shape{
        switch (_json_["$type"]) {
            case 'Circle': return new test.Circle(_json_)
            case 'test2.Rectangle': return new test2.Rectangle(_json_)
            default: throw new Error()
        }
    }

    constructor(_json_: any) {
    }


    resolve(tables:Tables) {
    }
}

}


export namespace test {
/**
 * 圆
 */
export class Circle extends test.Shape {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.radius === undefined) { throw new Error() }
        this.radius = _json_.radius
    }

    /**
     * 半径
     */
    readonly radius: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
    }
}

}


export namespace test2 {
/**
 * 矩形
 */
export class Rectangle extends test.Shape {

    constructor(_json_: any) {
        super(_json_)
        if (_json_.width === undefined) { throw new Error() }
        this.width = _json_.width
        if (_json_.height === undefined) { throw new Error() }
        this.height = _json_.height
    }

    /**
     * 宽度
     */
    readonly width: number
    /**
     * 高度
     */
    readonly height: number

    resolve(tables:Tables) {
        super.resolve(tables)
        
        
    }
}

}


export namespace test {
export class Test3 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
    }

    readonly x: number
    readonly y: number

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace test {
export class TestBeRef {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.count === undefined) { throw new Error() }
        this.count = _json_.count
    }

    readonly id: number
    readonly count: number

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace test {
/**
 * 这是个测试excel结构
 */
export class TestExcelBean1 {

    constructor(_json_: any) {
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = _json_.x1
        if (_json_.x2 === undefined) { throw new Error() }
        this.x2 = _json_.x2
        if (_json_.x3 === undefined) { throw new Error() }
        this.x3 = _json_.x3
        if (_json_.x4 === undefined) { throw new Error() }
        this.x4 = _json_.x4
    }

    /**
     * 最高品质
     */
    readonly x1: number
    /**
     * 黑色的
     */
    readonly x2: string
    /**
     * 蓝色的
     */
    readonly x3: number
    /**
     * 最差品质
     */
    readonly x4: number

    resolve(tables:Tables) {
        
        
        
        
    }
}

}


export namespace test {
/**
 * 这是个测试excel结构
 */
export class TestExcelBean2 {

    constructor(_json_: any) {
        if (_json_.y1 === undefined) { throw new Error() }
        this.y1 = _json_.y1
        if (_json_.y2 === undefined) { throw new Error() }
        this.y2 = _json_.y2
        if (_json_.y3 === undefined) { throw new Error() }
        this.y3 = _json_.y3
    }

    /**
     * 最高品质
     */
    readonly y1: number
    /**
     * 黑色的
     */
    readonly y2: string
    /**
     * 蓝色的
     */
    readonly y3: number

    resolve(tables:Tables) {
        
        
        
    }
}

}


export namespace test {
export class TestGlobal {

    constructor(_json_: any) {
        if (_json_.unlock_equip === undefined) { throw new Error() }
        this.unlockEquip = _json_.unlock_equip
        if (_json_.unlock_hero === undefined) { throw new Error() }
        this.unlockHero = _json_.unlock_hero
    }

    readonly unlockEquip: number
    readonly unlockHero: number

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace test {
export class TestIndex {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.eles === undefined) { throw new Error() }
        { this.eles = []; for(let _ele0 of _json_.eles) { let _e0; _e0 = new test.DemoType1(_ele0); this.eles.push(_e0);}}
    }

    readonly id: number
    readonly eles: test.DemoType1[]

    resolve(tables:Tables) {
        
        for (let _e of this.eles) { _e?.resolve(tables); }
    }
}

}


export namespace test {
export class TestMap {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = new Map<number, number>(); for(var _entry0_ of _json_.x1) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.x1.set(_k0, _v0);  }
        if (_json_.x2 === undefined) { throw new Error() }
        this.x2 = new Map<number, number>(); for(var _entry0_ of _json_.x2) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.x2.set(_k0, _v0);  }
        if (_json_.x3 === undefined) { throw new Error() }
        this.x3 = new Map<string, number>(); for(var _entry0_ of _json_.x3) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.x3.set(_k0, _v0);  }
        if (_json_.x4 === undefined) { throw new Error() }
        this.x4 = new Map<test.DemoEnum, number>(); for(var _entry0_ of _json_.x4) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.x4.set(_k0, _v0);  }
    }

    readonly id: number
    id_ref: test.TestIndex | undefined
    readonly x1: Map<number, number>
    readonly x2: Map<number, number>
    readonly x3: Map<string, number>
    readonly x4: Map<test.DemoEnum, number>

    resolve(tables:Tables) {
        this.id_ref = tables.TbTestIndex.get(this.id)
        
        
        
        
    }
}

}


export namespace test {
export class TestMapper {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.audio_type === undefined) { throw new Error() }
        this.audioType = _json_.audio_type
        if (_json_.v2 === undefined) { throw new Error() }
        this.v2 = new vec2(_json_.v2)
    }

    readonly id: number
    readonly audioType: AudioType
    readonly v2: vec2

    resolve(tables:Tables) {
        
        
        
    }
}

}


export namespace test {
export class TestMultiColumn {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.a === undefined) { throw new Error() }
        this.a = new test.Foo(_json_.a)
        if (_json_.b === undefined) { throw new Error() }
        this.b = new test.Foo(_json_.b)
        if (_json_.c === undefined) { throw new Error() }
        this.c = new test.Foo(_json_.c)
    }

    readonly id: number
    readonly a: test.Foo
    readonly b: test.Foo
    readonly c: test.Foo

    resolve(tables:Tables) {
        
        this.a?.resolve(tables);
        this.b?.resolve(tables);
        this.c?.resolve(tables);
    }
}

}


export namespace test {
export class TestNull {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if(_json_.x1 != undefined) { this.x1 = _json_.x1 } else { this.x1 = undefined }
        if(_json_.x2 != undefined) { this.x2 = _json_.x2 } else { this.x2 = undefined }
        if(_json_.x3 != undefined) { this.x3 = new test.DemoType1(_json_.x3) } else { this.x3 = undefined }
        if(_json_.x4 != undefined) { this.x4 = test.DemoDynamic.constructorFrom(_json_.x4) } else { this.x4 = undefined }
        if(_json_.s1 != undefined) { this.s1 = _json_.s1 } else { this.s1 = undefined }
        if(_json_.s2 != undefined) { this.s2 = _json_.s2 } else { this.s2 = undefined }
    }

    readonly id: number
    readonly x1: number|undefined
    readonly x2: test.DemoEnum|undefined
    readonly x3: test.DemoType1|undefined
    readonly x4: test.DemoDynamic|undefined
    readonly s1: string|undefined
    readonly s2: string|undefined

    resolve(tables:Tables) {
        
        
        
        this.x3?.resolve(tables);
        this.x4?.resolve(tables);
        
        
    }
}

}


export namespace test {
export class TestRef {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = _json_.x1
        if (_json_.x1_2 === undefined) { throw new Error() }
        this.x12 = _json_.x1_2
        if (_json_.x2 === undefined) { throw new Error() }
        this.x2 = _json_.x2
        if (_json_.x3 === undefined) { throw new Error() }
        this.x3 = _json_.x3
        if (_json_.x4 === undefined) { throw new Error() }
        this.x4 = _json_.x4
        if (_json_.a1 === undefined) { throw new Error() }
        { this.a1 = []; for(let _ele0 of _json_.a1) { let _e0; _e0 = _ele0; this.a1.push(_e0);}}
        if (_json_.a2 === undefined) { throw new Error() }
        { this.a2 = []; for(let _ele0 of _json_.a2) { let _e0; _e0 = _ele0; this.a2.push(_e0);}}
        if (_json_.b1 === undefined) { throw new Error() }
        { this.b1 = []; for(let _ele0 of _json_.b1) { let _e0; _e0 = _ele0; this.b1.push(_e0);}}
        if (_json_.b2 === undefined) { throw new Error() }
        { this.b2 = []; for(let _ele0 of _json_.b2) { let _e0; _e0 = _ele0; this.b2.push(_e0);}}
        if (_json_.c1 === undefined) { throw new Error() }
        this.c1 = _json_.c1
        if (_json_.c2 === undefined) { throw new Error() }
        this.c2 = _json_.c2
        if (_json_.d1 === undefined) { throw new Error() }
        this.d1 = new Map<number, number>(); for(var _entry0_ of _json_.d1) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.d1.set(_k0, _v0);  }
        if (_json_.d2 === undefined) { throw new Error() }
        this.d2 = new Map<number, number>(); for(var _entry0_ of _json_.d2) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.d2.set(_k0, _v0);  }
        if (_json_.e1 === undefined) { throw new Error() }
        this.e1 = _json_.e1
        if (_json_.e2 === undefined) { throw new Error() }
        this.e2 = _json_.e2
        if (_json_.e3 === undefined) { throw new Error() }
        this.e3 = _json_.e3
        if (_json_.f1 === undefined) { throw new Error() }
        this.f1 = _json_.f1
        if (_json_.f2 === undefined) { throw new Error() }
        this.f2 = _json_.f2
        if (_json_.f3 === undefined) { throw new Error() }
        this.f3 = _json_.f3
        if (_json_.s1 === undefined) { throw new Error() }
        this.s1 = test.RefDynamicBase.constructorFrom(_json_.s1)
    }

    readonly id: number
    readonly x1: number
    x1_ref: test.TestBeRef | undefined
    readonly x12: number
    x12_ref: test.TestBeRef | undefined
    readonly x2: number
    readonly x3: number
    readonly x4: number
    x4_ref: tag.TestTag | undefined
    readonly a1: number[]
    readonly a2: number[]
    readonly b1: number[]
    readonly b2: number[]
    readonly c1: Set<number>
    readonly c2: Set<number>
    readonly d1: Map<number, number>
    readonly d2: Map<number, number>
    readonly e1: number
    readonly e2: number
    readonly e3: string
    readonly f1: number
    readonly f2: number
    readonly f3: string
    readonly s1: test.RefDynamicBase

    resolve(tables:Tables) {
        
        this.x1_ref = tables.TbTestBeRef.get(this.x1)
        this.x12_ref = tables.TbTestBeRef.get(this.x12)
        
        
        this.x4_ref = tables.TbTestTag.get(this.x4)
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        this.s1?.resolve(tables);
    }
}

}


export namespace test {
export class TestRow {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
        if (_json_.z === undefined) { throw new Error() }
        this.z = _json_.z
        if (_json_.a === undefined) { throw new Error() }
        this.a = new test.Test3(_json_.a)
        if (_json_.b === undefined) { throw new Error() }
        { this.b = []; for(let _ele0 of _json_.b) { let _e0; _e0 = _ele0; this.b.push(_e0);}}
    }

    readonly x: number
    readonly y: boolean
    readonly z: string
    readonly a: test.Test3
    readonly b: number[]

    resolve(tables:Tables) {
        
        
        
        this.a?.resolve(tables);
        
    }
}

}


export namespace test {
export class TestScriptableObject {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.rate === undefined) { throw new Error() }
        this.rate = _json_.rate
        if (_json_.num === undefined) { throw new Error() }
        this.num = _json_.num
        if (_json_.v2 === undefined) { throw new Error() }
        this.v2 = new vec2(_json_.v2)
        if (_json_.v3 === undefined) { throw new Error() }
        this.v3 = new vec3(_json_.v3)
        if (_json_.v4 === undefined) { throw new Error() }
        this.v4 = new vec4(_json_.v4)
    }

    readonly id: number
    readonly desc: string
    readonly rate: number
    readonly num: number
    readonly v2: vec2
    readonly v3: vec3
    readonly v4: vec4

    resolve(tables:Tables) {
        
        
        
        
        
        
        
    }
}

}


export namespace test {
export class TestSet {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.x0 === undefined) { throw new Error() }
        this.x0 = _json_.x0
        if (_json_.x1 === undefined) { throw new Error() }
        { this.x1 = []; for(let _ele0 of _json_.x1) { let _e0; _e0 = _ele0; this.x1.push(_e0);}}
        if (_json_.x2 === undefined) { throw new Error() }
        { this.x2 = []; for(let _ele0 of _json_.x2) { let _e0; _e0 = _ele0; this.x2.push(_e0);}}
        if (_json_.x3 === undefined) { throw new Error() }
        { this.x3 = []; for(let _ele0 of _json_.x3) { let _e0; _e0 = _ele0; this.x3.push(_e0);}}
        if (_json_.x4 === undefined) { throw new Error() }
        { this.x4 = []; for(let _ele0 of _json_.x4) { let _e0; _e0 = _ele0; this.x4.push(_e0);}}
    }

    readonly id: number
    readonly x0: string
    readonly x1: number[]
    readonly x2: number[]
    readonly x3: string[]
    readonly x4: test.DemoEnum[]

    resolve(tables:Tables) {
        
        
        
        
        
        
    }
}

}


export namespace test {
export class TestSize {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.x1 === undefined) { throw new Error() }
        { this.x1 = []; for(let _ele0 of _json_.x1) { let _e0; _e0 = _ele0; this.x1.push(_e0);}}
        if (_json_.x2 === undefined) { throw new Error() }
        { this.x2 = []; for(let _ele0 of _json_.x2) { let _e0; _e0 = _ele0; this.x2.push(_e0);}}
        if (_json_.x3 === undefined) { throw new Error() }
        this.x3 = _json_.x3
        if (_json_.x4 === undefined) { throw new Error() }
        this.x4 = new Map<number, number>(); for(var _entry0_ of _json_.x4) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.x4.set(_k0, _v0);  }
    }

    readonly id: number
    readonly x1: number[]
    readonly x2: number[]
    readonly x3: Set<number>
    readonly x4: Map<number, number>

    resolve(tables:Tables) {
        
        
        
        
        
    }
}

}


export namespace test {
export class TestString {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.s1 === undefined) { throw new Error() }
        this.s1 = _json_.s1
        if (_json_.s2 === undefined) { throw new Error() }
        this.s2 = _json_.s2
        if (_json_.cs1 === undefined) { throw new Error() }
        this.cs1 = new test.CompactString(_json_.cs1)
        if (_json_.cs2 === undefined) { throw new Error() }
        this.cs2 = new test.CompactString(_json_.cs2)
    }

    readonly id: string
    readonly s1: string
    readonly s2: string
    readonly cs1: test.CompactString
    readonly cs2: test.CompactString

    resolve(tables:Tables) {
        
        
        
        this.cs1?.resolve(tables);
        this.cs2?.resolve(tables);
    }
}

}


export namespace test {
export class TestUeType {

    constructor(_json_: any) {
        if (_json_.x1 === undefined) { throw new Error() }
        this.x1 = _json_.x1
        if (_json_.x2 === undefined) { throw new Error() }
        this.x2 = _json_.x2
        if (_json_.x3 === undefined) { throw new Error() }
        this.x3 = _json_.x3
        if (_json_.x4 === undefined) { throw new Error() }
        this.x4 = _json_.x4
        if (_json_.x5 === undefined) { throw new Error() }
        this.x5 = _json_.x5
        if (_json_.x6 === undefined) { throw new Error() }
        this.x6 = _json_.x6
        if (_json_.x10 === undefined) { throw new Error() }
        this.x10 = _json_.x10
        if (_json_.x12 === undefined) { throw new Error() }
        this.x12 = new test.DemoType1(_json_.x12)
        if (_json_.x13 === undefined) { throw new Error() }
        this.x13 = _json_.x13
        if (_json_.t1 === undefined) { throw new Error() }
        this.t1 = _json_.t1
        if (_json_.k1 === undefined) { throw new Error() }
        { this.k1 = []; for(let _ele0 of _json_.k1) { let _e0; _e0 = _ele0; this.k1.push(_e0);}}
        if (_json_.k2 === undefined) { throw new Error() }
        { this.k2 = []; for(let _ele0 of _json_.k2) { let _e0; _e0 = _ele0; this.k2.push(_e0);}}
        if (_json_.k5 === undefined) { throw new Error() }
        this.k5 = _json_.k5
        if (_json_.k8 === undefined) { throw new Error() }
        this.k8 = new Map<number, number>(); for(var _entry0_ of _json_.k8) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.k8.set(_k0, _v0);  }
        if (_json_.k9 === undefined) { throw new Error() }
        { this.k9 = []; for(let _ele0 of _json_.k9) { let _e0; _e0 = new test.DemoE2(_ele0); this.k9.push(_e0);}}
    }

    readonly x1: boolean
    readonly x2: number
    readonly x3: number
    readonly x4: number
    readonly x5: number
    readonly x6: number
    readonly x10: string
    readonly x12: test.DemoType1
    readonly x13: test.ETestUeType
    readonly t1: number
    readonly k1: number[]
    readonly k2: number[]
    readonly k5: Set<number>
    readonly k8: Map<number, number>
    readonly k9: test.DemoE2[]

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        this.x12?.resolve(tables);
        
        
        
        
        
        
        
    }
}

}



export class vec2 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
    }

    readonly x: number
    readonly y: number

    resolve(tables:Tables) {
        
        
    }
}





export class vec3 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
        if (_json_.z === undefined) { throw new Error() }
        this.z = _json_.z
    }

    readonly x: number
    readonly y: number
    readonly z: number

    resolve(tables:Tables) {
        
        
        
    }
}





export class vec4 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
        if (_json_.z === undefined) { throw new Error() }
        this.z = _json_.z
        if (_json_.w === undefined) { throw new Error() }
        this.w = _json_.w
    }

    readonly x: number
    readonly y: number
    readonly z: number
    readonly w: number

    resolve(tables:Tables) {
        
        
        
        
    }
}





export namespace ai {
export class TbBlackboard {
    private _dataMap: Map<string, ai.Blackboard>
    private _dataList: ai.Blackboard[]
    constructor(_json_: any) {
        this._dataMap = new Map<string, ai.Blackboard>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: ai.Blackboard
            _v = new ai.Blackboard(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.name, _v)
        }
    }

    getDataMap(): Map<string, ai.Blackboard> { return this._dataMap; }
    getDataList(): ai.Blackboard[] { return this._dataList; }

    get(key: string): ai.Blackboard | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace ai {
export class TbBehaviorTree {
    private _dataMap: Map<number, ai.BehaviorTree>
    private _dataList: ai.BehaviorTree[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, ai.BehaviorTree>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: ai.BehaviorTree
            _v = new ai.BehaviorTree(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, ai.BehaviorTree> { return this._dataMap; }
    getDataList(): ai.BehaviorTree[] { return this._dataList; }

    get(key: number): ai.BehaviorTree | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace common {
export class TbGlobalConfig {

    private _data: common.GlobalConfig
    constructor(_json_: any) {
        if (_json_.length != 1) throw new Error('table mode=one, but size != 1')
        this._data = new common.GlobalConfig(_json_[0])
    }

    getData(): common.GlobalConfig { return this._data; }

    /**
     * 背包容量
     */
    get  x1(): number { return this._data.x1; }
    get  x2(): number { return this._data.x2; }
    get  x3(): number { return this._data.x3; }
    get  x4(): number { return this._data.x4; }
    get  x5(): number { return this._data.x5; }
    get  x6(): number { return this._data.x6; }
    get  x7(): number[] { return this._data.x7; }

    resolve(tables:Tables)
    {
        this._data.resolve(tables)
    }
    
}
}


export namespace item {
/**
 * 道具表
 */
export class TbItem {
    private _dataMap: Map<number, item.Item>
    private _dataList: item.Item[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, item.Item>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: item.Item
            _v = new item.Item(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, item.Item> { return this._dataMap; }
    getDataList(): item.Item[] { return this._dataList; }

    get(key: number): item.Item | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace l10n {
export class TbL10NDemo {
    private _dataMap: Map<number, l10n.L10NDemo>
    private _dataList: l10n.L10NDemo[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, l10n.L10NDemo>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: l10n.L10NDemo
            _v = new l10n.L10NDemo(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, l10n.L10NDemo> { return this._dataMap; }
    getDataList(): l10n.L10NDemo[] { return this._dataList; }

    get(key: number): l10n.L10NDemo | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace l10n {
export class TbPatchDemo {
    private _dataMap: Map<number, l10n.PatchDemo>
    private _dataList: l10n.PatchDemo[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, l10n.PatchDemo>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: l10n.PatchDemo
            _v = new l10n.PatchDemo(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, l10n.PatchDemo> { return this._dataMap; }
    getDataList(): l10n.PatchDemo[] { return this._dataList; }

    get(key: number): l10n.PatchDemo | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace tag {
export class TbTestTag {
    private _dataMap: Map<number, tag.TestTag>
    private _dataList: tag.TestTag[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, tag.TestTag>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: tag.TestTag
            _v = new tag.TestTag(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, tag.TestTag> { return this._dataMap; }
    getDataList(): tag.TestTag[] { return this._dataList; }

    get(key: number): tag.TestTag | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbFullTypes {
    private _dataMap: Map<number, test.DemoType2>
    private _dataList: test.DemoType2[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.DemoType2>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.DemoType2
            _v = new test.DemoType2(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.x4, _v)
        }
    }

    getDataMap(): Map<number, test.DemoType2> { return this._dataMap; }
    getDataList(): test.DemoType2[] { return this._dataList; }

    get(key: number): test.DemoType2 | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbSingleton {

    private _data: test.DemoSingletonType
    constructor(_json_: any) {
        if (_json_.length != 1) throw new Error('table mode=one, but size != 1')
        this._data = new test.DemoSingletonType(_json_[0])
    }

    getData(): test.DemoSingletonType { return this._data; }

    get  id(): number { return this._data.id; }
    get  name(): string { return this._data.name; }
    get  date(): test.DemoDynamic { return this._data.date; }

    resolve(tables:Tables)
    {
        this._data.resolve(tables)
    }
    
}
}


export namespace test {
export class TbNotIndexList {
    private _dataList: test.NotIndexList[]
    
    constructor(_json_: any) {
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.NotIndexList
            _v = new test.NotIndexList(_json2_)
            this._dataList.push(_v)
        }
    }

    getDataList(): test.NotIndexList[] { return this._dataList }

    get(index: number): test.NotIndexList | undefined { return this._dataList[index] }
    
    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbMultiUnionIndexList {
    private _dataList: test.MultiUnionIndexList[]
    
    constructor(_json_: any) {
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.MultiUnionIndexList
            _v = new test.MultiUnionIndexList(_json2_)
            this._dataList.push(_v)
        }
    }

    getDataList(): test.MultiUnionIndexList[] { return this._dataList }

    get(index: number): test.MultiUnionIndexList | undefined { return this._dataList[index] }
    
    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbMultiIndexList {
    private _dataList: test.MultiIndexList[]
    
    constructor(_json_: any) {
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.MultiIndexList
            _v = new test.MultiIndexList(_json2_)
            this._dataList.push(_v)
        }
    }

    getDataList(): test.MultiIndexList[] { return this._dataList }

    get(index: number): test.MultiIndexList | undefined { return this._dataList[index] }
    
    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbDataFromMisc {
    private _dataMap: Map<number, test.DemoType2>
    private _dataList: test.DemoType2[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.DemoType2>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.DemoType2
            _v = new test.DemoType2(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.x4, _v)
        }
    }

    getDataMap(): Map<number, test.DemoType2> { return this._dataMap; }
    getDataList(): test.DemoType2[] { return this._dataList; }

    get(key: number): test.DemoType2 | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbMultiRowRecord {
    private _dataMap: Map<number, test.MultiRowRecord>
    private _dataList: test.MultiRowRecord[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.MultiRowRecord>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.MultiRowRecord
            _v = new test.MultiRowRecord(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.MultiRowRecord> { return this._dataMap; }
    getDataList(): test.MultiRowRecord[] { return this._dataList; }

    get(key: number): test.MultiRowRecord | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbTestMultiColumn {
    private _dataMap: Map<number, test.TestMultiColumn>
    private _dataList: test.TestMultiColumn[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.TestMultiColumn>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.TestMultiColumn
            _v = new test.TestMultiColumn(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.TestMultiColumn> { return this._dataMap; }
    getDataList(): test.TestMultiColumn[] { return this._dataList; }

    get(key: number): test.TestMultiColumn | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbMultiRowTitle {
    private _dataMap: Map<number, test.MultiRowTitle>
    private _dataList: test.MultiRowTitle[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.MultiRowTitle>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.MultiRowTitle
            _v = new test.MultiRowTitle(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.MultiRowTitle> { return this._dataMap; }
    getDataList(): test.MultiRowTitle[] { return this._dataList; }

    get(key: number): test.MultiRowTitle | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbTestNull {
    private _dataMap: Map<number, test.TestNull>
    private _dataList: test.TestNull[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.TestNull>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.TestNull
            _v = new test.TestNull(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.TestNull> { return this._dataMap; }
    getDataList(): test.TestNull[] { return this._dataList; }

    get(key: number): test.TestNull | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbDemoPrimitive {
    private _dataMap: Map<number, test.DemoPrimitiveTypesTable>
    private _dataList: test.DemoPrimitiveTypesTable[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.DemoPrimitiveTypesTable>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.DemoPrimitiveTypesTable
            _v = new test.DemoPrimitiveTypesTable(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.x4, _v)
        }
    }

    getDataMap(): Map<number, test.DemoPrimitiveTypesTable> { return this._dataMap; }
    getDataList(): test.DemoPrimitiveTypesTable[] { return this._dataList; }

    get(key: number): test.DemoPrimitiveTypesTable | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbTestString {
    private _dataMap: Map<string, test.TestString>
    private _dataList: test.TestString[]
    constructor(_json_: any) {
        this._dataMap = new Map<string, test.TestString>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.TestString
            _v = new test.TestString(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<string, test.TestString> { return this._dataMap; }
    getDataList(): test.TestString[] { return this._dataList; }

    get(key: string): test.TestString | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbDemoGroup {
    private _dataMap: Map<number, test.DemoGroup>
    private _dataList: test.DemoGroup[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.DemoGroup>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.DemoGroup
            _v = new test.DemoGroup(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.DemoGroup> { return this._dataMap; }
    getDataList(): test.DemoGroup[] { return this._dataList; }

    get(key: number): test.DemoGroup | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbDemoGroup_C {
    private _dataMap: Map<number, test.DemoGroup>
    private _dataList: test.DemoGroup[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.DemoGroup>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.DemoGroup
            _v = new test.DemoGroup(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.DemoGroup> { return this._dataMap; }
    getDataList(): test.DemoGroup[] { return this._dataList; }

    get(key: number): test.DemoGroup | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbDemoGroup_S {
    private _dataMap: Map<number, test.DemoGroup>
    private _dataList: test.DemoGroup[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.DemoGroup>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.DemoGroup
            _v = new test.DemoGroup(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.DemoGroup> { return this._dataMap; }
    getDataList(): test.DemoGroup[] { return this._dataList; }

    get(key: number): test.DemoGroup | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbDemoGroup_E {
    private _dataMap: Map<number, test.DemoGroup>
    private _dataList: test.DemoGroup[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.DemoGroup>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.DemoGroup
            _v = new test.DemoGroup(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.DemoGroup> { return this._dataMap; }
    getDataList(): test.DemoGroup[] { return this._dataList; }

    get(key: number): test.DemoGroup | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbTestGlobal {

    private _data: test.TestGlobal
    constructor(_json_: any) {
        if (_json_.length != 1) throw new Error('table mode=one, but size != 1')
        this._data = new test.TestGlobal(_json_[0])
    }

    getData(): test.TestGlobal { return this._data; }

    get  unlockEquip(): number { return this._data.unlockEquip; }
    get  unlockHero(): number { return this._data.unlockHero; }

    resolve(tables:Tables)
    {
        this._data.resolve(tables)
    }
    
}
}


export namespace test {
export class TbTestBeRef {
    private _dataMap: Map<number, test.TestBeRef>
    private _dataList: test.TestBeRef[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.TestBeRef>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.TestBeRef
            _v = new test.TestBeRef(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.TestBeRef> { return this._dataMap; }
    getDataList(): test.TestBeRef[] { return this._dataList; }

    get(key: number): test.TestBeRef | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbTestBeRef2 {
    private _dataMap: Map<number, test.TestBeRef>
    private _dataList: test.TestBeRef[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.TestBeRef>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.TestBeRef
            _v = new test.TestBeRef(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.TestBeRef> { return this._dataMap; }
    getDataList(): test.TestBeRef[] { return this._dataList; }

    get(key: number): test.TestBeRef | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbTestRef {
    private _dataMap: Map<number, test.TestRef>
    private _dataList: test.TestRef[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.TestRef>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.TestRef
            _v = new test.TestRef(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.TestRef> { return this._dataMap; }
    getDataList(): test.TestRef[] { return this._dataList; }

    get(key: number): test.TestRef | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbTestSize {
    private _dataMap: Map<number, test.TestSize>
    private _dataList: test.TestSize[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.TestSize>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.TestSize
            _v = new test.TestSize(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.TestSize> { return this._dataMap; }
    getDataList(): test.TestSize[] { return this._dataList; }

    get(key: number): test.TestSize | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbTestSet {
    private _dataMap: Map<number, test.TestSet>
    private _dataList: test.TestSet[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.TestSet>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.TestSet
            _v = new test.TestSet(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.TestSet> { return this._dataMap; }
    getDataList(): test.TestSet[] { return this._dataList; }

    get(key: number): test.TestSet | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbDetectCsvEncoding {
    private _dataMap: Map<number, test.DetectEncoding>
    private _dataList: test.DetectEncoding[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.DetectEncoding>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.DetectEncoding
            _v = new test.DetectEncoding(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.DetectEncoding> { return this._dataMap; }
    getDataList(): test.DetectEncoding[] { return this._dataList; }

    get(key: number): test.DetectEncoding | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbItem2 {
    private _dataMap: Map<number, test.ItemBase>
    private _dataList: test.ItemBase[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.ItemBase>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.ItemBase
            _v = test.ItemBase.constructorFrom(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.ItemBase> { return this._dataMap; }
    getDataList(): test.ItemBase[] { return this._dataList; }

    get(key: number): test.ItemBase | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbTestIndex {
    private _dataMap: Map<number, test.TestIndex>
    private _dataList: test.TestIndex[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.TestIndex>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.TestIndex
            _v = new test.TestIndex(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.TestIndex> { return this._dataMap; }
    getDataList(): test.TestIndex[] { return this._dataList; }

    get(key: number): test.TestIndex | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbTestMap {
    private _dataMap: Map<number, test.TestMap>
    private _dataList: test.TestMap[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.TestMap>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.TestMap
            _v = new test.TestMap(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.TestMap> { return this._dataMap; }
    getDataList(): test.TestMap[] { return this._dataList; }

    get(key: number): test.TestMap | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbExcelFromJson {
    private _dataMap: Map<number, test.ExcelFromJson>
    private _dataList: test.ExcelFromJson[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.ExcelFromJson>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.ExcelFromJson
            _v = new test.ExcelFromJson(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.x4, _v)
        }
    }

    getDataMap(): Map<number, test.ExcelFromJson> { return this._dataMap; }
    getDataList(): test.ExcelFromJson[] { return this._dataList; }

    get(key: number): test.ExcelFromJson | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbCompositeJsonTable1 {
    private _dataMap: Map<number, test.CompositeJsonTable1>
    private _dataList: test.CompositeJsonTable1[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.CompositeJsonTable1>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.CompositeJsonTable1
            _v = new test.CompositeJsonTable1(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.CompositeJsonTable1> { return this._dataMap; }
    getDataList(): test.CompositeJsonTable1[] { return this._dataList; }

    get(key: number): test.CompositeJsonTable1 | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbCompositeJsonTable2 {
    private _dataMap: Map<number, test.CompositeJsonTable2>
    private _dataList: test.CompositeJsonTable2[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.CompositeJsonTable2>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.CompositeJsonTable2
            _v = new test.CompositeJsonTable2(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.CompositeJsonTable2> { return this._dataMap; }
    getDataList(): test.CompositeJsonTable2[] { return this._dataList; }

    get(key: number): test.CompositeJsonTable2 | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbCompositeJsonTable3 {

    private _data: test.CompositeJsonTable3
    constructor(_json_: any) {
        if (_json_.length != 1) throw new Error('table mode=one, but size != 1')
        this._data = new test.CompositeJsonTable3(_json_[0])
    }

    getData(): test.CompositeJsonTable3 { return this._data; }

    get  a(): number { return this._data.a; }
    get  b(): number { return this._data.b; }

    resolve(tables:Tables)
    {
        this._data.resolve(tables)
    }
    
}
}


export namespace test {
export class TbExcelFromJsonMultiRow {
    private _dataMap: Map<number, test.ExcelFromJsonMultiRow>
    private _dataList: test.ExcelFromJsonMultiRow[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.ExcelFromJsonMultiRow>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.ExcelFromJsonMultiRow
            _v = new test.ExcelFromJsonMultiRow(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.ExcelFromJsonMultiRow> { return this._dataMap; }
    getDataList(): test.ExcelFromJsonMultiRow[] { return this._dataList; }

    get(key: number): test.ExcelFromJsonMultiRow | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbTestScriptableObject {
    private _dataMap: Map<number, test.TestScriptableObject>
    private _dataList: test.TestScriptableObject[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.TestScriptableObject>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.TestScriptableObject
            _v = new test.TestScriptableObject(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.TestScriptableObject> { return this._dataMap; }
    getDataList(): test.TestScriptableObject[] { return this._dataList; }

    get(key: number): test.TestScriptableObject | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbPath {
    private _dataMap: Map<number, test.Path>
    private _dataList: test.Path[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.Path>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.Path
            _v = new test.Path(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.Path> { return this._dataMap; }
    getDataList(): test.Path[] { return this._dataList; }

    get(key: number): test.Path | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbTestMapper {
    private _dataMap: Map<number, test.TestMapper>
    private _dataList: test.TestMapper[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.TestMapper>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.TestMapper
            _v = new test.TestMapper(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.TestMapper> { return this._dataMap; }
    getDataList(): test.TestMapper[] { return this._dataList; }

    get(key: number): test.TestMapper | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace test {
export class TbDefineFromExcel2 {
    private _dataMap: Map<number, test.DefineFromExcel2>
    private _dataList: test.DefineFromExcel2[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.DefineFromExcel2>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.DefineFromExcel2
            _v = new test.DefineFromExcel2(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.DefineFromExcel2> { return this._dataMap; }
    getDataList(): test.DefineFromExcel2[] { return this._dataList; }

    get(key: number): test.DefineFromExcel2 | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}



export class TbAutoImport1 {
    private _dataMap: Map<number, AutoImport1>
    private _dataList: AutoImport1[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, AutoImport1>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: AutoImport1
            _v = new AutoImport1(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, AutoImport1> { return this._dataMap; }
    getDataList(): AutoImport1[] { return this._dataList; }

    get(key: number): AutoImport1 | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}



export namespace test {
export class TbAutoImport2 {
    private _dataMap: Map<number, test.AutoImport2>
    private _dataList: test.AutoImport2[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, test.AutoImport2>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: test.AutoImport2
            _v = new test.AutoImport2(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, test.AutoImport2> { return this._dataMap; }
    getDataList(): test.AutoImport2[] { return this._dataList; }

    get(key: number): test.AutoImport2 | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}



type JsonLoader = (file: string) => any

export class Tables {
    private _TbBlackboard: ai.TbBlackboard
    get TbBlackboard(): ai.TbBlackboard  { return this._TbBlackboard;}
    private _TbBehaviorTree: ai.TbBehaviorTree
    get TbBehaviorTree(): ai.TbBehaviorTree  { return this._TbBehaviorTree;}
    private _TbGlobalConfig: common.TbGlobalConfig
    get TbGlobalConfig(): common.TbGlobalConfig  { return this._TbGlobalConfig;}
    private _TbItem: item.TbItem
    /**
     * 道具表
     */
    get TbItem(): item.TbItem  { return this._TbItem;}
    private _TbL10NDemo: l10n.TbL10NDemo
    get TbL10NDemo(): l10n.TbL10NDemo  { return this._TbL10NDemo;}
    private _TbPatchDemo: l10n.TbPatchDemo
    get TbPatchDemo(): l10n.TbPatchDemo  { return this._TbPatchDemo;}
    private _TbTestTag: tag.TbTestTag
    get TbTestTag(): tag.TbTestTag  { return this._TbTestTag;}
    private _TbFullTypes: test.TbFullTypes
    get TbFullTypes(): test.TbFullTypes  { return this._TbFullTypes;}
    private _TbSingleton: test.TbSingleton
    get TbSingleton(): test.TbSingleton  { return this._TbSingleton;}
    private _TbNotIndexList: test.TbNotIndexList
    get TbNotIndexList(): test.TbNotIndexList  { return this._TbNotIndexList;}
    private _TbMultiUnionIndexList: test.TbMultiUnionIndexList
    get TbMultiUnionIndexList(): test.TbMultiUnionIndexList  { return this._TbMultiUnionIndexList;}
    private _TbMultiIndexList: test.TbMultiIndexList
    get TbMultiIndexList(): test.TbMultiIndexList  { return this._TbMultiIndexList;}
    private _TbDataFromMisc: test.TbDataFromMisc
    get TbDataFromMisc(): test.TbDataFromMisc  { return this._TbDataFromMisc;}
    private _TbMultiRowRecord: test.TbMultiRowRecord
    get TbMultiRowRecord(): test.TbMultiRowRecord  { return this._TbMultiRowRecord;}
    private _TbTestMultiColumn: test.TbTestMultiColumn
    get TbTestMultiColumn(): test.TbTestMultiColumn  { return this._TbTestMultiColumn;}
    private _TbMultiRowTitle: test.TbMultiRowTitle
    get TbMultiRowTitle(): test.TbMultiRowTitle  { return this._TbMultiRowTitle;}
    private _TbTestNull: test.TbTestNull
    get TbTestNull(): test.TbTestNull  { return this._TbTestNull;}
    private _TbDemoPrimitive: test.TbDemoPrimitive
    get TbDemoPrimitive(): test.TbDemoPrimitive  { return this._TbDemoPrimitive;}
    private _TbTestString: test.TbTestString
    get TbTestString(): test.TbTestString  { return this._TbTestString;}
    private _TbDemoGroup: test.TbDemoGroup
    get TbDemoGroup(): test.TbDemoGroup  { return this._TbDemoGroup;}
    private _TbDemoGroup_C: test.TbDemoGroup_C
    get TbDemoGroup_C(): test.TbDemoGroup_C  { return this._TbDemoGroup_C;}
    private _TbDemoGroup_S: test.TbDemoGroup_S
    get TbDemoGroup_S(): test.TbDemoGroup_S  { return this._TbDemoGroup_S;}
    private _TbDemoGroup_E: test.TbDemoGroup_E
    get TbDemoGroup_E(): test.TbDemoGroup_E  { return this._TbDemoGroup_E;}
    private _TbTestGlobal: test.TbTestGlobal
    get TbTestGlobal(): test.TbTestGlobal  { return this._TbTestGlobal;}
    private _TbTestBeRef: test.TbTestBeRef
    get TbTestBeRef(): test.TbTestBeRef  { return this._TbTestBeRef;}
    private _TbTestBeRef2: test.TbTestBeRef2
    get TbTestBeRef2(): test.TbTestBeRef2  { return this._TbTestBeRef2;}
    private _TbTestRef: test.TbTestRef
    get TbTestRef(): test.TbTestRef  { return this._TbTestRef;}
    private _TbTestSize: test.TbTestSize
    get TbTestSize(): test.TbTestSize  { return this._TbTestSize;}
    private _TbTestSet: test.TbTestSet
    get TbTestSet(): test.TbTestSet  { return this._TbTestSet;}
    private _TbDetectCsvEncoding: test.TbDetectCsvEncoding
    get TbDetectCsvEncoding(): test.TbDetectCsvEncoding  { return this._TbDetectCsvEncoding;}
    private _TbItem2: test.TbItem2
    get TbItem2(): test.TbItem2  { return this._TbItem2;}
    private _TbTestIndex: test.TbTestIndex
    get TbTestIndex(): test.TbTestIndex  { return this._TbTestIndex;}
    private _TbTestMap: test.TbTestMap
    get TbTestMap(): test.TbTestMap  { return this._TbTestMap;}
    private _TbExcelFromJson: test.TbExcelFromJson
    get TbExcelFromJson(): test.TbExcelFromJson  { return this._TbExcelFromJson;}
    private _TbCompositeJsonTable1: test.TbCompositeJsonTable1
    get TbCompositeJsonTable1(): test.TbCompositeJsonTable1  { return this._TbCompositeJsonTable1;}
    private _TbCompositeJsonTable2: test.TbCompositeJsonTable2
    get TbCompositeJsonTable2(): test.TbCompositeJsonTable2  { return this._TbCompositeJsonTable2;}
    private _TbCompositeJsonTable3: test.TbCompositeJsonTable3
    get TbCompositeJsonTable3(): test.TbCompositeJsonTable3  { return this._TbCompositeJsonTable3;}
    private _TbExcelFromJsonMultiRow: test.TbExcelFromJsonMultiRow
    get TbExcelFromJsonMultiRow(): test.TbExcelFromJsonMultiRow  { return this._TbExcelFromJsonMultiRow;}
    private _TbTestScriptableObject: test.TbTestScriptableObject
    get TbTestScriptableObject(): test.TbTestScriptableObject  { return this._TbTestScriptableObject;}
    private _TbPath: test.TbPath
    get TbPath(): test.TbPath  { return this._TbPath;}
    private _TbTestMapper: test.TbTestMapper
    get TbTestMapper(): test.TbTestMapper  { return this._TbTestMapper;}
    private _TbDefineFromExcel2: test.TbDefineFromExcel2
    get TbDefineFromExcel2(): test.TbDefineFromExcel2  { return this._TbDefineFromExcel2;}
    private _TbAutoImport1: TbAutoImport1
    get TbAutoImport1(): TbAutoImport1  { return this._TbAutoImport1;}
    private _TbAutoImport2: test.TbAutoImport2
    get TbAutoImport2(): test.TbAutoImport2  { return this._TbAutoImport2;}

    constructor(loader: JsonLoader) {
        this._TbBlackboard = new ai.TbBlackboard(loader('ai_tbblackboard'))
        this._TbBehaviorTree = new ai.TbBehaviorTree(loader('ai_tbbehaviortree'))
        this._TbGlobalConfig = new common.TbGlobalConfig(loader('common_tbglobalconfig'))
        this._TbItem = new item.TbItem(loader('item_tbitem'))
        this._TbL10NDemo = new l10n.TbL10NDemo(loader('l10n_tbl10ndemo'))
        this._TbPatchDemo = new l10n.TbPatchDemo(loader('l10n_tbpatchdemo'))
        this._TbTestTag = new tag.TbTestTag(loader('tag_tbtesttag'))
        this._TbFullTypes = new test.TbFullTypes(loader('test_tbfulltypes'))
        this._TbSingleton = new test.TbSingleton(loader('test_tbsingleton'))
        this._TbNotIndexList = new test.TbNotIndexList(loader('test_tbnotindexlist'))
        this._TbMultiUnionIndexList = new test.TbMultiUnionIndexList(loader('test_tbmultiunionindexlist'))
        this._TbMultiIndexList = new test.TbMultiIndexList(loader('test_tbmultiindexlist'))
        this._TbDataFromMisc = new test.TbDataFromMisc(loader('test_tbdatafrommisc'))
        this._TbMultiRowRecord = new test.TbMultiRowRecord(loader('test_tbmultirowrecord'))
        this._TbTestMultiColumn = new test.TbTestMultiColumn(loader('test_tbtestmulticolumn'))
        this._TbMultiRowTitle = new test.TbMultiRowTitle(loader('test_tbmultirowtitle'))
        this._TbTestNull = new test.TbTestNull(loader('test_tbtestnull'))
        this._TbDemoPrimitive = new test.TbDemoPrimitive(loader('test_tbdemoprimitive'))
        this._TbTestString = new test.TbTestString(loader('test_tbteststring'))
        this._TbDemoGroup = new test.TbDemoGroup(loader('test_tbdemogroup'))
        this._TbDemoGroup_C = new test.TbDemoGroup_C(loader('test_tbdemogroup_c'))
        this._TbDemoGroup_S = new test.TbDemoGroup_S(loader('test_tbdemogroup_s'))
        this._TbDemoGroup_E = new test.TbDemoGroup_E(loader('test_tbdemogroup_e'))
        this._TbTestGlobal = new test.TbTestGlobal(loader('test_tbtestglobal'))
        this._TbTestBeRef = new test.TbTestBeRef(loader('test_tbtestberef'))
        this._TbTestBeRef2 = new test.TbTestBeRef2(loader('test_tbtestberef2'))
        this._TbTestRef = new test.TbTestRef(loader('test_tbtestref'))
        this._TbTestSize = new test.TbTestSize(loader('test_tbtestsize'))
        this._TbTestSet = new test.TbTestSet(loader('test_tbtestset'))
        this._TbDetectCsvEncoding = new test.TbDetectCsvEncoding(loader('test_tbdetectcsvencoding'))
        this._TbItem2 = new test.TbItem2(loader('test_tbitem2'))
        this._TbTestIndex = new test.TbTestIndex(loader('test_tbtestindex'))
        this._TbTestMap = new test.TbTestMap(loader('test_tbtestmap'))
        this._TbExcelFromJson = new test.TbExcelFromJson(loader('test_tbexcelfromjson'))
        this._TbCompositeJsonTable1 = new test.TbCompositeJsonTable1(loader('test_tbcompositejsontable1'))
        this._TbCompositeJsonTable2 = new test.TbCompositeJsonTable2(loader('test_tbcompositejsontable2'))
        this._TbCompositeJsonTable3 = new test.TbCompositeJsonTable3(loader('test_tbcompositejsontable3'))
        this._TbExcelFromJsonMultiRow = new test.TbExcelFromJsonMultiRow(loader('test_tbexcelfromjsonmultirow'))
        this._TbTestScriptableObject = new test.TbTestScriptableObject(loader('test_tbtestscriptableobject'))
        this._TbPath = new test.TbPath(loader('test_tbpath'))
        this._TbTestMapper = new test.TbTestMapper(loader('test_tbtestmapper'))
        this._TbDefineFromExcel2 = new test.TbDefineFromExcel2(loader('test_tbdefinefromexcel2'))
        this._TbAutoImport1 = new TbAutoImport1(loader('tbautoimport1'))
        this._TbAutoImport2 = new test.TbAutoImport2(loader('test_tbautoimport2'))

        this._TbBlackboard.resolve(this)
        this._TbBehaviorTree.resolve(this)
        this._TbGlobalConfig.resolve(this)
        this._TbItem.resolve(this)
        this._TbL10NDemo.resolve(this)
        this._TbPatchDemo.resolve(this)
        this._TbTestTag.resolve(this)
        this._TbFullTypes.resolve(this)
        this._TbSingleton.resolve(this)
        this._TbNotIndexList.resolve(this)
        this._TbMultiUnionIndexList.resolve(this)
        this._TbMultiIndexList.resolve(this)
        this._TbDataFromMisc.resolve(this)
        this._TbMultiRowRecord.resolve(this)
        this._TbTestMultiColumn.resolve(this)
        this._TbMultiRowTitle.resolve(this)
        this._TbTestNull.resolve(this)
        this._TbDemoPrimitive.resolve(this)
        this._TbTestString.resolve(this)
        this._TbDemoGroup.resolve(this)
        this._TbDemoGroup_C.resolve(this)
        this._TbDemoGroup_S.resolve(this)
        this._TbDemoGroup_E.resolve(this)
        this._TbTestGlobal.resolve(this)
        this._TbTestBeRef.resolve(this)
        this._TbTestBeRef2.resolve(this)
        this._TbTestRef.resolve(this)
        this._TbTestSize.resolve(this)
        this._TbTestSet.resolve(this)
        this._TbDetectCsvEncoding.resolve(this)
        this._TbItem2.resolve(this)
        this._TbTestIndex.resolve(this)
        this._TbTestMap.resolve(this)
        this._TbExcelFromJson.resolve(this)
        this._TbCompositeJsonTable1.resolve(this)
        this._TbCompositeJsonTable2.resolve(this)
        this._TbCompositeJsonTable3.resolve(this)
        this._TbExcelFromJsonMultiRow.resolve(this)
        this._TbTestScriptableObject.resolve(this)
        this._TbPath.resolve(this)
        this._TbTestMapper.resolve(this)
        this._TbDefineFromExcel2.resolve(this)
        this._TbAutoImport1.resolve(this)
        this._TbAutoImport2.resolve(this)
    }
}

