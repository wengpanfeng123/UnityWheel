// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestEquipment : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static TestEquipment GetRootAsTestEquipment(ByteBuffer _bb) { return GetRootAsTestEquipment(_bb, new TestEquipment()); }
  public static TestEquipment GetRootAsTestEquipment(ByteBuffer _bb, TestEquipment obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestEquipment __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Desc { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(8); }
  public cfg.TestDemoEnum Attr { get { int o = __p.__offset(10); return o != 0 ? (cfg.TestDemoEnum)__p.bb.GetInt(o + __p.bb_pos) : cfg.TestDemoEnum.TestDemoEnum_NONE; } }
  public int Value { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<cfg.TestEquipment> CreateTestEquipment(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      cfg.TestDemoEnum attr = cfg.TestDemoEnum.TestDemoEnum_NONE,
      int value = 0) {
    builder.StartTable(5);
    TestEquipment.AddValue(builder, value);
    TestEquipment.AddAttr(builder, attr);
    TestEquipment.AddDesc(builder, descOffset);
    TestEquipment.AddName(builder, nameOffset);
    TestEquipment.AddId(builder, id);
    return TestEquipment.EndTestEquipment(builder);
  }

  public static void StartTestEquipment(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(2, descOffset.Value, 0); }
  public static void AddAttr(FlatBufferBuilder builder, cfg.TestDemoEnum attr) { builder.AddInt(3, (int)attr, 0); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(4, value, 0); }
  public static Offset<cfg.TestEquipment> EndTestEquipment(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.TestEquipment>(o);
  }
}


static public class TestEquipmentVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyString(tablePos, 8 /*Desc*/, false)
      && verifier.VerifyField(tablePos, 10 /*Attr*/, 4 /*cfg.TestDemoEnum*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Value*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
