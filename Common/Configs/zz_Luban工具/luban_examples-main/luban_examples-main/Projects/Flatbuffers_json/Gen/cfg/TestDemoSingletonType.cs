// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestDemoSingletonType : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static TestDemoSingletonType GetRootAsTestDemoSingletonType(ByteBuffer _bb) { return GetRootAsTestDemoSingletonType(_bb, new TestDemoSingletonType()); }
  public static TestDemoSingletonType GetRootAsTestDemoSingletonType(ByteBuffer _bb, TestDemoSingletonType obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestDemoSingletonType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public cfg.TestDemoDynamic DateType { get { int o = __p.__offset(8); return o != 0 ? (cfg.TestDemoDynamic)__p.bb.Get(o + __p.bb_pos) : cfg.TestDemoDynamic.NONE; } }
  public TTable? Date<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(10); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public cfg.TestDemoD2 DateAsTestDemoD2() { return Date<cfg.TestDemoD2>().Value; }
  public cfg.TestDemoE1 DateAsTestDemoE1() { return Date<cfg.TestDemoE1>().Value; }
  public cfg.TestLoginRoleInfo DateAsTestLoginRoleInfo() { return Date<cfg.TestLoginRoleInfo>().Value; }
  public cfg.TestDemoD5 DateAsTestDemoD5() { return Date<cfg.TestDemoD5>().Value; }

  public static Offset<cfg.TestDemoSingletonType> CreateTestDemoSingletonType(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      cfg.TestDemoDynamic date_type = cfg.TestDemoDynamic.NONE,
      int dateOffset = 0) {
    builder.StartTable(4);
    TestDemoSingletonType.AddDate(builder, dateOffset);
    TestDemoSingletonType.AddName(builder, nameOffset);
    TestDemoSingletonType.AddId(builder, id);
    TestDemoSingletonType.AddDateType(builder, date_type);
    return TestDemoSingletonType.EndTestDemoSingletonType(builder);
  }

  public static void StartTestDemoSingletonType(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddDateType(FlatBufferBuilder builder, cfg.TestDemoDynamic dateType) { builder.AddByte(2, (byte)dateType, 0); }
  public static void AddDate(FlatBufferBuilder builder, int dateOffset) { builder.AddOffset(3, dateOffset, 0); }
  public static Offset<cfg.TestDemoSingletonType> EndTestDemoSingletonType(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 10);  // date
    return new Offset<cfg.TestDemoSingletonType>(o);
  }
}


static public class TestDemoSingletonTypeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*DateType*/, 1 /*cfg.TestDemoDynamic*/, 1, false)
      && verifier.VerifyUnion(tablePos, 8, 10 /*Date*/, cfg.TestDemoDynamicVerify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
