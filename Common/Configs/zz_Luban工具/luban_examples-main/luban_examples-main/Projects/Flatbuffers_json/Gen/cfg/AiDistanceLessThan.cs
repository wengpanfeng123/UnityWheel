// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiDistanceLessThan : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static AiDistanceLessThan GetRootAsAiDistanceLessThan(ByteBuffer _bb) { return GetRootAsAiDistanceLessThan(_bb, new AiDistanceLessThan()); }
  public static AiDistanceLessThan GetRootAsAiDistanceLessThan(ByteBuffer _bb, AiDistanceLessThan obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiDistanceLessThan __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string NodeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNodeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNodeNameArray() { return __p.__vector_as_array<byte>(6); }
  public cfg.AiEFlowAbortMode FlowAbortMode { get { int o = __p.__offset(8); return o != 0 ? (cfg.AiEFlowAbortMode)__p.bb.GetInt(o + __p.bb_pos) : cfg.AiEFlowAbortMode.AiEFlowAbortMode_NONE; } }
  public string Actor1Key { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActor1KeyBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetActor1KeyBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetActor1KeyArray() { return __p.__vector_as_array<byte>(10); }
  public string Actor2Key { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActor2KeyBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetActor2KeyBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetActor2KeyArray() { return __p.__vector_as_array<byte>(12); }
  public float Distance { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool ReverseResult { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<cfg.AiDistanceLessThan> CreateAiDistanceLessThan(FlatBufferBuilder builder,
      int id = 0,
      StringOffset node_nameOffset = default(StringOffset),
      cfg.AiEFlowAbortMode flow_abort_mode = cfg.AiEFlowAbortMode.AiEFlowAbortMode_NONE,
      StringOffset actor1_keyOffset = default(StringOffset),
      StringOffset actor2_keyOffset = default(StringOffset),
      float distance = 0.0f,
      bool reverse_result = false) {
    builder.StartTable(7);
    AiDistanceLessThan.AddDistance(builder, distance);
    AiDistanceLessThan.AddActor2Key(builder, actor2_keyOffset);
    AiDistanceLessThan.AddActor1Key(builder, actor1_keyOffset);
    AiDistanceLessThan.AddFlowAbortMode(builder, flow_abort_mode);
    AiDistanceLessThan.AddNodeName(builder, node_nameOffset);
    AiDistanceLessThan.AddId(builder, id);
    AiDistanceLessThan.AddReverseResult(builder, reverse_result);
    return AiDistanceLessThan.EndAiDistanceLessThan(builder);
  }

  public static void StartAiDistanceLessThan(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddNodeName(FlatBufferBuilder builder, StringOffset nodeNameOffset) { builder.AddOffset(1, nodeNameOffset.Value, 0); }
  public static void AddFlowAbortMode(FlatBufferBuilder builder, cfg.AiEFlowAbortMode flowAbortMode) { builder.AddInt(2, (int)flowAbortMode, 0); }
  public static void AddActor1Key(FlatBufferBuilder builder, StringOffset actor1KeyOffset) { builder.AddOffset(3, actor1KeyOffset.Value, 0); }
  public static void AddActor2Key(FlatBufferBuilder builder, StringOffset actor2KeyOffset) { builder.AddOffset(4, actor2KeyOffset.Value, 0); }
  public static void AddDistance(FlatBufferBuilder builder, float distance) { builder.AddFloat(5, distance, 0.0f); }
  public static void AddReverseResult(FlatBufferBuilder builder, bool reverseResult) { builder.AddBool(6, reverseResult, false); }
  public static Offset<cfg.AiDistanceLessThan> EndAiDistanceLessThan(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.AiDistanceLessThan>(o);
  }
}


static public class AiDistanceLessThanVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*NodeName*/, false)
      && verifier.VerifyField(tablePos, 8 /*FlowAbortMode*/, 4 /*cfg.AiEFlowAbortMode*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Actor1Key*/, false)
      && verifier.VerifyString(tablePos, 12 /*Actor2Key*/, false)
      && verifier.VerifyField(tablePos, 14 /*Distance*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*ReverseResult*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
