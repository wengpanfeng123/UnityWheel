// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiUeSetDefaultFocus : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static AiUeSetDefaultFocus GetRootAsAiUeSetDefaultFocus(ByteBuffer _bb) { return GetRootAsAiUeSetDefaultFocus(_bb, new AiUeSetDefaultFocus()); }
  public static AiUeSetDefaultFocus GetRootAsAiUeSetDefaultFocus(ByteBuffer _bb, AiUeSetDefaultFocus obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiUeSetDefaultFocus __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string NodeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNodeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNodeNameArray() { return __p.__vector_as_array<byte>(6); }
  public string KeyboardKey { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyboardKeyBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetKeyboardKeyBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetKeyboardKeyArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<cfg.AiUeSetDefaultFocus> CreateAiUeSetDefaultFocus(FlatBufferBuilder builder,
      int id = 0,
      StringOffset node_nameOffset = default(StringOffset),
      StringOffset keyboard_keyOffset = default(StringOffset)) {
    builder.StartTable(3);
    AiUeSetDefaultFocus.AddKeyboardKey(builder, keyboard_keyOffset);
    AiUeSetDefaultFocus.AddNodeName(builder, node_nameOffset);
    AiUeSetDefaultFocus.AddId(builder, id);
    return AiUeSetDefaultFocus.EndAiUeSetDefaultFocus(builder);
  }

  public static void StartAiUeSetDefaultFocus(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddNodeName(FlatBufferBuilder builder, StringOffset nodeNameOffset) { builder.AddOffset(1, nodeNameOffset.Value, 0); }
  public static void AddKeyboardKey(FlatBufferBuilder builder, StringOffset keyboardKeyOffset) { builder.AddOffset(2, keyboardKeyOffset.Value, 0); }
  public static Offset<cfg.AiUeSetDefaultFocus> EndAiUeSetDefaultFocus(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.AiUeSetDefaultFocus>(o);
  }
}


static public class AiUeSetDefaultFocusVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*NodeName*/, false)
      && verifier.VerifyString(tablePos, 8 /*KeyboardKey*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
