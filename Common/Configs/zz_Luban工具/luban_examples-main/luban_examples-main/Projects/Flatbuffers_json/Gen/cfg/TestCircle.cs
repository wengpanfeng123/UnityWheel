// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestCircle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static TestCircle GetRootAsTestCircle(ByteBuffer _bb) { return GetRootAsTestCircle(_bb, new TestCircle()); }
  public static TestCircle GetRootAsTestCircle(ByteBuffer _bb, TestCircle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestCircle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Radius { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<cfg.TestCircle> CreateTestCircle(FlatBufferBuilder builder,
      float radius = 0.0f) {
    builder.StartTable(1);
    TestCircle.AddRadius(builder, radius);
    return TestCircle.EndTestCircle(builder);
  }

  public static void StartTestCircle(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRadius(FlatBufferBuilder builder, float radius) { builder.AddFloat(0, radius, 0.0f); }
  public static Offset<cfg.TestCircle> EndTestCircle(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.TestCircle>(o);
  }
}


static public class TestCircleVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Radius*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
