// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestTestBeRef : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static TestTestBeRef GetRootAsTestTestBeRef(ByteBuffer _bb) { return GetRootAsTestTestBeRef(_bb, new TestTestBeRef()); }
  public static TestTestBeRef GetRootAsTestTestBeRef(ByteBuffer _bb, TestTestBeRef obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestTestBeRef __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Count { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<cfg.TestTestBeRef> CreateTestTestBeRef(FlatBufferBuilder builder,
      int id = 0,
      int count = 0) {
    builder.StartTable(2);
    TestTestBeRef.AddCount(builder, count);
    TestTestBeRef.AddId(builder, id);
    return TestTestBeRef.EndTestTestBeRef(builder);
  }

  public static void StartTestTestBeRef(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddCount(FlatBufferBuilder builder, int count) { builder.AddInt(1, count, 0); }
  public static Offset<cfg.TestTestBeRef> EndTestTestBeRef(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.TestTestBeRef>(o);
  }
}


static public class TestTestBeRefVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Count*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
