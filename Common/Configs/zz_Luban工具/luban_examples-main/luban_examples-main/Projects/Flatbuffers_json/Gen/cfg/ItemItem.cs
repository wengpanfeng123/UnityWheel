// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ItemItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static ItemItem GetRootAsItemItem(ByteBuffer _bb) { return GetRootAsItemItem(_bb, new ItemItem()); }
  public static ItemItem GetRootAsItemItem(ByteBuffer _bb, ItemItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public cfg.ItemEMajorType MajorType { get { int o = __p.__offset(8); return o != 0 ? (cfg.ItemEMajorType)__p.bb.GetInt(o + __p.bb_pos) : cfg.ItemEMajorType.__GENERATE_DEFAULT_VALUE; } }
  public cfg.ItemEMinorType MinorType { get { int o = __p.__offset(10); return o != 0 ? (cfg.ItemEMinorType)__p.bb.GetInt(o + __p.bb_pos) : cfg.ItemEMinorType.__GENERATE_DEFAULT_VALUE; } }
  public int MaxPileNum { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public cfg.ItemEItemQuality Quality { get { int o = __p.__offset(14); return o != 0 ? (cfg.ItemEItemQuality)__p.bb.GetInt(o + __p.bb_pos) : cfg.ItemEItemQuality.ItemEItemQuality_WHITE; } }
  public string Icon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(16); }
  public string IconBackgroud { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBackgroudBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIconBackgroudBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIconBackgroudArray() { return __p.__vector_as_array<byte>(18); }
  public string IconMask { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconMaskBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIconMaskBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIconMaskArray() { return __p.__vector_as_array<byte>(20); }
  public string Desc { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(22); }
  public int ShowOrder { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<cfg.ItemItem> CreateItemItem(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      cfg.ItemEMajorType major_type = cfg.ItemEMajorType.__GENERATE_DEFAULT_VALUE,
      cfg.ItemEMinorType minor_type = cfg.ItemEMinorType.__GENERATE_DEFAULT_VALUE,
      int max_pile_num = 0,
      cfg.ItemEItemQuality quality = cfg.ItemEItemQuality.ItemEItemQuality_WHITE,
      StringOffset iconOffset = default(StringOffset),
      StringOffset icon_backgroudOffset = default(StringOffset),
      StringOffset icon_maskOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      int show_order = 0) {
    builder.StartTable(11);
    ItemItem.AddShowOrder(builder, show_order);
    ItemItem.AddDesc(builder, descOffset);
    ItemItem.AddIconMask(builder, icon_maskOffset);
    ItemItem.AddIconBackgroud(builder, icon_backgroudOffset);
    ItemItem.AddIcon(builder, iconOffset);
    ItemItem.AddQuality(builder, quality);
    ItemItem.AddMaxPileNum(builder, max_pile_num);
    ItemItem.AddMinorType(builder, minor_type);
    ItemItem.AddMajorType(builder, major_type);
    ItemItem.AddName(builder, nameOffset);
    ItemItem.AddId(builder, id);
    return ItemItem.EndItemItem(builder);
  }

  public static void StartItemItem(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddMajorType(FlatBufferBuilder builder, cfg.ItemEMajorType majorType) { builder.AddInt(2, (int)majorType, 0); }
  public static void AddMinorType(FlatBufferBuilder builder, cfg.ItemEMinorType minorType) { builder.AddInt(3, (int)minorType, 0); }
  public static void AddMaxPileNum(FlatBufferBuilder builder, int maxPileNum) { builder.AddInt(4, maxPileNum, 0); }
  public static void AddQuality(FlatBufferBuilder builder, cfg.ItemEItemQuality quality) { builder.AddInt(5, (int)quality, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(6, iconOffset.Value, 0); }
  public static void AddIconBackgroud(FlatBufferBuilder builder, StringOffset iconBackgroudOffset) { builder.AddOffset(7, iconBackgroudOffset.Value, 0); }
  public static void AddIconMask(FlatBufferBuilder builder, StringOffset iconMaskOffset) { builder.AddOffset(8, iconMaskOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(9, descOffset.Value, 0); }
  public static void AddShowOrder(FlatBufferBuilder builder, int showOrder) { builder.AddInt(10, showOrder, 0); }
  public static Offset<cfg.ItemItem> EndItemItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.ItemItem>(o);
  }
}


static public class ItemItemVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*MajorType*/, 4 /*cfg.ItemEMajorType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*MinorType*/, 4 /*cfg.ItemEMinorType*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*MaxPileNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Quality*/, 4 /*cfg.ItemEItemQuality*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 18 /*IconBackgroud*/, false)
      && verifier.VerifyString(tablePos, 20 /*IconMask*/, false)
      && verifier.VerifyString(tablePos, 22 /*Desc*/, false)
      && verifier.VerifyField(tablePos, 24 /*ShowOrder*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
