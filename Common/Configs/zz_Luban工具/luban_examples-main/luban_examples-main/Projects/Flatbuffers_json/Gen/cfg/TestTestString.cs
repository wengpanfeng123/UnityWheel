// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestTestString : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static TestTestString GetRootAsTestTestString(ByteBuffer _bb) { return GetRootAsTestTestString(_bb, new TestTestString()); }
  public static TestTestString GetRootAsTestTestString(ByteBuffer _bb, TestTestString obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestTestString __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string S1 { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetS1Bytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetS1Bytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetS1Array() { return __p.__vector_as_array<byte>(6); }
  public cfg.TestCompactString? Cs1 { get { int o = __p.__offset(8); return o != 0 ? (cfg.TestCompactString?)(new cfg.TestCompactString()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public cfg.TestCompactString? Cs2 { get { int o = __p.__offset(10); return o != 0 ? (cfg.TestCompactString?)(new cfg.TestCompactString()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<cfg.TestTestString> CreateTestTestString(FlatBufferBuilder builder,
      int id = 0,
      StringOffset s1Offset = default(StringOffset),
      Offset<cfg.TestCompactString> cs1Offset = default(Offset<cfg.TestCompactString>),
      Offset<cfg.TestCompactString> cs2Offset = default(Offset<cfg.TestCompactString>)) {
    builder.StartTable(4);
    TestTestString.AddCs2(builder, cs2Offset);
    TestTestString.AddCs1(builder, cs1Offset);
    TestTestString.AddS1(builder, s1Offset);
    TestTestString.AddId(builder, id);
    return TestTestString.EndTestTestString(builder);
  }

  public static void StartTestTestString(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddS1(FlatBufferBuilder builder, StringOffset s1Offset) { builder.AddOffset(1, s1Offset.Value, 0); }
  public static void AddCs1(FlatBufferBuilder builder, Offset<cfg.TestCompactString> cs1Offset) { builder.AddOffset(2, cs1Offset.Value, 0); }
  public static void AddCs2(FlatBufferBuilder builder, Offset<cfg.TestCompactString> cs2Offset) { builder.AddOffset(3, cs2Offset.Value, 0); }
  public static Offset<cfg.TestTestString> EndTestTestString(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 8);  // cs1
    builder.Required(o, 10);  // cs2
    return new Offset<cfg.TestTestString>(o);
  }
}


static public class TestTestStringVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*S1*/, false)
      && verifier.VerifyTable(tablePos, 8 /*Cs1*/, cfg.TestCompactStringVerify.Verify, true)
      && verifier.VerifyTable(tablePos, 10 /*Cs2*/, cfg.TestCompactStringVerify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
