// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestTestScriptableObject : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static TestTestScriptableObject GetRootAsTestTestScriptableObject(ByteBuffer _bb) { return GetRootAsTestTestScriptableObject(_bb, new TestTestScriptableObject()); }
  public static TestTestScriptableObject GetRootAsTestTestScriptableObject(ByteBuffer _bb, TestTestScriptableObject obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestTestScriptableObject __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(6); }
  public float Rate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Num { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public cfg.vector2? V2 { get { int o = __p.__offset(12); return o != 0 ? (cfg.vector2?)(new cfg.vector2()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public cfg.vector3? V3 { get { int o = __p.__offset(14); return o != 0 ? (cfg.vector3?)(new cfg.vector3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public cfg.vector4? V4 { get { int o = __p.__offset(16); return o != 0 ? (cfg.vector4?)(new cfg.vector4()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<cfg.TestTestScriptableObject> CreateTestTestScriptableObject(FlatBufferBuilder builder,
      int id = 0,
      StringOffset descOffset = default(StringOffset),
      float rate = 0.0f,
      int num = 0,
      Offset<cfg.vector2> v2Offset = default(Offset<cfg.vector2>),
      Offset<cfg.vector3> v3Offset = default(Offset<cfg.vector3>),
      Offset<cfg.vector4> v4Offset = default(Offset<cfg.vector4>)) {
    builder.StartTable(7);
    TestTestScriptableObject.AddV4(builder, v4Offset);
    TestTestScriptableObject.AddV3(builder, v3Offset);
    TestTestScriptableObject.AddV2(builder, v2Offset);
    TestTestScriptableObject.AddNum(builder, num);
    TestTestScriptableObject.AddRate(builder, rate);
    TestTestScriptableObject.AddDesc(builder, descOffset);
    TestTestScriptableObject.AddId(builder, id);
    return TestTestScriptableObject.EndTestTestScriptableObject(builder);
  }

  public static void StartTestTestScriptableObject(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(1, descOffset.Value, 0); }
  public static void AddRate(FlatBufferBuilder builder, float rate) { builder.AddFloat(2, rate, 0.0f); }
  public static void AddNum(FlatBufferBuilder builder, int num) { builder.AddInt(3, num, 0); }
  public static void AddV2(FlatBufferBuilder builder, Offset<cfg.vector2> v2Offset) { builder.AddOffset(4, v2Offset.Value, 0); }
  public static void AddV3(FlatBufferBuilder builder, Offset<cfg.vector3> v3Offset) { builder.AddOffset(5, v3Offset.Value, 0); }
  public static void AddV4(FlatBufferBuilder builder, Offset<cfg.vector4> v4Offset) { builder.AddOffset(6, v4Offset.Value, 0); }
  public static Offset<cfg.TestTestScriptableObject> EndTestTestScriptableObject(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 12);  // v2
    builder.Required(o, 14);  // v3
    builder.Required(o, 16);  // v4
    return new Offset<cfg.TestTestScriptableObject>(o);
  }
}


static public class TestTestScriptableObjectVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Desc*/, false)
      && verifier.VerifyField(tablePos, 8 /*Rate*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Num*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 12 /*V2*/, cfg.vector2Verify.Verify, true)
      && verifier.VerifyTable(tablePos, 14 /*V3*/, cfg.vector3Verify.Verify, true)
      && verifier.VerifyTable(tablePos, 16 /*V4*/, cfg.vector4Verify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
