// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DefineFromExcel2 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static DefineFromExcel2 GetRootAsDefineFromExcel2(ByteBuffer _bb) { return GetRootAsDefineFromExcel2(_bb, new DefineFromExcel2()); }
  public static DefineFromExcel2 GetRootAsDefineFromExcel2(ByteBuffer _bb, DefineFromExcel2 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DefineFromExcel2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool X1 { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long X5 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float X6 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int X8 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string X10 { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetX10Bytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetX10Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetX10Array() { return __p.__vector_as_array<byte>(14); }
  public cfg.TestDemoEnum X13 { get { int o = __p.__offset(16); return o != 0 ? (cfg.TestDemoEnum)__p.bb.GetInt(o + __p.bb_pos) : cfg.TestDemoEnum.TestDemoEnum_NONE; } }
  public cfg.TestDemoFlag X132 { get { int o = __p.__offset(18); return o != 0 ? (cfg.TestDemoFlag)__p.bb.GetInt(o + __p.bb_pos) : cfg.TestDemoFlag.__GENERATE_DEFAULT_VALUE; } }
  public cfg.TestDemoDynamic X14Type { get { int o = __p.__offset(20); return o != 0 ? (cfg.TestDemoDynamic)__p.bb.Get(o + __p.bb_pos) : cfg.TestDemoDynamic.NONE; } }
  public TTable? X14<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(22); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public cfg.TestDemoD2 X14AsTestDemoD2() { return X14<cfg.TestDemoD2>().Value; }
  public cfg.TestDemoE1 X14AsTestDemoE1() { return X14<cfg.TestDemoE1>().Value; }
  public cfg.TestLoginRoleInfo X14AsTestLoginRoleInfo() { return X14<cfg.TestLoginRoleInfo>().Value; }
  public cfg.TestDemoD5 X14AsTestDemoD5() { return X14<cfg.TestDemoD5>().Value; }
  public cfg.TestShape X15Type { get { int o = __p.__offset(24); return o != 0 ? (cfg.TestShape)__p.bb.Get(o + __p.bb_pos) : cfg.TestShape.NONE; } }
  public TTable? X15<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(26); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public cfg.TestCircle X15AsTestCircle() { return X15<cfg.TestCircle>().Value; }
  public cfg.Test2Rectangle X15AsTest2Rectangle() { return X15<cfg.Test2Rectangle>().Value; }
  public cfg.vector2? V2 { get { int o = __p.__offset(28); return o != 0 ? (cfg.vector2?)(new cfg.vector2()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public long T1 { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int K1(int j) { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int K1Length { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetK1Bytes() { return __p.__vector_as_span<int>(32, 4); }
#else
  public ArraySegment<byte>? GetK1Bytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public int[] GetK1Array() { return __p.__vector_as_array<int>(32); }
  public int K2(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int K2Length { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetK2Bytes() { return __p.__vector_as_span<int>(34, 4); }
#else
  public ArraySegment<byte>? GetK2Bytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public int[] GetK2Array() { return __p.__vector_as_array<int>(34); }
  public cfg.KeyValue_int32_int32? K8(int j) { int o = __p.__offset(36); return o != 0 ? (cfg.KeyValue_int32_int32?)(new cfg.KeyValue_int32_int32()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int K8Length { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  public cfg.TestDemoE2? K9(int j) { int o = __p.__offset(38); return o != 0 ? (cfg.TestDemoE2?)(new cfg.TestDemoE2()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int K9Length { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  public cfg.vector3? K10(int j) { int o = __p.__offset(40); return o != 0 ? (cfg.vector3?)(new cfg.vector3()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int K10Length { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  public cfg.vector4? K11(int j) { int o = __p.__offset(42); return o != 0 ? (cfg.vector4?)(new cfg.vector4()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int K11Length { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<cfg.DefineFromExcel2> CreateDefineFromExcel2(FlatBufferBuilder builder,
      int id = 0,
      bool x1 = false,
      long x5 = 0,
      float x6 = 0.0f,
      int x8 = 0,
      StringOffset x10Offset = default(StringOffset),
      cfg.TestDemoEnum x13 = cfg.TestDemoEnum.TestDemoEnum_NONE,
      cfg.TestDemoFlag x13_2 = cfg.TestDemoFlag.__GENERATE_DEFAULT_VALUE,
      cfg.TestDemoDynamic x14_type = cfg.TestDemoDynamic.NONE,
      int x14Offset = 0,
      cfg.TestShape x15_type = cfg.TestShape.NONE,
      int x15Offset = 0,
      Offset<cfg.vector2> v2Offset = default(Offset<cfg.vector2>),
      long t1 = 0,
      VectorOffset k1Offset = default(VectorOffset),
      VectorOffset k2Offset = default(VectorOffset),
      VectorOffset k8Offset = default(VectorOffset),
      VectorOffset k9Offset = default(VectorOffset),
      VectorOffset k10Offset = default(VectorOffset),
      VectorOffset k11Offset = default(VectorOffset)) {
    builder.StartTable(20);
    DefineFromExcel2.AddT1(builder, t1);
    DefineFromExcel2.AddX5(builder, x5);
    DefineFromExcel2.AddK11(builder, k11Offset);
    DefineFromExcel2.AddK10(builder, k10Offset);
    DefineFromExcel2.AddK9(builder, k9Offset);
    DefineFromExcel2.AddK8(builder, k8Offset);
    DefineFromExcel2.AddK2(builder, k2Offset);
    DefineFromExcel2.AddK1(builder, k1Offset);
    DefineFromExcel2.AddV2(builder, v2Offset);
    DefineFromExcel2.AddX15(builder, x15Offset);
    DefineFromExcel2.AddX14(builder, x14Offset);
    DefineFromExcel2.AddX132(builder, x13_2);
    DefineFromExcel2.AddX13(builder, x13);
    DefineFromExcel2.AddX10(builder, x10Offset);
    DefineFromExcel2.AddX8(builder, x8);
    DefineFromExcel2.AddX6(builder, x6);
    DefineFromExcel2.AddId(builder, id);
    DefineFromExcel2.AddX15Type(builder, x15_type);
    DefineFromExcel2.AddX14Type(builder, x14_type);
    DefineFromExcel2.AddX1(builder, x1);
    return DefineFromExcel2.EndDefineFromExcel2(builder);
  }

  public static void StartDefineFromExcel2(FlatBufferBuilder builder) { builder.StartTable(20); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddX1(FlatBufferBuilder builder, bool x1) { builder.AddBool(1, x1, false); }
  public static void AddX5(FlatBufferBuilder builder, long x5) { builder.AddLong(2, x5, 0); }
  public static void AddX6(FlatBufferBuilder builder, float x6) { builder.AddFloat(3, x6, 0.0f); }
  public static void AddX8(FlatBufferBuilder builder, int x8) { builder.AddInt(4, x8, 0); }
  public static void AddX10(FlatBufferBuilder builder, StringOffset x10Offset) { builder.AddOffset(5, x10Offset.Value, 0); }
  public static void AddX13(FlatBufferBuilder builder, cfg.TestDemoEnum x13) { builder.AddInt(6, (int)x13, 0); }
  public static void AddX132(FlatBufferBuilder builder, cfg.TestDemoFlag x132) { builder.AddInt(7, (int)x132, 0); }
  public static void AddX14Type(FlatBufferBuilder builder, cfg.TestDemoDynamic x14Type) { builder.AddByte(8, (byte)x14Type, 0); }
  public static void AddX14(FlatBufferBuilder builder, int x14Offset) { builder.AddOffset(9, x14Offset, 0); }
  public static void AddX15Type(FlatBufferBuilder builder, cfg.TestShape x15Type) { builder.AddByte(10, (byte)x15Type, 0); }
  public static void AddX15(FlatBufferBuilder builder, int x15Offset) { builder.AddOffset(11, x15Offset, 0); }
  public static void AddV2(FlatBufferBuilder builder, Offset<cfg.vector2> v2Offset) { builder.AddOffset(12, v2Offset.Value, 0); }
  public static void AddT1(FlatBufferBuilder builder, long t1) { builder.AddLong(13, t1, 0); }
  public static void AddK1(FlatBufferBuilder builder, VectorOffset k1Offset) { builder.AddOffset(14, k1Offset.Value, 0); }
  public static VectorOffset CreateK1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateK1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateK1VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateK1VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartK1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddK2(FlatBufferBuilder builder, VectorOffset k2Offset) { builder.AddOffset(15, k2Offset.Value, 0); }
  public static VectorOffset CreateK2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateK2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateK2VectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateK2VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartK2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddK8(FlatBufferBuilder builder, VectorOffset k8Offset) { builder.AddOffset(16, k8Offset.Value, 0); }
  public static VectorOffset CreateK8Vector(FlatBufferBuilder builder, Offset<cfg.KeyValue_int32_int32>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateK8VectorBlock(FlatBufferBuilder builder, Offset<cfg.KeyValue_int32_int32>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateK8VectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<cfg.KeyValue_int32_int32>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateK8VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<cfg.KeyValue_int32_int32>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartK8Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddK9(FlatBufferBuilder builder, VectorOffset k9Offset) { builder.AddOffset(17, k9Offset.Value, 0); }
  public static VectorOffset CreateK9Vector(FlatBufferBuilder builder, Offset<cfg.TestDemoE2>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateK9VectorBlock(FlatBufferBuilder builder, Offset<cfg.TestDemoE2>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateK9VectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<cfg.TestDemoE2>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateK9VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<cfg.TestDemoE2>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartK9Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddK10(FlatBufferBuilder builder, VectorOffset k10Offset) { builder.AddOffset(18, k10Offset.Value, 0); }
  public static VectorOffset CreateK10Vector(FlatBufferBuilder builder, Offset<cfg.vector3>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateK10VectorBlock(FlatBufferBuilder builder, Offset<cfg.vector3>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateK10VectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<cfg.vector3>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateK10VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<cfg.vector3>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartK10Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddK11(FlatBufferBuilder builder, VectorOffset k11Offset) { builder.AddOffset(19, k11Offset.Value, 0); }
  public static VectorOffset CreateK11Vector(FlatBufferBuilder builder, Offset<cfg.vector4>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateK11VectorBlock(FlatBufferBuilder builder, Offset<cfg.vector4>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateK11VectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<cfg.vector4>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateK11VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<cfg.vector4>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartK11Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<cfg.DefineFromExcel2> EndDefineFromExcel2(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 22);  // x14
    builder.Required(o, 26);  // x15
    builder.Required(o, 28);  // v2
    builder.Required(o, 32);  // k1
    builder.Required(o, 34);  // k2
    builder.Required(o, 36);  // k8
    builder.Required(o, 38);  // k9
    builder.Required(o, 40);  // k10
    builder.Required(o, 42);  // k11
    return new Offset<cfg.DefineFromExcel2>(o);
  }
}


static public class DefineFromExcel2Verify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*X1*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*X5*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*X6*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*X8*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*X10*/, false)
      && verifier.VerifyField(tablePos, 16 /*X13*/, 4 /*cfg.TestDemoEnum*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*X132*/, 4 /*cfg.TestDemoFlag*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*X14Type*/, 1 /*cfg.TestDemoDynamic*/, 1, false)
      && verifier.VerifyUnion(tablePos, 20, 22 /*X14*/, cfg.TestDemoDynamicVerify.Verify, true)
      && verifier.VerifyField(tablePos, 24 /*X15Type*/, 1 /*cfg.TestShape*/, 1, false)
      && verifier.VerifyUnion(tablePos, 24, 26 /*X15*/, cfg.TestShapeVerify.Verify, true)
      && verifier.VerifyTable(tablePos, 28 /*V2*/, cfg.vector2Verify.Verify, true)
      && verifier.VerifyField(tablePos, 30 /*T1*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 32 /*K1*/, 4 /*int*/, true)
      && verifier.VerifyVectorOfData(tablePos, 34 /*K2*/, 4 /*int*/, true)
      && verifier.VerifyVectorOfTables(tablePos, 36 /*K8*/, cfg.KeyValue_int32_int32Verify.Verify, true)
      && verifier.VerifyVectorOfTables(tablePos, 38 /*K9*/, cfg.TestDemoE2Verify.Verify, true)
      && verifier.VerifyVectorOfTables(tablePos, 40 /*K10*/, cfg.vector3Verify.Verify, true)
      && verifier.VerifyVectorOfTables(tablePos, 42 /*K11*/, cfg.vector4Verify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
