// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Test2Rectangle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static Test2Rectangle GetRootAsTest2Rectangle(ByteBuffer _bb) { return GetRootAsTest2Rectangle(_bb, new Test2Rectangle()); }
  public static Test2Rectangle GetRootAsTest2Rectangle(ByteBuffer _bb, Test2Rectangle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Test2Rectangle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Width { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Height { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<cfg.Test2Rectangle> CreateTest2Rectangle(FlatBufferBuilder builder,
      float width = 0.0f,
      float height = 0.0f) {
    builder.StartTable(2);
    Test2Rectangle.AddHeight(builder, height);
    Test2Rectangle.AddWidth(builder, width);
    return Test2Rectangle.EndTest2Rectangle(builder);
  }

  public static void StartTest2Rectangle(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddWidth(FlatBufferBuilder builder, float width) { builder.AddFloat(0, width, 0.0f); }
  public static void AddHeight(FlatBufferBuilder builder, float height) { builder.AddFloat(1, height, 0.0f); }
  public static Offset<cfg.Test2Rectangle> EndTest2Rectangle(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.Test2Rectangle>(o);
  }
}


static public class Test2RectangleVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Width*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Height*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
