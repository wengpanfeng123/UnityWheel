// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiSimpleParallel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static AiSimpleParallel GetRootAsAiSimpleParallel(ByteBuffer _bb) { return GetRootAsAiSimpleParallel(_bb, new AiSimpleParallel()); }
  public static AiSimpleParallel GetRootAsAiSimpleParallel(ByteBuffer _bb, AiSimpleParallel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiSimpleParallel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string NodeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNodeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNodeNameArray() { return __p.__vector_as_array<byte>(6); }
  public cfg.AiDecorator DecoratorsType(int j) { int o = __p.__offset(8); return o != 0 ? (cfg.AiDecorator)__p.bb.Get(__p.__vector(o) + j * 1) : (cfg.AiDecorator)0; }
  public int DecoratorsTypeLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<cfg.AiDecorator> GetDecoratorsTypeBytes() { return __p.__vector_as_span<cfg.AiDecorator>(8, 1); }
#else
  public ArraySegment<byte>? GetDecoratorsTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public cfg.AiDecorator[] GetDecoratorsTypeArray() { int o = __p.__offset(8); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); cfg.AiDecorator[] a = new cfg.AiDecorator[l]; for (int i = 0; i < l; i++) { a[i] = (cfg.AiDecorator)__p.bb.Get(p + i * 1); } return a; }
  public TTable? Decorators<TTable>(int j) where TTable : struct, IFlatbufferObject { int o = __p.__offset(10); return o != 0 ? (TTable?)__p.__union<TTable>(__p.__vector(o) + j * 4) : null; }
  public int DecoratorsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public cfg.AiService ServicesType(int j) { int o = __p.__offset(12); return o != 0 ? (cfg.AiService)__p.bb.Get(__p.__vector(o) + j * 1) : (cfg.AiService)0; }
  public int ServicesTypeLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<cfg.AiService> GetServicesTypeBytes() { return __p.__vector_as_span<cfg.AiService>(12, 1); }
#else
  public ArraySegment<byte>? GetServicesTypeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public cfg.AiService[] GetServicesTypeArray() { int o = __p.__offset(12); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); cfg.AiService[] a = new cfg.AiService[l]; for (int i = 0; i < l; i++) { a[i] = (cfg.AiService)__p.bb.Get(p + i * 1); } return a; }
  public TTable? Services<TTable>(int j) where TTable : struct, IFlatbufferObject { int o = __p.__offset(14); return o != 0 ? (TTable?)__p.__union<TTable>(__p.__vector(o) + j * 4) : null; }
  public int ServicesLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public cfg.AiEFinishMode FinishMode { get { int o = __p.__offset(16); return o != 0 ? (cfg.AiEFinishMode)__p.bb.GetInt(o + __p.bb_pos) : cfg.AiEFinishMode.AiEFinishMode_IMMEDIATE; } }
  public cfg.AiTask MainTaskType { get { int o = __p.__offset(18); return o != 0 ? (cfg.AiTask)__p.bb.Get(o + __p.bb_pos) : cfg.AiTask.NONE; } }
  public TTable? MainTask<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(20); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public cfg.AiUeWait MainTaskAsAiUeWait() { return MainTask<cfg.AiUeWait>().Value; }
  public cfg.AiUeWaitBlackboardTime MainTaskAsAiUeWaitBlackboardTime() { return MainTask<cfg.AiUeWaitBlackboardTime>().Value; }
  public cfg.AiMoveToTarget MainTaskAsAiMoveToTarget() { return MainTask<cfg.AiMoveToTarget>().Value; }
  public cfg.AiChooseSkill MainTaskAsAiChooseSkill() { return MainTask<cfg.AiChooseSkill>().Value; }
  public cfg.AiMoveToRandomLocation MainTaskAsAiMoveToRandomLocation() { return MainTask<cfg.AiMoveToRandomLocation>().Value; }
  public cfg.AiMoveToLocation MainTaskAsAiMoveToLocation() { return MainTask<cfg.AiMoveToLocation>().Value; }
  public cfg.AiDebugPrint MainTaskAsAiDebugPrint() { return MainTask<cfg.AiDebugPrint>().Value; }
  public cfg.AiFlowNode BackgroundNodeType { get { int o = __p.__offset(22); return o != 0 ? (cfg.AiFlowNode)__p.bb.Get(o + __p.bb_pos) : cfg.AiFlowNode.NONE; } }
  public TTable? BackgroundNode<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(24); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public cfg.AiSequence BackgroundNodeAsAiSequence() { return BackgroundNode<cfg.AiSequence>().Value; }
  public cfg.AiSelector BackgroundNodeAsAiSelector() { return BackgroundNode<cfg.AiSelector>().Value; }
  public cfg.AiSimpleParallel BackgroundNodeAsAiSimpleParallel() { return BackgroundNode<cfg.AiSimpleParallel>().Value; }
  public cfg.AiUeWait BackgroundNodeAsAiUeWait() { return BackgroundNode<cfg.AiUeWait>().Value; }
  public cfg.AiUeWaitBlackboardTime BackgroundNodeAsAiUeWaitBlackboardTime() { return BackgroundNode<cfg.AiUeWaitBlackboardTime>().Value; }
  public cfg.AiMoveToTarget BackgroundNodeAsAiMoveToTarget() { return BackgroundNode<cfg.AiMoveToTarget>().Value; }
  public cfg.AiChooseSkill BackgroundNodeAsAiChooseSkill() { return BackgroundNode<cfg.AiChooseSkill>().Value; }
  public cfg.AiMoveToRandomLocation BackgroundNodeAsAiMoveToRandomLocation() { return BackgroundNode<cfg.AiMoveToRandomLocation>().Value; }
  public cfg.AiMoveToLocation BackgroundNodeAsAiMoveToLocation() { return BackgroundNode<cfg.AiMoveToLocation>().Value; }
  public cfg.AiDebugPrint BackgroundNodeAsAiDebugPrint() { return BackgroundNode<cfg.AiDebugPrint>().Value; }

  public static Offset<cfg.AiSimpleParallel> CreateAiSimpleParallel(FlatBufferBuilder builder,
      int id = 0,
      StringOffset node_nameOffset = default(StringOffset),
      VectorOffset decorators_typeOffset = default(VectorOffset),
      VectorOffset decoratorsOffset = default(VectorOffset),
      VectorOffset services_typeOffset = default(VectorOffset),
      VectorOffset servicesOffset = default(VectorOffset),
      cfg.AiEFinishMode finish_mode = cfg.AiEFinishMode.AiEFinishMode_IMMEDIATE,
      cfg.AiTask main_task_type = cfg.AiTask.NONE,
      int main_taskOffset = 0,
      cfg.AiFlowNode background_node_type = cfg.AiFlowNode.NONE,
      int background_nodeOffset = 0) {
    builder.StartTable(11);
    AiSimpleParallel.AddBackgroundNode(builder, background_nodeOffset);
    AiSimpleParallel.AddMainTask(builder, main_taskOffset);
    AiSimpleParallel.AddFinishMode(builder, finish_mode);
    AiSimpleParallel.AddServices(builder, servicesOffset);
    AiSimpleParallel.AddServicesType(builder, services_typeOffset);
    AiSimpleParallel.AddDecorators(builder, decoratorsOffset);
    AiSimpleParallel.AddDecoratorsType(builder, decorators_typeOffset);
    AiSimpleParallel.AddNodeName(builder, node_nameOffset);
    AiSimpleParallel.AddId(builder, id);
    AiSimpleParallel.AddBackgroundNodeType(builder, background_node_type);
    AiSimpleParallel.AddMainTaskType(builder, main_task_type);
    return AiSimpleParallel.EndAiSimpleParallel(builder);
  }

  public static void StartAiSimpleParallel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddNodeName(FlatBufferBuilder builder, StringOffset nodeNameOffset) { builder.AddOffset(1, nodeNameOffset.Value, 0); }
  public static void AddDecoratorsType(FlatBufferBuilder builder, VectorOffset decoratorsTypeOffset) { builder.AddOffset(2, decoratorsTypeOffset.Value, 0); }
  public static VectorOffset CreateDecoratorsTypeVector(FlatBufferBuilder builder, cfg.AiDecorator[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte((byte)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDecoratorsTypeVectorBlock(FlatBufferBuilder builder, cfg.AiDecorator[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDecoratorsTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<cfg.AiDecorator> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDecoratorsTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<cfg.AiDecorator>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDecoratorsTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddDecorators(FlatBufferBuilder builder, VectorOffset decoratorsOffset) { builder.AddOffset(3, decoratorsOffset.Value, 0); }
  public static VectorOffset CreateDecoratorsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDecoratorsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDecoratorsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDecoratorsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDecoratorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddServicesType(FlatBufferBuilder builder, VectorOffset servicesTypeOffset) { builder.AddOffset(4, servicesTypeOffset.Value, 0); }
  public static VectorOffset CreateServicesTypeVector(FlatBufferBuilder builder, cfg.AiService[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte((byte)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateServicesTypeVectorBlock(FlatBufferBuilder builder, cfg.AiService[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateServicesTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<cfg.AiService> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateServicesTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<cfg.AiService>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartServicesTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddServices(FlatBufferBuilder builder, VectorOffset servicesOffset) { builder.AddOffset(5, servicesOffset.Value, 0); }
  public static VectorOffset CreateServicesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateServicesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateServicesVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateServicesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartServicesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFinishMode(FlatBufferBuilder builder, cfg.AiEFinishMode finishMode) { builder.AddInt(6, (int)finishMode, 0); }
  public static void AddMainTaskType(FlatBufferBuilder builder, cfg.AiTask mainTaskType) { builder.AddByte(7, (byte)mainTaskType, 0); }
  public static void AddMainTask(FlatBufferBuilder builder, int mainTaskOffset) { builder.AddOffset(8, mainTaskOffset, 0); }
  public static void AddBackgroundNodeType(FlatBufferBuilder builder, cfg.AiFlowNode backgroundNodeType) { builder.AddByte(9, (byte)backgroundNodeType, 0); }
  public static void AddBackgroundNode(FlatBufferBuilder builder, int backgroundNodeOffset) { builder.AddOffset(10, backgroundNodeOffset, 0); }
  public static Offset<cfg.AiSimpleParallel> EndAiSimpleParallel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 8);  // decorators_type
    builder.Required(o, 10);  // decorators
    builder.Required(o, 12);  // services_type
    builder.Required(o, 14);  // services
    builder.Required(o, 20);  // main_task
    builder.Required(o, 24);  // background_node
    return new Offset<cfg.AiSimpleParallel>(o);
  }
}


static public class AiSimpleParallelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*NodeName*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*DecoratorsType*/, 1 /*cfg.AiDecorator*/, true)
      && verifier.VerifyVectorOfData(tablePos, 12 /*ServicesType*/, 1 /*cfg.AiService*/, true)
      && verifier.VerifyField(tablePos, 16 /*FinishMode*/, 4 /*cfg.AiEFinishMode*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*MainTaskType*/, 1 /*cfg.AiTask*/, 1, false)
      && verifier.VerifyUnion(tablePos, 18, 20 /*MainTask*/, cfg.AiTaskVerify.Verify, true)
      && verifier.VerifyField(tablePos, 22 /*BackgroundNodeType*/, 1 /*cfg.AiFlowNode*/, 1, false)
      && verifier.VerifyUnion(tablePos, 22, 24 /*BackgroundNode*/, cfg.AiFlowNodeVerify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
