// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestTestGlobal : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static TestTestGlobal GetRootAsTestTestGlobal(ByteBuffer _bb) { return GetRootAsTestTestGlobal(_bb, new TestTestGlobal()); }
  public static TestTestGlobal GetRootAsTestTestGlobal(ByteBuffer _bb, TestTestGlobal obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestTestGlobal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int UnlockEquip { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockHero { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<cfg.TestTestGlobal> CreateTestTestGlobal(FlatBufferBuilder builder,
      int unlock_equip = 0,
      int unlock_hero = 0) {
    builder.StartTable(2);
    TestTestGlobal.AddUnlockHero(builder, unlock_hero);
    TestTestGlobal.AddUnlockEquip(builder, unlock_equip);
    return TestTestGlobal.EndTestTestGlobal(builder);
  }

  public static void StartTestTestGlobal(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddUnlockEquip(FlatBufferBuilder builder, int unlockEquip) { builder.AddInt(0, unlockEquip, 0); }
  public static void AddUnlockHero(FlatBufferBuilder builder, int unlockHero) { builder.AddInt(1, unlockHero, 0); }
  public static Offset<cfg.TestTestGlobal> EndTestTestGlobal(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.TestTestGlobal>(o);
  }
}


static public class TestTestGlobalVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UnlockEquip*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*UnlockHero*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
