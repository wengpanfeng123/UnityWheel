// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiUpdateDailyBehaviorProps : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static AiUpdateDailyBehaviorProps GetRootAsAiUpdateDailyBehaviorProps(ByteBuffer _bb) { return GetRootAsAiUpdateDailyBehaviorProps(_bb, new AiUpdateDailyBehaviorProps()); }
  public static AiUpdateDailyBehaviorProps GetRootAsAiUpdateDailyBehaviorProps(ByteBuffer _bb, AiUpdateDailyBehaviorProps obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiUpdateDailyBehaviorProps __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string NodeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNodeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNodeNameArray() { return __p.__vector_as_array<byte>(6); }
  public string SatietyKey { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSatietyKeyBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSatietyKeyBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSatietyKeyArray() { return __p.__vector_as_array<byte>(8); }
  public string EnergyKey { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnergyKeyBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetEnergyKeyBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetEnergyKeyArray() { return __p.__vector_as_array<byte>(10); }
  public string MoodKey { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMoodKeyBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMoodKeyBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMoodKeyArray() { return __p.__vector_as_array<byte>(12); }
  public string SatietyLowerThresholdKey { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSatietyLowerThresholdKeyBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetSatietyLowerThresholdKeyBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSatietyLowerThresholdKeyArray() { return __p.__vector_as_array<byte>(14); }
  public string SatietyUpperThresholdKey { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSatietyUpperThresholdKeyBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetSatietyUpperThresholdKeyBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetSatietyUpperThresholdKeyArray() { return __p.__vector_as_array<byte>(16); }
  public string EnergyLowerThresholdKey { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnergyLowerThresholdKeyBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetEnergyLowerThresholdKeyBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetEnergyLowerThresholdKeyArray() { return __p.__vector_as_array<byte>(18); }
  public string EnergyUpperThresholdKey { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnergyUpperThresholdKeyBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetEnergyUpperThresholdKeyBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetEnergyUpperThresholdKeyArray() { return __p.__vector_as_array<byte>(20); }
  public string MoodLowerThresholdKey { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMoodLowerThresholdKeyBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetMoodLowerThresholdKeyBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetMoodLowerThresholdKeyArray() { return __p.__vector_as_array<byte>(22); }
  public string MoodUpperThresholdKey { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMoodUpperThresholdKeyBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetMoodUpperThresholdKeyBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetMoodUpperThresholdKeyArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<cfg.AiUpdateDailyBehaviorProps> CreateAiUpdateDailyBehaviorProps(FlatBufferBuilder builder,
      int id = 0,
      StringOffset node_nameOffset = default(StringOffset),
      StringOffset satiety_keyOffset = default(StringOffset),
      StringOffset energy_keyOffset = default(StringOffset),
      StringOffset mood_keyOffset = default(StringOffset),
      StringOffset satiety_lower_threshold_keyOffset = default(StringOffset),
      StringOffset satiety_upper_threshold_keyOffset = default(StringOffset),
      StringOffset energy_lower_threshold_keyOffset = default(StringOffset),
      StringOffset energy_upper_threshold_keyOffset = default(StringOffset),
      StringOffset mood_lower_threshold_keyOffset = default(StringOffset),
      StringOffset mood_upper_threshold_keyOffset = default(StringOffset)) {
    builder.StartTable(11);
    AiUpdateDailyBehaviorProps.AddMoodUpperThresholdKey(builder, mood_upper_threshold_keyOffset);
    AiUpdateDailyBehaviorProps.AddMoodLowerThresholdKey(builder, mood_lower_threshold_keyOffset);
    AiUpdateDailyBehaviorProps.AddEnergyUpperThresholdKey(builder, energy_upper_threshold_keyOffset);
    AiUpdateDailyBehaviorProps.AddEnergyLowerThresholdKey(builder, energy_lower_threshold_keyOffset);
    AiUpdateDailyBehaviorProps.AddSatietyUpperThresholdKey(builder, satiety_upper_threshold_keyOffset);
    AiUpdateDailyBehaviorProps.AddSatietyLowerThresholdKey(builder, satiety_lower_threshold_keyOffset);
    AiUpdateDailyBehaviorProps.AddMoodKey(builder, mood_keyOffset);
    AiUpdateDailyBehaviorProps.AddEnergyKey(builder, energy_keyOffset);
    AiUpdateDailyBehaviorProps.AddSatietyKey(builder, satiety_keyOffset);
    AiUpdateDailyBehaviorProps.AddNodeName(builder, node_nameOffset);
    AiUpdateDailyBehaviorProps.AddId(builder, id);
    return AiUpdateDailyBehaviorProps.EndAiUpdateDailyBehaviorProps(builder);
  }

  public static void StartAiUpdateDailyBehaviorProps(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddNodeName(FlatBufferBuilder builder, StringOffset nodeNameOffset) { builder.AddOffset(1, nodeNameOffset.Value, 0); }
  public static void AddSatietyKey(FlatBufferBuilder builder, StringOffset satietyKeyOffset) { builder.AddOffset(2, satietyKeyOffset.Value, 0); }
  public static void AddEnergyKey(FlatBufferBuilder builder, StringOffset energyKeyOffset) { builder.AddOffset(3, energyKeyOffset.Value, 0); }
  public static void AddMoodKey(FlatBufferBuilder builder, StringOffset moodKeyOffset) { builder.AddOffset(4, moodKeyOffset.Value, 0); }
  public static void AddSatietyLowerThresholdKey(FlatBufferBuilder builder, StringOffset satietyLowerThresholdKeyOffset) { builder.AddOffset(5, satietyLowerThresholdKeyOffset.Value, 0); }
  public static void AddSatietyUpperThresholdKey(FlatBufferBuilder builder, StringOffset satietyUpperThresholdKeyOffset) { builder.AddOffset(6, satietyUpperThresholdKeyOffset.Value, 0); }
  public static void AddEnergyLowerThresholdKey(FlatBufferBuilder builder, StringOffset energyLowerThresholdKeyOffset) { builder.AddOffset(7, energyLowerThresholdKeyOffset.Value, 0); }
  public static void AddEnergyUpperThresholdKey(FlatBufferBuilder builder, StringOffset energyUpperThresholdKeyOffset) { builder.AddOffset(8, energyUpperThresholdKeyOffset.Value, 0); }
  public static void AddMoodLowerThresholdKey(FlatBufferBuilder builder, StringOffset moodLowerThresholdKeyOffset) { builder.AddOffset(9, moodLowerThresholdKeyOffset.Value, 0); }
  public static void AddMoodUpperThresholdKey(FlatBufferBuilder builder, StringOffset moodUpperThresholdKeyOffset) { builder.AddOffset(10, moodUpperThresholdKeyOffset.Value, 0); }
  public static Offset<cfg.AiUpdateDailyBehaviorProps> EndAiUpdateDailyBehaviorProps(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.AiUpdateDailyBehaviorProps>(o);
  }
}


static public class AiUpdateDailyBehaviorPropsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*NodeName*/, false)
      && verifier.VerifyString(tablePos, 8 /*SatietyKey*/, false)
      && verifier.VerifyString(tablePos, 10 /*EnergyKey*/, false)
      && verifier.VerifyString(tablePos, 12 /*MoodKey*/, false)
      && verifier.VerifyString(tablePos, 14 /*SatietyLowerThresholdKey*/, false)
      && verifier.VerifyString(tablePos, 16 /*SatietyUpperThresholdKey*/, false)
      && verifier.VerifyString(tablePos, 18 /*EnergyLowerThresholdKey*/, false)
      && verifier.VerifyString(tablePos, 20 /*EnergyUpperThresholdKey*/, false)
      && verifier.VerifyString(tablePos, 22 /*MoodLowerThresholdKey*/, false)
      && verifier.VerifyString(tablePos, 24 /*MoodUpperThresholdKey*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
