// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiBlackboardKey : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static AiBlackboardKey GetRootAsAiBlackboardKey(ByteBuffer _bb) { return GetRootAsAiBlackboardKey(_bb, new AiBlackboardKey()); }
  public static AiBlackboardKey GetRootAsAiBlackboardKey(ByteBuffer _bb, AiBlackboardKey obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiBlackboardKey __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(6); }
  public bool IsStatic { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public cfg.AiEKeyType Type { get { int o = __p.__offset(10); return o != 0 ? (cfg.AiEKeyType)__p.bb.GetInt(o + __p.bb_pos) : cfg.AiEKeyType.__GENERATE_DEFAULT_VALUE; } }
  public string TypeClassName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeClassNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTypeClassNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTypeClassNameArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<cfg.AiBlackboardKey> CreateAiBlackboardKey(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      bool is_static = false,
      cfg.AiEKeyType type = cfg.AiEKeyType.__GENERATE_DEFAULT_VALUE,
      StringOffset type_class_nameOffset = default(StringOffset)) {
    builder.StartTable(5);
    AiBlackboardKey.AddTypeClassName(builder, type_class_nameOffset);
    AiBlackboardKey.AddType(builder, type);
    AiBlackboardKey.AddDesc(builder, descOffset);
    AiBlackboardKey.AddName(builder, nameOffset);
    AiBlackboardKey.AddIsStatic(builder, is_static);
    return AiBlackboardKey.EndAiBlackboardKey(builder);
  }

  public static void StartAiBlackboardKey(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(1, descOffset.Value, 0); }
  public static void AddIsStatic(FlatBufferBuilder builder, bool isStatic) { builder.AddBool(2, isStatic, false); }
  public static void AddType(FlatBufferBuilder builder, cfg.AiEKeyType type) { builder.AddInt(3, (int)type, 0); }
  public static void AddTypeClassName(FlatBufferBuilder builder, StringOffset typeClassNameOffset) { builder.AddOffset(4, typeClassNameOffset.Value, 0); }
  public static Offset<cfg.AiBlackboardKey> EndAiBlackboardKey(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.AiBlackboardKey>(o);
  }
}


static public class AiBlackboardKeyVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Name*/, false)
      && verifier.VerifyString(tablePos, 6 /*Desc*/, false)
      && verifier.VerifyField(tablePos, 8 /*IsStatic*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*Type*/, 4 /*cfg.AiEKeyType*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*TypeClassName*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
