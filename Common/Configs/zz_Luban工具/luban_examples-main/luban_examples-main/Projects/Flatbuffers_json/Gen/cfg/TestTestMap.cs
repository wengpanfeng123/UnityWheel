// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestTestMap : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static TestTestMap GetRootAsTestTestMap(ByteBuffer _bb) { return GetRootAsTestTestMap(_bb, new TestTestMap()); }
  public static TestTestMap GetRootAsTestTestMap(ByteBuffer _bb, TestTestMap obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestTestMap __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public cfg.KeyValue_int32_int32? X1(int j) { int o = __p.__offset(6); return o != 0 ? (cfg.KeyValue_int32_int32?)(new cfg.KeyValue_int32_int32()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int X1Length { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public cfg.KeyValue_int64_int32? X2(int j) { int o = __p.__offset(8); return o != 0 ? (cfg.KeyValue_int64_int32?)(new cfg.KeyValue_int64_int32()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int X2Length { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public cfg.KeyValue_string_int32? X3(int j) { int o = __p.__offset(10); return o != 0 ? (cfg.KeyValue_string_int32?)(new cfg.KeyValue_string_int32()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int X3Length { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public cfg.KeyValue_TestDemoEnum_int32? X4(int j) { int o = __p.__offset(12); return o != 0 ? (cfg.KeyValue_TestDemoEnum_int32?)(new cfg.KeyValue_TestDemoEnum_int32()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int X4Length { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<cfg.TestTestMap> CreateTestTestMap(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset x1Offset = default(VectorOffset),
      VectorOffset x2Offset = default(VectorOffset),
      VectorOffset x3Offset = default(VectorOffset),
      VectorOffset x4Offset = default(VectorOffset)) {
    builder.StartTable(5);
    TestTestMap.AddX4(builder, x4Offset);
    TestTestMap.AddX3(builder, x3Offset);
    TestTestMap.AddX2(builder, x2Offset);
    TestTestMap.AddX1(builder, x1Offset);
    TestTestMap.AddId(builder, id);
    return TestTestMap.EndTestTestMap(builder);
  }

  public static void StartTestTestMap(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddX1(FlatBufferBuilder builder, VectorOffset x1Offset) { builder.AddOffset(1, x1Offset.Value, 0); }
  public static VectorOffset CreateX1Vector(FlatBufferBuilder builder, Offset<cfg.KeyValue_int32_int32>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateX1VectorBlock(FlatBufferBuilder builder, Offset<cfg.KeyValue_int32_int32>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateX1VectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<cfg.KeyValue_int32_int32>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateX1VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<cfg.KeyValue_int32_int32>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartX1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddX2(FlatBufferBuilder builder, VectorOffset x2Offset) { builder.AddOffset(2, x2Offset.Value, 0); }
  public static VectorOffset CreateX2Vector(FlatBufferBuilder builder, Offset<cfg.KeyValue_int64_int32>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateX2VectorBlock(FlatBufferBuilder builder, Offset<cfg.KeyValue_int64_int32>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateX2VectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<cfg.KeyValue_int64_int32>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateX2VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<cfg.KeyValue_int64_int32>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartX2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddX3(FlatBufferBuilder builder, VectorOffset x3Offset) { builder.AddOffset(3, x3Offset.Value, 0); }
  public static VectorOffset CreateX3Vector(FlatBufferBuilder builder, Offset<cfg.KeyValue_string_int32>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateX3VectorBlock(FlatBufferBuilder builder, Offset<cfg.KeyValue_string_int32>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateX3VectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<cfg.KeyValue_string_int32>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateX3VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<cfg.KeyValue_string_int32>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartX3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddX4(FlatBufferBuilder builder, VectorOffset x4Offset) { builder.AddOffset(4, x4Offset.Value, 0); }
  public static VectorOffset CreateX4Vector(FlatBufferBuilder builder, Offset<cfg.KeyValue_TestDemoEnum_int32>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateX4VectorBlock(FlatBufferBuilder builder, Offset<cfg.KeyValue_TestDemoEnum_int32>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateX4VectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<cfg.KeyValue_TestDemoEnum_int32>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateX4VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<cfg.KeyValue_TestDemoEnum_int32>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartX4Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<cfg.TestTestMap> EndTestTestMap(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // x1
    builder.Required(o, 8);  // x2
    builder.Required(o, 10);  // x3
    builder.Required(o, 12);  // x4
    return new Offset<cfg.TestTestMap>(o);
  }
}


static public class TestTestMapVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*X1*/, cfg.KeyValue_int32_int32Verify.Verify, true)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*X2*/, cfg.KeyValue_int64_int32Verify.Verify, true)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*X3*/, cfg.KeyValue_string_int32Verify.Verify, true)
      && verifier.VerifyVectorOfTables(tablePos, 12 /*X4*/, cfg.KeyValue_TestDemoEnum_int32Verify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
