// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestTestMapper : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static TestTestMapper GetRootAsTestTestMapper(ByteBuffer _bb) { return GetRootAsTestTestMapper(_bb, new TestTestMapper()); }
  public static TestTestMapper GetRootAsTestTestMapper(ByteBuffer _bb, TestTestMapper obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestTestMapper __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public cfg.AudioType AudioType { get { int o = __p.__offset(6); return o != 0 ? (cfg.AudioType)__p.bb.GetInt(o + __p.bb_pos) : cfg.AudioType.AudioType_UNKNOWN; } }
  public cfg.vector2? V2 { get { int o = __p.__offset(8); return o != 0 ? (cfg.vector2?)(new cfg.vector2()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<cfg.TestTestMapper> CreateTestTestMapper(FlatBufferBuilder builder,
      int id = 0,
      cfg.AudioType audio_type = cfg.AudioType.AudioType_UNKNOWN,
      Offset<cfg.vector2> v2Offset = default(Offset<cfg.vector2>)) {
    builder.StartTable(3);
    TestTestMapper.AddV2(builder, v2Offset);
    TestTestMapper.AddAudioType(builder, audio_type);
    TestTestMapper.AddId(builder, id);
    return TestTestMapper.EndTestTestMapper(builder);
  }

  public static void StartTestTestMapper(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddAudioType(FlatBufferBuilder builder, cfg.AudioType audioType) { builder.AddInt(1, (int)audioType, 0); }
  public static void AddV2(FlatBufferBuilder builder, Offset<cfg.vector2> v2Offset) { builder.AddOffset(2, v2Offset.Value, 0); }
  public static Offset<cfg.TestTestMapper> EndTestTestMapper(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 8);  // v2
    return new Offset<cfg.TestTestMapper>(o);
  }
}


static public class TestTestMapperVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*AudioType*/, 4 /*cfg.AudioType*/, 4, false)
      && verifier.VerifyTable(tablePos, 8 /*V2*/, cfg.vector2Verify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
