// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiBlackboard : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static AiBlackboard GetRootAsAiBlackboard(ByteBuffer _bb) { return GetRootAsAiBlackboard(_bb, new AiBlackboard()); }
  public static AiBlackboard GetRootAsAiBlackboard(ByteBuffer _bb, AiBlackboard obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiBlackboard __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(6); }
  public string ParentName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParentNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetParentNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetParentNameArray() { return __p.__vector_as_array<byte>(8); }
  public cfg.AiBlackboardKey? Keys(int j) { int o = __p.__offset(10); return o != 0 ? (cfg.AiBlackboardKey?)(new cfg.AiBlackboardKey()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int KeysLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<cfg.AiBlackboard> CreateAiBlackboard(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      StringOffset parent_nameOffset = default(StringOffset),
      VectorOffset keysOffset = default(VectorOffset)) {
    builder.StartTable(4);
    AiBlackboard.AddKeys(builder, keysOffset);
    AiBlackboard.AddParentName(builder, parent_nameOffset);
    AiBlackboard.AddDesc(builder, descOffset);
    AiBlackboard.AddName(builder, nameOffset);
    return AiBlackboard.EndAiBlackboard(builder);
  }

  public static void StartAiBlackboard(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(1, descOffset.Value, 0); }
  public static void AddParentName(FlatBufferBuilder builder, StringOffset parentNameOffset) { builder.AddOffset(2, parentNameOffset.Value, 0); }
  public static void AddKeys(FlatBufferBuilder builder, VectorOffset keysOffset) { builder.AddOffset(3, keysOffset.Value, 0); }
  public static VectorOffset CreateKeysVector(FlatBufferBuilder builder, Offset<cfg.AiBlackboardKey>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, Offset<cfg.AiBlackboardKey>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<cfg.AiBlackboardKey>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<cfg.AiBlackboardKey>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<cfg.AiBlackboard> EndAiBlackboard(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 10);  // keys
    return new Offset<cfg.AiBlackboard>(o);
  }
}


static public class AiBlackboardVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Name*/, false)
      && verifier.VerifyString(tablePos, 6 /*Desc*/, false)
      && verifier.VerifyString(tablePos, 8 /*ParentName*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*Keys*/, cfg.AiBlackboardKeyVerify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
