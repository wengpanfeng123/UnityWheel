// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestTestRow : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static TestTestRow GetRootAsTestTestRow(ByteBuffer _bb) { return GetRootAsTestTestRow(_bb, new TestTestRow()); }
  public static TestTestRow GetRootAsTestTestRow(ByteBuffer _bb, TestTestRow obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestTestRow __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Y { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Z { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetZBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetZBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetZArray() { return __p.__vector_as_array<byte>(8); }
  public cfg.TestTest3? A { get { int o = __p.__offset(10); return o != 0 ? (cfg.TestTest3?)(new cfg.TestTest3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int B(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetBBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetBArray() { return __p.__vector_as_array<int>(12); }

  public static Offset<cfg.TestTestRow> CreateTestTestRow(FlatBufferBuilder builder,
      int x = 0,
      bool y = false,
      StringOffset zOffset = default(StringOffset),
      Offset<cfg.TestTest3> aOffset = default(Offset<cfg.TestTest3>),
      VectorOffset bOffset = default(VectorOffset)) {
    builder.StartTable(5);
    TestTestRow.AddB(builder, bOffset);
    TestTestRow.AddA(builder, aOffset);
    TestTestRow.AddZ(builder, zOffset);
    TestTestRow.AddX(builder, x);
    TestTestRow.AddY(builder, y);
    return TestTestRow.EndTestTestRow(builder);
  }

  public static void StartTestTestRow(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddX(FlatBufferBuilder builder, int x) { builder.AddInt(0, x, 0); }
  public static void AddY(FlatBufferBuilder builder, bool y) { builder.AddBool(1, y, false); }
  public static void AddZ(FlatBufferBuilder builder, StringOffset zOffset) { builder.AddOffset(2, zOffset.Value, 0); }
  public static void AddA(FlatBufferBuilder builder, Offset<cfg.TestTest3> aOffset) { builder.AddOffset(3, aOffset.Value, 0); }
  public static void AddB(FlatBufferBuilder builder, VectorOffset bOffset) { builder.AddOffset(4, bOffset.Value, 0); }
  public static VectorOffset CreateBVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<cfg.TestTestRow> EndTestTestRow(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 10);  // a
    builder.Required(o, 12);  // b
    return new Offset<cfg.TestTestRow>(o);
  }
}


static public class TestTestRowVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*X*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Y*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 8 /*Z*/, false)
      && verifier.VerifyTable(tablePos, 10 /*A*/, cfg.TestTest3Verify.Verify, true)
      && verifier.VerifyVectorOfData(tablePos, 12 /*B*/, 4 /*int*/, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
