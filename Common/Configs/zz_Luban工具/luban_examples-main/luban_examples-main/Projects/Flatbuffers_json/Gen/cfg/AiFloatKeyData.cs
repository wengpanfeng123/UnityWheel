// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiFloatKeyData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static AiFloatKeyData GetRootAsAiFloatKeyData(ByteBuffer _bb) { return GetRootAsAiFloatKeyData(_bb, new AiFloatKeyData()); }
  public static AiFloatKeyData GetRootAsAiFloatKeyData(ByteBuffer _bb, AiFloatKeyData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiFloatKeyData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<cfg.AiFloatKeyData> CreateAiFloatKeyData(FlatBufferBuilder builder,
      float value = 0.0f) {
    builder.StartTable(1);
    AiFloatKeyData.AddValue(builder, value);
    return AiFloatKeyData.EndAiFloatKeyData(builder);
  }

  public static void StartAiFloatKeyData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(0, value, 0.0f); }
  public static Offset<cfg.AiFloatKeyData> EndAiFloatKeyData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.AiFloatKeyData>(o);
  }
}


static public class AiFloatKeyDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Value*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
