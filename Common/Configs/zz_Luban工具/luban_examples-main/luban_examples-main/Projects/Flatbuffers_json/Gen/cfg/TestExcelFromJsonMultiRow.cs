// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestExcelFromJsonMultiRow : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static TestExcelFromJsonMultiRow GetRootAsTestExcelFromJsonMultiRow(ByteBuffer _bb) { return GetRootAsTestExcelFromJsonMultiRow(_bb, new TestExcelFromJsonMultiRow()); }
  public static TestExcelFromJsonMultiRow GetRootAsTestExcelFromJsonMultiRow(ByteBuffer _bb, TestExcelFromJsonMultiRow obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestExcelFromJsonMultiRow __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int X { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public cfg.TestTestRow? Items(int j) { int o = __p.__offset(8); return o != 0 ? (cfg.TestTestRow?)(new cfg.TestTestRow()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ItemsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<cfg.TestExcelFromJsonMultiRow> CreateTestExcelFromJsonMultiRow(FlatBufferBuilder builder,
      int id = 0,
      int x = 0,
      VectorOffset itemsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    TestExcelFromJsonMultiRow.AddItems(builder, itemsOffset);
    TestExcelFromJsonMultiRow.AddX(builder, x);
    TestExcelFromJsonMultiRow.AddId(builder, id);
    return TestExcelFromJsonMultiRow.EndTestExcelFromJsonMultiRow(builder);
  }

  public static void StartTestExcelFromJsonMultiRow(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddX(FlatBufferBuilder builder, int x) { builder.AddInt(1, x, 0); }
  public static void AddItems(FlatBufferBuilder builder, VectorOffset itemsOffset) { builder.AddOffset(2, itemsOffset.Value, 0); }
  public static VectorOffset CreateItemsVector(FlatBufferBuilder builder, Offset<cfg.TestTestRow>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateItemsVectorBlock(FlatBufferBuilder builder, Offset<cfg.TestTestRow>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<cfg.TestTestRow>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<cfg.TestTestRow>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<cfg.TestExcelFromJsonMultiRow> EndTestExcelFromJsonMultiRow(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 8);  // items
    return new Offset<cfg.TestExcelFromJsonMultiRow>(o);
  }
}


static public class TestExcelFromJsonMultiRowVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*X*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*Items*/, cfg.TestTestRowVerify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
