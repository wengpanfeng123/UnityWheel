// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestTestMultiColumn : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static TestTestMultiColumn GetRootAsTestTestMultiColumn(ByteBuffer _bb) { return GetRootAsTestTestMultiColumn(_bb, new TestTestMultiColumn()); }
  public static TestTestMultiColumn GetRootAsTestTestMultiColumn(ByteBuffer _bb, TestTestMultiColumn obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestTestMultiColumn __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public cfg.TestFoo? A { get { int o = __p.__offset(6); return o != 0 ? (cfg.TestFoo?)(new cfg.TestFoo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public cfg.TestFoo? B { get { int o = __p.__offset(8); return o != 0 ? (cfg.TestFoo?)(new cfg.TestFoo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public cfg.TestFoo? C { get { int o = __p.__offset(10); return o != 0 ? (cfg.TestFoo?)(new cfg.TestFoo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<cfg.TestTestMultiColumn> CreateTestTestMultiColumn(FlatBufferBuilder builder,
      int id = 0,
      Offset<cfg.TestFoo> aOffset = default(Offset<cfg.TestFoo>),
      Offset<cfg.TestFoo> bOffset = default(Offset<cfg.TestFoo>),
      Offset<cfg.TestFoo> cOffset = default(Offset<cfg.TestFoo>)) {
    builder.StartTable(4);
    TestTestMultiColumn.AddC(builder, cOffset);
    TestTestMultiColumn.AddB(builder, bOffset);
    TestTestMultiColumn.AddA(builder, aOffset);
    TestTestMultiColumn.AddId(builder, id);
    return TestTestMultiColumn.EndTestTestMultiColumn(builder);
  }

  public static void StartTestTestMultiColumn(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddA(FlatBufferBuilder builder, Offset<cfg.TestFoo> aOffset) { builder.AddOffset(1, aOffset.Value, 0); }
  public static void AddB(FlatBufferBuilder builder, Offset<cfg.TestFoo> bOffset) { builder.AddOffset(2, bOffset.Value, 0); }
  public static void AddC(FlatBufferBuilder builder, Offset<cfg.TestFoo> cOffset) { builder.AddOffset(3, cOffset.Value, 0); }
  public static Offset<cfg.TestTestMultiColumn> EndTestTestMultiColumn(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // a
    builder.Required(o, 8);  // b
    builder.Required(o, 10);  // c
    return new Offset<cfg.TestTestMultiColumn>(o);
  }
}


static public class TestTestMultiColumnVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 6 /*A*/, cfg.TestFooVerify.Verify, true)
      && verifier.VerifyTable(tablePos, 8 /*B*/, cfg.TestFooVerify.Verify, true)
      && verifier.VerifyTable(tablePos, 10 /*C*/, cfg.TestFooVerify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
