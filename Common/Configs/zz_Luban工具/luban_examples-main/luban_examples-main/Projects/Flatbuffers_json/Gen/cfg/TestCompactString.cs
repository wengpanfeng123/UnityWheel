// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestCompactString : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static TestCompactString GetRootAsTestCompactString(ByteBuffer _bb) { return GetRootAsTestCompactString(_bb, new TestCompactString()); }
  public static TestCompactString GetRootAsTestCompactString(ByteBuffer _bb, TestCompactString obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestCompactString __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string S2 { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetS2Bytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetS2Bytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetS2Array() { return __p.__vector_as_array<byte>(6); }
  public string S3 { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetS3Bytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetS3Bytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetS3Array() { return __p.__vector_as_array<byte>(8); }

  public static Offset<cfg.TestCompactString> CreateTestCompactString(FlatBufferBuilder builder,
      int id = 0,
      StringOffset s2Offset = default(StringOffset),
      StringOffset s3Offset = default(StringOffset)) {
    builder.StartTable(3);
    TestCompactString.AddS3(builder, s3Offset);
    TestCompactString.AddS2(builder, s2Offset);
    TestCompactString.AddId(builder, id);
    return TestCompactString.EndTestCompactString(builder);
  }

  public static void StartTestCompactString(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddS2(FlatBufferBuilder builder, StringOffset s2Offset) { builder.AddOffset(1, s2Offset.Value, 0); }
  public static void AddS3(FlatBufferBuilder builder, StringOffset s3Offset) { builder.AddOffset(2, s3Offset.Value, 0); }
  public static Offset<cfg.TestCompactString> EndTestCompactString(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.TestCompactString>(o);
  }
}


static public class TestCompactStringVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*S2*/, false)
      && verifier.VerifyString(tablePos, 8 /*S3*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
