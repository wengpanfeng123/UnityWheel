// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiBinaryOperator : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static AiBinaryOperator GetRootAsAiBinaryOperator(ByteBuffer _bb) { return GetRootAsAiBinaryOperator(_bb, new AiBinaryOperator()); }
  public static AiBinaryOperator GetRootAsAiBinaryOperator(ByteBuffer _bb, AiBinaryOperator obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiBinaryOperator __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public cfg.AiEOperator Oper { get { int o = __p.__offset(4); return o != 0 ? (cfg.AiEOperator)__p.bb.GetInt(o + __p.bb_pos) : cfg.AiEOperator.AiEOperator_IS_EQUAL_TO; } }
  public cfg.AiKeyData DataType { get { int o = __p.__offset(6); return o != 0 ? (cfg.AiKeyData)__p.bb.Get(o + __p.bb_pos) : cfg.AiKeyData.NONE; } }
  public TTable? Data<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public cfg.AiFloatKeyData DataAsAiFloatKeyData() { return Data<cfg.AiFloatKeyData>().Value; }
  public cfg.AiIntKeyData DataAsAiIntKeyData() { return Data<cfg.AiIntKeyData>().Value; }
  public cfg.AiStringKeyData DataAsAiStringKeyData() { return Data<cfg.AiStringKeyData>().Value; }
  public cfg.AiBlackboardKeyData DataAsAiBlackboardKeyData() { return Data<cfg.AiBlackboardKeyData>().Value; }

  public static Offset<cfg.AiBinaryOperator> CreateAiBinaryOperator(FlatBufferBuilder builder,
      cfg.AiEOperator oper = cfg.AiEOperator.AiEOperator_IS_EQUAL_TO,
      cfg.AiKeyData data_type = cfg.AiKeyData.NONE,
      int dataOffset = 0) {
    builder.StartTable(3);
    AiBinaryOperator.AddData(builder, dataOffset);
    AiBinaryOperator.AddOper(builder, oper);
    AiBinaryOperator.AddDataType(builder, data_type);
    return AiBinaryOperator.EndAiBinaryOperator(builder);
  }

  public static void StartAiBinaryOperator(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddOper(FlatBufferBuilder builder, cfg.AiEOperator oper) { builder.AddInt(0, (int)oper, 0); }
  public static void AddDataType(FlatBufferBuilder builder, cfg.AiKeyData dataType) { builder.AddByte(1, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(2, dataOffset, 0); }
  public static Offset<cfg.AiBinaryOperator> EndAiBinaryOperator(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 8);  // data
    return new Offset<cfg.AiBinaryOperator>(o);
  }
}


static public class AiBinaryOperatorVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Oper*/, 4 /*cfg.AiEOperator*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*DataType*/, 1 /*cfg.AiKeyData*/, 1, false)
      && verifier.VerifyUnion(tablePos, 6, 8 /*Data*/, cfg.AiKeyDataVerify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
