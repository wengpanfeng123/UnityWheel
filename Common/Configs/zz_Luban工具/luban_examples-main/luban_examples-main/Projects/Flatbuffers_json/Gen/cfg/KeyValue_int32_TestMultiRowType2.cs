// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct KeyValue_int32_TestMultiRowType2 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static KeyValue_int32_TestMultiRowType2 GetRootAsKeyValue_int32_TestMultiRowType2(ByteBuffer _bb) { return GetRootAsKeyValue_int32_TestMultiRowType2(_bb, new KeyValue_int32_TestMultiRowType2()); }
  public static KeyValue_int32_TestMultiRowType2 GetRootAsKeyValue_int32_TestMultiRowType2(ByteBuffer _bb, KeyValue_int32_TestMultiRowType2 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyValue_int32_TestMultiRowType2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Key { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public cfg.TestMultiRowType2? Value { get { int o = __p.__offset(6); return o != 0 ? (cfg.TestMultiRowType2?)(new cfg.TestMultiRowType2()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<cfg.KeyValue_int32_TestMultiRowType2> CreateKeyValue_int32_TestMultiRowType2(FlatBufferBuilder builder,
      int key = 0,
      Offset<cfg.TestMultiRowType2> valueOffset = default(Offset<cfg.TestMultiRowType2>)) {
    builder.StartTable(2);
    KeyValue_int32_TestMultiRowType2.AddValue(builder, valueOffset);
    KeyValue_int32_TestMultiRowType2.AddKey(builder, key);
    return KeyValue_int32_TestMultiRowType2.EndKeyValue_int32_TestMultiRowType2(builder);
  }

  public static void StartKeyValue_int32_TestMultiRowType2(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddKey(FlatBufferBuilder builder, int key) { builder.AddInt(0, key, 0); }
  public static void AddValue(FlatBufferBuilder builder, Offset<cfg.TestMultiRowType2> valueOffset) { builder.AddOffset(1, valueOffset.Value, 0); }
  public static Offset<cfg.KeyValue_int32_TestMultiRowType2> EndKeyValue_int32_TestMultiRowType2(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // value
    return new Offset<cfg.KeyValue_int32_TestMultiRowType2>(o);
  }
}


static public class KeyValue_int32_TestMultiRowType2Verify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Key*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 6 /*Value*/, cfg.TestMultiRowType2Verify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
