// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestH2 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static TestH2 GetRootAsTestH2(ByteBuffer _bb) { return GetRootAsTestH2(_bb, new TestH2()); }
  public static TestH2 GetRootAsTestH2(ByteBuffer _bb, TestH2 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestH2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Z2 { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Z3 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<cfg.TestH2> CreateTestH2(FlatBufferBuilder builder,
      int z2 = 0,
      int z3 = 0) {
    builder.StartTable(2);
    TestH2.AddZ3(builder, z3);
    TestH2.AddZ2(builder, z2);
    return TestH2.EndTestH2(builder);
  }

  public static void StartTestH2(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddZ2(FlatBufferBuilder builder, int z2) { builder.AddInt(0, z2, 0); }
  public static void AddZ3(FlatBufferBuilder builder, int z3) { builder.AddInt(1, z3, 0); }
  public static Offset<cfg.TestH2> EndTestH2(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<cfg.TestH2>(o);
  }
}


static public class TestH2Verify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Z2*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Z3*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
