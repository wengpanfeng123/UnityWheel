// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace cfg
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AiUeBlackboard : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static AiUeBlackboard GetRootAsAiUeBlackboard(ByteBuffer _bb) { return GetRootAsAiUeBlackboard(_bb, new AiUeBlackboard()); }
  public static AiUeBlackboard GetRootAsAiUeBlackboard(ByteBuffer _bb, AiUeBlackboard obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AiUeBlackboard __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string NodeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNodeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNodeNameArray() { return __p.__vector_as_array<byte>(6); }
  public cfg.AiEFlowAbortMode FlowAbortMode { get { int o = __p.__offset(8); return o != 0 ? (cfg.AiEFlowAbortMode)__p.bb.GetInt(o + __p.bb_pos) : cfg.AiEFlowAbortMode.AiEFlowAbortMode_NONE; } }
  public cfg.AiENotifyObserverMode NotifyObserver { get { int o = __p.__offset(10); return o != 0 ? (cfg.AiENotifyObserverMode)__p.bb.GetInt(o + __p.bb_pos) : cfg.AiENotifyObserverMode.AiENotifyObserverMode_ON_VALUE_CHANGE; } }
  public string BlackboardKey { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBlackboardKeyBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetBlackboardKeyBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetBlackboardKeyArray() { return __p.__vector_as_array<byte>(12); }
  public cfg.AiKeyQueryOperator KeyQueryType { get { int o = __p.__offset(14); return o != 0 ? (cfg.AiKeyQueryOperator)__p.bb.Get(o + __p.bb_pos) : cfg.AiKeyQueryOperator.NONE; } }
  public TTable? KeyQuery<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(16); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public cfg.AiIsSet KeyQueryAsAiIsSet() { return KeyQuery<cfg.AiIsSet>().Value; }
  public cfg.AiIsNotSet KeyQueryAsAiIsNotSet() { return KeyQuery<cfg.AiIsNotSet>().Value; }
  public cfg.AiBinaryOperator KeyQueryAsAiBinaryOperator() { return KeyQuery<cfg.AiBinaryOperator>().Value; }

  public static Offset<cfg.AiUeBlackboard> CreateAiUeBlackboard(FlatBufferBuilder builder,
      int id = 0,
      StringOffset node_nameOffset = default(StringOffset),
      cfg.AiEFlowAbortMode flow_abort_mode = cfg.AiEFlowAbortMode.AiEFlowAbortMode_NONE,
      cfg.AiENotifyObserverMode notify_observer = cfg.AiENotifyObserverMode.AiENotifyObserverMode_ON_VALUE_CHANGE,
      StringOffset blackboard_keyOffset = default(StringOffset),
      cfg.AiKeyQueryOperator key_query_type = cfg.AiKeyQueryOperator.NONE,
      int key_queryOffset = 0) {
    builder.StartTable(7);
    AiUeBlackboard.AddKeyQuery(builder, key_queryOffset);
    AiUeBlackboard.AddBlackboardKey(builder, blackboard_keyOffset);
    AiUeBlackboard.AddNotifyObserver(builder, notify_observer);
    AiUeBlackboard.AddFlowAbortMode(builder, flow_abort_mode);
    AiUeBlackboard.AddNodeName(builder, node_nameOffset);
    AiUeBlackboard.AddId(builder, id);
    AiUeBlackboard.AddKeyQueryType(builder, key_query_type);
    return AiUeBlackboard.EndAiUeBlackboard(builder);
  }

  public static void StartAiUeBlackboard(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddNodeName(FlatBufferBuilder builder, StringOffset nodeNameOffset) { builder.AddOffset(1, nodeNameOffset.Value, 0); }
  public static void AddFlowAbortMode(FlatBufferBuilder builder, cfg.AiEFlowAbortMode flowAbortMode) { builder.AddInt(2, (int)flowAbortMode, 0); }
  public static void AddNotifyObserver(FlatBufferBuilder builder, cfg.AiENotifyObserverMode notifyObserver) { builder.AddInt(3, (int)notifyObserver, 0); }
  public static void AddBlackboardKey(FlatBufferBuilder builder, StringOffset blackboardKeyOffset) { builder.AddOffset(4, blackboardKeyOffset.Value, 0); }
  public static void AddKeyQueryType(FlatBufferBuilder builder, cfg.AiKeyQueryOperator keyQueryType) { builder.AddByte(5, (byte)keyQueryType, 0); }
  public static void AddKeyQuery(FlatBufferBuilder builder, int keyQueryOffset) { builder.AddOffset(6, keyQueryOffset, 0); }
  public static Offset<cfg.AiUeBlackboard> EndAiUeBlackboard(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 16);  // key_query
    return new Offset<cfg.AiUeBlackboard>(o);
  }
}


static public class AiUeBlackboardVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*NodeName*/, false)
      && verifier.VerifyField(tablePos, 8 /*FlowAbortMode*/, 4 /*cfg.AiEFlowAbortMode*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*NotifyObserver*/, 4 /*cfg.AiENotifyObserverMode*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*BlackboardKey*/, false)
      && verifier.VerifyField(tablePos, 14 /*KeyQueryType*/, 1 /*cfg.AiKeyQueryOperator*/, 1, false)
      && verifier.VerifyUnion(tablePos, 14, 16 /*KeyQuery*/, cfg.AiKeyQueryOperatorVerify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
