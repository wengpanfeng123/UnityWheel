
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg.ai
{
public sealed partial class UeLoop : ai.Decorator
{
    public UeLoop(JSONNode _buf)  : base(_buf) 
    {
        { if(!_buf["num_loops"].IsNumber) { throw new SerializationException(); }  NumLoops = _buf["num_loops"]; }
        { if(!_buf["infinite_loop"].IsBoolean) { throw new SerializationException(); }  InfiniteLoop = _buf["infinite_loop"]; }
        { if(!_buf["infinite_loop_timeout_time"].IsNumber) { throw new SerializationException(); }  InfiniteLoopTimeoutTime = _buf["infinite_loop_timeout_time"]; }
    }

    public static UeLoop DeserializeUeLoop(JSONNode _buf)
    {
        return new ai.UeLoop(_buf);
    }

    public readonly int NumLoops;
    public readonly bool InfiniteLoop;
    public readonly float InfiniteLoopTimeoutTime;
   
    public const int __ID__ = -513308166;
    public override int GetTypeId() => __ID__;

    public override void ResolveRef(Tables tables)
    {
        base.ResolveRef(tables);
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "nodeName:" + NodeName + ","
        + "flowAbortMode:" + FlowAbortMode + ","
        + "numLoops:" + NumLoops + ","
        + "infiniteLoop:" + InfiniteLoop + ","
        + "infiniteLoopTimeoutTime:" + InfiniteLoopTimeoutTime + ","
        + "}";
    }
}

}
