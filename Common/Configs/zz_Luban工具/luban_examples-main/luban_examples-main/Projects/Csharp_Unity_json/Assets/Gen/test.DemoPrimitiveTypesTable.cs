
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg.test
{
public sealed partial class DemoPrimitiveTypesTable : Luban.BeanBase
{
    public DemoPrimitiveTypesTable(JSONNode _buf) 
    {
        { if(!_buf["x1"].IsBoolean) { throw new SerializationException(); }  X1 = _buf["x1"]; }
        { if(!_buf["x2"].IsNumber) { throw new SerializationException(); }  X2 = _buf["x2"]; }
        { if(!_buf["x3"].IsNumber) { throw new SerializationException(); }  X3 = _buf["x3"]; }
        { if(!_buf["x4"].IsNumber) { throw new SerializationException(); }  X4 = _buf["x4"]; }
        { if(!_buf["x5"].IsNumber) { throw new SerializationException(); }  X5 = _buf["x5"]; }
        { if(!_buf["x6"].IsNumber) { throw new SerializationException(); }  X6 = _buf["x6"]; }
        { if(!_buf["x7"].IsNumber) { throw new SerializationException(); }  X7 = _buf["x7"]; }
        { if(!_buf["s1"].IsString) { throw new SerializationException(); }  S1 = _buf["s1"]; }
        { if(!_buf["s2"].IsString) { throw new SerializationException(); }  S2 = _buf["s2"]; }
        { if(!_buf["v2"].IsObject) { throw new SerializationException(); }  V2 = ExternalTypeUtil.NewVector2(vec2.Deserializevec2(_buf["v2"]));  }
        { if(!_buf["v3"].IsObject) { throw new SerializationException(); }  V3 = ExternalTypeUtil.NewVector3(vec3.Deserializevec3(_buf["v3"]));  }
        { if(!_buf["v4"].IsObject) { throw new SerializationException(); }  V4 = ExternalTypeUtil.NewVector4(vec4.Deserializevec4(_buf["v4"]));  }
        { if(!_buf["t1"].IsNumber) { throw new SerializationException(); }  T1 = _buf["t1"]; }
    }

    public static DemoPrimitiveTypesTable DeserializeDemoPrimitiveTypesTable(JSONNode _buf)
    {
        return new test.DemoPrimitiveTypesTable(_buf);
    }

    public readonly bool X1;
    public readonly byte X2;
    public readonly short X3;
    public readonly int X4;
    public readonly long X5;
    public readonly float X6;
    public readonly double X7;
    public readonly string S1;
    public readonly string S2;
    public readonly UnityEngine.Vector2 V2;
    public readonly UnityEngine.Vector3 V3;
    public readonly UnityEngine.Vector4 V4;
    public readonly long T1;
   
    public const int __ID__ = -370934083;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "x1:" + X1 + ","
        + "x2:" + X2 + ","
        + "x3:" + X3 + ","
        + "x4:" + X4 + ","
        + "x5:" + X5 + ","
        + "x6:" + X6 + ","
        + "x7:" + X7 + ","
        + "s1:" + S1 + ","
        + "s2:" + S2 + ","
        + "v2:" + V2 + ","
        + "v3:" + V3 + ","
        + "v4:" + V4 + ","
        + "t1:" + T1 + ","
        + "}";
    }
}

}
